
Esterel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  0000365a  000036ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000365a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800310  00800310  000037fe  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000045c  00000000  00000000  0000381e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e31  00000000  00000000  00003c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026c  00000000  00000000  00004aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e5  00000000  00000000  00004d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00005ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fe  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x220>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ea e5       	ldi	r30, 0x5A	; 90
     17e:	f6 e3       	ldi	r31, 0x36	; 54
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 31       	cpi	r26, 0x10	; 16
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a0 e1       	ldi	r26, 0x10	; 16
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ae 32       	cpi	r26, 0x2E	; 46
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 0e 11 	call	0x221c	; 0x221c <main>
     1a4:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <__vector_25>:

// motion functions
int gesture;

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	00 90 5b 00 	lds	r0, 0x005B
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	8f 93       	push	r24
     1be:	9f 93       	push	r25
     1c0:	ef 93       	push	r30
     1c2:	ff 93       	push	r31
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
	cli();
     1cc:	f8 94       	cli
	gesture = UDR0 - 48; 				//making copy of data
     1ce:	e6 ec       	ldi	r30, 0xC6	; 198
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	c0 97       	sbiw	r24, 0x30	; 48
     1da:	90 93 23 03 	sts	0x0323, r25
     1de:	80 93 22 03 	sts	0x0322, r24
	UDR0 = gesture;
     1e2:	e6 ec       	ldi	r30, 0xC6	; 198
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 91 22 03 	lds	r24, 0x0322
     1ea:	90 91 23 03 	lds	r25, 0x0323
     1ee:	80 83       	st	Z, r24
	sei();
     1f0:	78 94       	sei
}
     1f2:	cf 91       	pop	r28
     1f4:	df 91       	pop	r29
     1f6:	ff 91       	pop	r31
     1f8:	ef 91       	pop	r30
     1fa:	9f 91       	pop	r25
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	00 92 5b 00 	sts	0x005B, r0
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <motion_pin_config>:


void motion_pin_config (void)
{
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
     216:	a1 e2       	ldi	r26, 0x21	; 33
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e1 e2       	ldi	r30, 0x21	; 33
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 60       	ori	r24, 0x0F	; 15
     222:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
     224:	a2 e2       	ldi	r26, 0x22	; 34
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e2 e2       	ldi	r30, 0x22	; 34
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	80 7f       	andi	r24, 0xF0	; 240
     230:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     232:	aa e0       	ldi	r26, 0x0A	; 10
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	ea e0       	ldi	r30, 0x0A	; 10
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	80 81       	ld	r24, Z
     23c:	88 61       	ori	r24, 0x18	; 24
     23e:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     240:	ab e0       	ldi	r26, 0x0B	; 11
     242:	b1 e0       	ldi	r27, 0x01	; 1
     244:	eb e0       	ldi	r30, 0x0B	; 11
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	80 81       	ld	r24, Z
     24a:	88 61       	ori	r24, 0x18	; 24
     24c:	8c 93       	st	X, r24
}
     24e:	cf 91       	pop	r28
     250:	df 91       	pop	r29
     252:	08 95       	ret

00000254 <uart0_init>:

void uart0_init(void)
{
     254:	df 93       	push	r29
     256:	cf 93       	push	r28
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
     25c:	e1 ec       	ldi	r30, 0xC1	; 193
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	10 82       	st	Z, r1
 UCSR0A = 0x00;
     262:	e0 ec       	ldi	r30, 0xC0	; 192
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	10 82       	st	Z, r1
 UCSR0C = 0x06;
     268:	e2 ec       	ldi	r30, 0xC2	; 194
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	86 e0       	ldi	r24, 0x06	; 6
     26e:	80 83       	st	Z, r24
 UBRR0L = 0x5F; //set baud rate lo
     270:	e4 ec       	ldi	r30, 0xC4	; 196
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	8f e5       	ldi	r24, 0x5F	; 95
     276:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
     278:	e5 ec       	ldi	r30, 0xC5	; 197
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	10 82       	st	Z, r1
 UCSR0B = 0x98;
     27e:	e1 ec       	ldi	r30, 0xC1	; 193
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	88 e9       	ldi	r24, 0x98	; 152
     284:	80 83       	st	Z, r24
}
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	08 95       	ret

0000028c <init_devices>:

//Function to initialize ports
void init_devices()
{
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	cli();
     294:	f8 94       	cli
 motion_pin_config();
     296:	0e 94 07 01 	call	0x20e	; 0x20e <motion_pin_config>
 port_init();
     29a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <port_init>
 init_adc();
     29e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <init_adc>
 timer5_init();
     2a2:	0e 94 de 01 	call	0x3bc	; 0x3bc <timer5_init>
init_lcd();
     2a6:	0e 94 76 03 	call	0x6ec	; 0x6ec <init_lcd>
lcd_init();
     2aa:	0e 94 9f 08 	call	0x113e	; 0x113e <lcd_init>
lcd_set_4bit();
     2ae:	0e 94 a0 03 	call	0x740	; 0x740 <lcd_set_4bit>
gesture=0;
     2b2:	10 92 23 03 	sts	0x0323, r1
     2b6:	10 92 22 03 	sts	0x0322, r1
uart0_init();
     2ba:	0e 94 2a 01 	call	0x254	; 0x254 <uart0_init>

init_buzzer();
     2be:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <init_buzzer>


sei();
     2c2:	78 94       	sei
}
     2c4:	cf 91       	pop	r28
     2c6:	df 91       	pop	r29
     2c8:	08 95       	ret

000002ca <motion_set>:



//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	0f 92       	push	r0
     2d0:	0f 92       	push	r0
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
     2d8:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	8f 70       	andi	r24, 0x0F	; 15
     2de:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 			// reading the PORTA's original status
     2e0:	e2 e2       	ldi	r30, 0x22	; 34
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	80 7f       	andi	r24, 0xF0	; 240
     2ec:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
     2ee:	99 81       	ldd	r25, Y+1	; 0x01
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	89 2b       	or	r24, r25
     2f4:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 			// setting the command to the port
     2f6:	e2 e2       	ldi	r30, 0x22	; 34
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	80 83       	st	Z, r24

}
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	cf 91       	pop	r28
     304:	df 91       	pop	r29
     306:	08 95       	ret

00000308 <MOVE_FWD>:
#define MOVE_INPLACE_RIGHT inplace_right()
#define MOVE_INPLACE_LEFT inplace_left()*/


void MOVE_FWD(void) //both wheels forward
{
     308:	df 93       	push	r29
     30a:	cf 93       	push	r28
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x06);
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     316:	cf 91       	pop	r28
     318:	df 91       	pop	r29
     31a:	08 95       	ret

0000031c <MOVE_REV>:

void MOVE_REV(void) //both wheels backward
{
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
     324:	89 e0       	ldi	r24, 0x09	; 9
     326:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <MOVE_LEFT>:

void MOVE_LEFT(void) //Left wheel backward, Right wheel forward
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
     338:	85 e0       	ldi	r24, 0x05	; 5
     33a:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <MOVE_RIGHT>:

void MOVE_RIGHT(void) //Left wheel forward, Right wheel backward
{
     344:	df 93       	push	r29
     346:	cf 93       	push	r28
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
     34c:	8a e0       	ldi	r24, 0x0A	; 10
     34e:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	08 95       	ret

00000358 <MOVE_SOFT_LEFT>:

void MOVE_SOFT_LEFT (void) //Left wheel stationary, Right wheel forward
{
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
     360:	84 e0       	ldi	r24, 0x04	; 4
     362:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <MOVE_SOFT_RIGHT>:

void MOVE_SOFT_RIGHT (void) //Left wheel forward, Right wheel is stationary
{
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	08 95       	ret

00000380 <MOVE_INPLACE_LEFT>:

void MOVE_INPLACE_LEFT(void) //Left wheel backward, right wheel stationary
{
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     38e:	cf 91       	pop	r28
     390:	df 91       	pop	r29
     392:	08 95       	ret

00000394 <MOVE_INPLACE_RIGHT>:

void MOVE_INPLACE_RIGHT (void) //Left wheel stationary, Right wheel backward
{
     394:	df 93       	push	r29
     396:	cf 93       	push	r28
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
     39c:	88 e0       	ldi	r24, 0x08	; 8
     39e:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	08 95       	ret

000003a8 <STOP>:

void STOP (void)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 65 01 	call	0x2ca	; 0x2ca <motion_set>
}
     3b6:	cf 91       	pop	r28
     3b8:	df 91       	pop	r29
     3ba:	08 95       	ret

000003bc <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
     3bc:	df 93       	push	r29
     3be:	cf 93       	push	r28
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
     3c4:	e1 e2       	ldi	r30, 0x21	; 33
     3c6:	f1 e0       	ldi	r31, 0x01	; 1
     3c8:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     3ca:	e5 e2       	ldi	r30, 0x25	; 37
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     3d2:	e4 e2       	ldi	r30, 0x24	; 36
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     3da:	e9 e2       	ldi	r30, 0x29	; 41
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     3e0:	e8 e2       	ldi	r30, 0x28	; 40
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     3e8:	eb e2       	ldi	r30, 0x2B	; 43
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     3ee:	ea e2       	ldi	r30, 0x2A	; 42
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	8f ef       	ldi	r24, 0xFF	; 255
     3f4:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     3f6:	ed e2       	ldi	r30, 0x2D	; 45
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     3fc:	ec e2       	ldi	r30, 0x2C	; 44
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     404:	e0 e2       	ldi	r30, 0x20	; 32
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	89 ea       	ldi	r24, 0xA9	; 169
     40a:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     40c:	e1 e2       	ldi	r30, 0x21	; 33
     40e:	f1 e0       	ldi	r31, 0x01	; 1
     410:	8b e0       	ldi	r24, 0x0B	; 11
     412:	80 83       	st	Z, r24
}
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	08 95       	ret

0000041a <velocity>:
// Function for robot velocity control
// Make sure that you pass only unsigned char value.


void velocity (unsigned char left_motor, unsigned char right_motor)
{
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	0f 92       	push	r0
     420:	0f 92       	push	r0
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	89 83       	std	Y+1, r24	; 0x01
     428:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
     42a:	e8 e2       	ldi	r30, 0x28	; 40
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
     432:	ea e2       	ldi	r30, 0x2A	; 42
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	80 83       	st	Z, r24
}
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <MOTOR_LEFT_SPEED>:


void MOTOR_LEFT_SPEED(int val)
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	0f 92       	push	r0
     44a:	0f 92       	push	r0
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
    if ( val > 254 )   //limiting the max velocity
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	8f 3f       	cpi	r24, 0xFF	; 255
     45a:	91 05       	cpc	r25, r1
     45c:	24 f0       	brlt	.+8      	; 0x466 <MOTOR_LEFT_SPEED+0x22>
	   val = 255;	
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9a 83       	std	Y+2, r25	; 0x02
     464:	89 83       	std	Y+1, r24	; 0x01
    OCR5AL = (unsigned char) val;
     466:	e8 e2       	ldi	r30, 0x28	; 40
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	80 83       	st	Z, r24
}
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	cf 91       	pop	r28
     474:	df 91       	pop	r29
     476:	08 95       	ret

00000478 <MOTOR_RIGHT_SPEED>:

void MOTOR_RIGHT_SPEED(int val)
{
     478:	df 93       	push	r29
     47a:	cf 93       	push	r28
     47c:	0f 92       	push	r0
     47e:	0f 92       	push	r0
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	9a 83       	std	Y+2, r25	; 0x02
     486:	89 83       	std	Y+1, r24	; 0x01
  if ( val > 254 )     //limiting the max velocity
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	8f 3f       	cpi	r24, 0xFF	; 255
     48e:	91 05       	cpc	r25, r1
     490:	24 f0       	brlt	.+8      	; 0x49a <MOTOR_RIGHT_SPEED+0x22>
	  val = 255;
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
  OCR5BL = (unsigned char) val;
     49a:	ea e2       	ldi	r30, 0x2A	; 42
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	80 83       	st	Z, r24
}
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <adc_pin_config>:



//ADC pin configuration
void adc_pin_config (void)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
     4b4:	e0 e3       	ldi	r30, 0x30	; 48
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	10 82       	st	Z, r1
 PORTF = 0x00;
     4ba:	e1 e3       	ldi	r30, 0x31	; 49
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	10 82       	st	Z, r1
 DDRK = 0x00;
     4c0:	e7 e0       	ldi	r30, 0x07	; 7
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	10 82       	st	Z, r1
 PORTK = 0x00;
     4c6:	e8 e0       	ldi	r30, 0x08	; 8
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	10 82       	st	Z, r1
}
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	08 95       	ret

000004d2 <port_init>:



//Function to Initialize PORTS
void port_init()
{
     4d2:	df 93       	push	r29
     4d4:	cf 93       	push	r28
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
	
	adc_pin_config();
     4da:	0e 94 56 02 	call	0x4ac	; 0x4ac <adc_pin_config>
		
}
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	08 95       	ret

000004e4 <init_adc>:




void init_adc()
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     4ec:	ea e7       	ldi	r30, 0x7A	; 122
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     4f2:	eb e7       	ldi	r30, 0x7B	; 123
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     4f8:	ec e7       	ldi	r30, 0x7C	; 124
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 e2       	ldi	r24, 0x20	; 32
     4fe:	80 83       	st	Z, r24
	ACSR = 0x80;
     500:	e0 e5       	ldi	r30, 0x50	; 80
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 e8       	ldi	r24, 0x80	; 128
     506:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     508:	ea e7       	ldi	r30, 0x7A	; 122
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	86 e8       	ldi	r24, 0x86	; 134
     50e:	80 83       	st	Z, r24
}
     510:	cf 91       	pop	r28
     512:	df 91       	pop	r29
     514:	08 95       	ret

00000516 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
     516:	df 93       	push	r29
     518:	cf 93       	push	r28
     51a:	0f 92       	push	r0
     51c:	0f 92       	push	r0
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	88 30       	cpi	r24, 0x08	; 8
     528:	20 f0       	brcs	.+8      	; 0x532 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
     52a:	eb e7       	ldi	r30, 0x7B	; 123
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	87 70       	andi	r24, 0x07	; 7
     536:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
     538:	ec e7       	ldi	r30, 0x7C	; 124
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	8a 81       	ldd	r24, Y+2	; 0x02
     53e:	80 62       	ori	r24, 0x20	; 32
     540:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     542:	aa e7       	ldi	r26, 0x7A	; 122
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	ea e7       	ldi	r30, 0x7A	; 122
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	80 64       	ori	r24, 0x40	; 64
     54e:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     550:	ea e7       	ldi	r30, 0x7A	; 122
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	88 2f       	mov	r24, r24
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	80 71       	andi	r24, 0x10	; 16
     55c:	90 70       	andi	r25, 0x00	; 0
     55e:	00 97       	sbiw	r24, 0x00	; 0
     560:	b9 f3       	breq	.-18     	; 0x550 <ADC_Conversion+0x3a>
	a=ADCH;
     562:	e9 e7       	ldi	r30, 0x79	; 121
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;
     56a:	aa e7       	ldi	r26, 0x7A	; 122
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	ea e7       	ldi	r30, 0x7A	; 122
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	80 61       	ori	r24, 0x10	; 16
     576:	8c 93       	st	X, r24
	ADCSRB = 0x00;
     578:	eb e7       	ldi	r30, 0x7B	; 123
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	10 82       	st	Z, r1
	return a;
     57e:	89 81       	ldd	r24, Y+1	; 0x01
}
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	cf 91       	pop	r28
     586:	df 91       	pop	r29
     588:	08 95       	ret

0000058a <init_ir>:
 analog value of Sharp Sensor. 
 ***********************************************************************************/

/***** Function to Initialize PORTS *****/
void init_ir()
{
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     592:	e0 e3       	ldi	r30, 0x30	; 48
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	10 82       	st	Z, r1
	PORTF = 0x00;
     598:	e1 e3       	ldi	r30, 0x31	; 49
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	10 82       	st	Z, r1
	DDRA = 0x0F;
     59e:	e1 e2       	ldi	r30, 0x21	; 33
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	8f e0       	ldi	r24, 0x0F	; 15
     5a4:	80 83       	st	Z, r24
	PORTA = 0x00;
     5a6:	e2 e2       	ldi	r30, 0x22	; 34
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	10 82       	st	Z, r1
	DDRL = 0x18;
     5ac:	ea e0       	ldi	r30, 0x0A	; 10
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	88 e1       	ldi	r24, 0x18	; 24
     5b2:	80 83       	st	Z, r24
	PORTL = 0x18;
     5b4:	eb e0       	ldi	r30, 0x0B	; 11
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	80 83       	st	Z, r24
	DDRC = 0xFF;
     5bc:	e7 e2       	ldi	r30, 0x27	; 39
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	80 83       	st	Z, r24
	PORTC = 0x00;
     5c4:	e8 e2       	ldi	r30, 0x28	; 40
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	10 82       	st	Z, r1
	DDRJ = 0x00;
     5ca:	e4 e0       	ldi	r30, 0x04	; 4
     5cc:	f1 e0       	ldi	r31, 0x01	; 1
     5ce:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     5d0:	e5 e0       	ldi	r30, 0x05	; 5
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	80 83       	st	Z, r24
}
     5d8:	cf 91       	pop	r28
     5da:	df 91       	pop	r29
     5dc:	08 95       	ret

000005de <Sharp_estimation>:


unsigned int Sharp_estimation(unsigned char adc_reading)
{
     5de:	df 93       	push	r29
     5e0:	cf 93       	push	r28
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	27 97       	sbiw	r28, 0x07	; 7
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     5f4:	8f 81       	ldd	r24, Y+7	; 0x07
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	bc 01       	movw	r22, r24
     600:	cd 01       	movw	r24, r26
     602:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__floatunsisf>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	2f ee       	ldi	r18, 0xEF	; 239
     610:	39 ec       	ldi	r19, 0xC9	; 201
     612:	43 e9       	ldi	r20, 0x93	; 147
     614:	5f e3       	ldi	r21, 0x3F	; 63
     616:	0e 94 b4 18 	call	0x3168	; 0x3168 <pow>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	9c 01       	movw	r18, r24
     620:	ad 01       	movw	r20, r26
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	9f e3       	ldi	r25, 0x3F	; 63
     62a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__divsf3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	2a e9       	ldi	r18, 0x9A	; 154
     638:	39 ef       	ldi	r19, 0xF9	; 249
     63a:	4e e2       	ldi	r20, 0x2E	; 46
     63c:	55 e4       	ldi	r21, 0x45	; 69
     63e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     642:	dc 01       	movw	r26, r24
     644:	cb 01       	movw	r24, r22
     646:	bc 01       	movw	r22, r24
     648:	cd 01       	movw	r24, r26
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	40 e2       	ldi	r20, 0x20	; 32
     650:	51 e4       	ldi	r21, 0x41	; 65
     652:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	bc 01       	movw	r22, r24
     65c:	cd 01       	movw	r24, r26
     65e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fixsfsi>
     662:	dc 01       	movw	r26, r24
     664:	cb 01       	movw	r24, r22
     666:	aa 27       	eor	r26, r26
     668:	97 fd       	sbrc	r25, 7
     66a:	a0 95       	com	r26
     66c:	ba 2f       	mov	r27, r26
     66e:	bc 01       	movw	r22, r24
     670:	cd 01       	movw	r24, r26
     672:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__floatsisf>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	9c 83       	std	Y+4, r25	; 0x04
     67e:	ad 83       	std	Y+5, r26	; 0x05
     680:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
     682:	6b 81       	ldd	r22, Y+3	; 0x03
     684:	7c 81       	ldd	r23, Y+4	; 0x04
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fixsfsi>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	9a 83       	std	Y+2, r25	; 0x02
     694:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	23 e0       	ldi	r18, 0x03	; 3
     69c:	81 32       	cpi	r24, 0x21	; 33
     69e:	92 07       	cpc	r25, r18
     6a0:	20 f0       	brcs	.+8      	; 0x6aa <Sharp_estimation+0xcc>
	{
		distanceInt=800;
     6a2:	80 e2       	ldi	r24, 0x20	; 32
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6ae:	27 96       	adiw	r28, 0x07	; 7
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	08 95       	ret

000006c0 <front_dist_mm>:


int front_dist_mm(void) 
{
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <front_dist_mm+0x6>
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
  //float front_distance;
  int front_distance_mm;
  unsigned char analog_val;
  analog_val = ADC_Conversion(11);
     6ca:	8b e0       	ldi	r24, 0x0B	; 11
     6cc:	0e 94 8b 02 	call	0x516	; 0x516 <ADC_Conversion>
     6d0:	89 83       	std	Y+1, r24	; 0x01
 

 front_distance_mm=Sharp_estimation(analog_val);
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	0e 94 ef 02 	call	0x5de	; 0x5de <Sharp_estimation>
     6d8:	9b 83       	std	Y+3, r25	; 0x03
     6da:	8a 83       	std	Y+2, r24	; 0x02
  return front_distance_mm; 	
     6dc:	8a 81       	ldd	r24, Y+2	; 0x02
     6de:	9b 81       	ldd	r25, Y+3	; 0x03

  //return 100;
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	cf 91       	pop	r28
     6e8:	df 91       	pop	r29
     6ea:	08 95       	ret

000006ec <init_lcd>:

int i;


void init_lcd()
{
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
     6f4:	e0 e3       	ldi	r30, 0x30	; 48
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	10 82       	st	Z, r1
	PORTF = 0x00;
     6fa:	e1 e3       	ldi	r30, 0x31	; 49
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	10 82       	st	Z, r1
	DDRA = 0x0F;
     700:	e1 e2       	ldi	r30, 0x21	; 33
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	8f e0       	ldi	r24, 0x0F	; 15
     706:	80 83       	st	Z, r24
	PORTA = 0x00;
     708:	e2 e2       	ldi	r30, 0x22	; 34
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	10 82       	st	Z, r1
	DDRL = 0x18;
     70e:	ea e0       	ldi	r30, 0x0A	; 10
     710:	f1 e0       	ldi	r31, 0x01	; 1
     712:	88 e1       	ldi	r24, 0x18	; 24
     714:	80 83       	st	Z, r24
	PORTL = 0x18;
     716:	eb e0       	ldi	r30, 0x0B	; 11
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	88 e1       	ldi	r24, 0x18	; 24
     71c:	80 83       	st	Z, r24
	DDRC = 0xFF;
     71e:	e7 e2       	ldi	r30, 0x27	; 39
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	8f ef       	ldi	r24, 0xFF	; 255
     724:	80 83       	st	Z, r24
	PORTC = 0x00;
     726:	e8 e2       	ldi	r30, 0x28	; 40
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	10 82       	st	Z, r1
	DDRJ = 0x00;
     72c:	e4 e0       	ldi	r30, 0x04	; 4
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	10 82       	st	Z, r1
	PORTJ = 0xFF;
     732:	e5 e0       	ldi	r30, 0x05	; 5
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	80 83       	st	Z, r24
}
     73a:	cf 91       	pop	r28
     73c:	df 91       	pop	r29
     73e:	08 95       	ret

00000740 <lcd_set_4bit>:



/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	df 93       	push	r29
     746:	cf 93       	push	r28
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	c0 57       	subi	r28, 0x70	; 112
     74e:	d0 40       	sbci	r29, 0x00	; 0
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	fe 01       	movw	r30, r28
     75c:	e3 59       	subi	r30, 0x93	; 147
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	a0 e8       	ldi	r26, 0x80	; 128
     766:	bf e3       	ldi	r27, 0x3F	; 63
     768:	80 83       	st	Z, r24
     76a:	91 83       	std	Z+1, r25	; 0x01
     76c:	a2 83       	std	Z+2, r26	; 0x02
     76e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     770:	8e 01       	movw	r16, r28
     772:	07 59       	subi	r16, 0x97	; 151
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	fe 01       	movw	r30, r28
     778:	e3 59       	subi	r30, 0x93	; 147
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	60 81       	ld	r22, Z
     77e:	71 81       	ldd	r23, Z+1	; 0x01
     780:	82 81       	ldd	r24, Z+2	; 0x02
     782:	93 81       	ldd	r25, Z+3	; 0x03
     784:	26 e6       	ldi	r18, 0x66	; 102
     786:	36 e6       	ldi	r19, 0x66	; 102
     788:	46 e6       	ldi	r20, 0x66	; 102
     78a:	55 e4       	ldi	r21, 0x45	; 69
     78c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	f8 01       	movw	r30, r16
     796:	80 83       	st	Z, r24
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	a2 83       	std	Z+2, r26	; 0x02
     79c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     79e:	fe 01       	movw	r30, r28
     7a0:	e7 59       	subi	r30, 0x97	; 151
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	60 81       	ld	r22, Z
     7a6:	71 81       	ldd	r23, Z+1	; 0x01
     7a8:	82 81       	ldd	r24, Z+2	; 0x02
     7aa:	93 81       	ldd	r25, Z+3	; 0x03
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	40 e8       	ldi	r20, 0x80	; 128
     7b2:	5f e3       	ldi	r21, 0x3F	; 63
     7b4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     7b8:	88 23       	and	r24, r24
     7ba:	44 f4       	brge	.+16     	; 0x7cc <lcd_set_4bit+0x8c>
		__ticks = 1;
     7bc:	fe 01       	movw	r30, r28
     7be:	e9 59       	subi	r30, 0x99	; 153
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	80 83       	st	Z, r24
     7ca:	64 c0       	rjmp	.+200    	; 0x894 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     7cc:	fe 01       	movw	r30, r28
     7ce:	e7 59       	subi	r30, 0x97	; 151
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	60 81       	ld	r22, Z
     7d4:	71 81       	ldd	r23, Z+1	; 0x01
     7d6:	82 81       	ldd	r24, Z+2	; 0x02
     7d8:	93 81       	ldd	r25, Z+3	; 0x03
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	3f ef       	ldi	r19, 0xFF	; 255
     7de:	4f e7       	ldi	r20, 0x7F	; 127
     7e0:	57 e4       	ldi	r21, 0x47	; 71
     7e2:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <lcd_set_4bit+0xac>
     7ea:	43 c0       	rjmp	.+134    	; 0x872 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	fe 01       	movw	r30, r28
     7ee:	e3 59       	subi	r30, 0x93	; 147
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	60 81       	ld	r22, Z
     7f4:	71 81       	ldd	r23, Z+1	; 0x01
     7f6:	82 81       	ldd	r24, Z+2	; 0x02
     7f8:	93 81       	ldd	r25, Z+3	; 0x03
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e2       	ldi	r20, 0x20	; 32
     800:	51 e4       	ldi	r21, 0x41	; 65
     802:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	8e 01       	movw	r16, r28
     80c:	09 59       	subi	r16, 0x99	; 153
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	bc 01       	movw	r22, r24
     812:	cd 01       	movw	r24, r26
     814:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	f8 01       	movw	r30, r16
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	80 83       	st	Z, r24
     822:	1f c0       	rjmp	.+62     	; 0x862 <lcd_set_4bit+0x122>
     824:	fe 01       	movw	r30, r28
     826:	eb 59       	subi	r30, 0x9B	; 155
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	80 e7       	ldi	r24, 0x70	; 112
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	91 83       	std	Z+1, r25	; 0x01
     830:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     832:	fe 01       	movw	r30, r28
     834:	eb 59       	subi	r30, 0x9B	; 155
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <lcd_set_4bit+0xfc>
     840:	fe 01       	movw	r30, r28
     842:	eb 59       	subi	r30, 0x9B	; 155
     844:	ff 4f       	sbci	r31, 0xFF	; 255
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     84a:	de 01       	movw	r26, r28
     84c:	a9 59       	subi	r26, 0x99	; 153
     84e:	bf 4f       	sbci	r27, 0xFF	; 255
     850:	fe 01       	movw	r30, r28
     852:	e9 59       	subi	r30, 0x99	; 153
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	11 96       	adiw	r26, 0x01	; 1
     85e:	9c 93       	st	X, r25
     860:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     862:	fe 01       	movw	r30, r28
     864:	e9 59       	subi	r30, 0x99	; 153
     866:	ff 4f       	sbci	r31, 0xFF	; 255
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	00 97       	sbiw	r24, 0x00	; 0
     86e:	d1 f6       	brne	.-76     	; 0x824 <lcd_set_4bit+0xe4>
     870:	27 c0       	rjmp	.+78     	; 0x8c0 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     872:	8e 01       	movw	r16, r28
     874:	09 59       	subi	r16, 0x99	; 153
     876:	1f 4f       	sbci	r17, 0xFF	; 255
     878:	fe 01       	movw	r30, r28
     87a:	e7 59       	subi	r30, 0x97	; 151
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	60 81       	ld	r22, Z
     880:	71 81       	ldd	r23, Z+1	; 0x01
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	93 81       	ldd	r25, Z+3	; 0x03
     886:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     88a:	dc 01       	movw	r26, r24
     88c:	cb 01       	movw	r24, r22
     88e:	f8 01       	movw	r30, r16
     890:	91 83       	std	Z+1, r25	; 0x01
     892:	80 83       	st	Z, r24
     894:	de 01       	movw	r26, r28
     896:	ad 59       	subi	r26, 0x9D	; 157
     898:	bf 4f       	sbci	r27, 0xFF	; 255
     89a:	fe 01       	movw	r30, r28
     89c:	e9 59       	subi	r30, 0x99	; 153
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	8d 93       	st	X+, r24
     8a6:	9c 93       	st	X, r25
     8a8:	fe 01       	movw	r30, r28
     8aa:	ed 59       	subi	r30, 0x9D	; 157
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <lcd_set_4bit+0x172>
     8b6:	fe 01       	movw	r30, r28
     8b8:	ed 59       	subi	r30, 0x9D	; 157
     8ba:	ff 4f       	sbci	r31, 0xFF	; 255
     8bc:	91 83       	std	Z+1, r25	; 0x01
     8be:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8c0:	a8 e2       	ldi	r26, 0x28	; 40
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	e8 e2       	ldi	r30, 0x28	; 40
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8e 7f       	andi	r24, 0xFE	; 254
     8cc:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8ce:	a8 e2       	ldi	r26, 0x28	; 40
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	e8 e2       	ldi	r30, 0x28	; 40
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	8d 7f       	andi	r24, 0xFD	; 253
     8da:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     8dc:	e8 e2       	ldi	r30, 0x28	; 40
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	80 e3       	ldi	r24, 0x30	; 48
     8e2:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     8e4:	a8 e2       	ldi	r26, 0x28	; 40
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e2       	ldi	r30, 0x28	; 40
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	84 60       	ori	r24, 0x04	; 4
     8f0:	8c 93       	st	X, r24
     8f2:	fe 01       	movw	r30, r28
     8f4:	e1 5a       	subi	r30, 0xA1	; 161
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 ea       	ldi	r26, 0xA0	; 160
     8fe:	b0 e4       	ldi	r27, 0x40	; 64
     900:	80 83       	st	Z, r24
     902:	91 83       	std	Z+1, r25	; 0x01
     904:	a2 83       	std	Z+2, r26	; 0x02
     906:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     908:	8e 01       	movw	r16, r28
     90a:	05 5a       	subi	r16, 0xA5	; 165
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	fe 01       	movw	r30, r28
     910:	e1 5a       	subi	r30, 0xA1	; 161
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	60 81       	ld	r22, Z
     916:	71 81       	ldd	r23, Z+1	; 0x01
     918:	82 81       	ldd	r24, Z+2	; 0x02
     91a:	93 81       	ldd	r25, Z+3	; 0x03
     91c:	26 e6       	ldi	r18, 0x66	; 102
     91e:	36 e6       	ldi	r19, 0x66	; 102
     920:	46 e6       	ldi	r20, 0x66	; 102
     922:	55 e4       	ldi	r21, 0x45	; 69
     924:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	f8 01       	movw	r30, r16
     92e:	80 83       	st	Z, r24
     930:	91 83       	std	Z+1, r25	; 0x01
     932:	a2 83       	std	Z+2, r26	; 0x02
     934:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     936:	fe 01       	movw	r30, r28
     938:	e5 5a       	subi	r30, 0xA5	; 165
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	60 81       	ld	r22, Z
     93e:	71 81       	ldd	r23, Z+1	; 0x01
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e8       	ldi	r20, 0x80	; 128
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     950:	88 23       	and	r24, r24
     952:	44 f4       	brge	.+16     	; 0x964 <lcd_set_4bit+0x224>
		__ticks = 1;
     954:	fe 01       	movw	r30, r28
     956:	e7 5a       	subi	r30, 0xA7	; 167
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	91 83       	std	Z+1, r25	; 0x01
     960:	80 83       	st	Z, r24
     962:	64 c0       	rjmp	.+200    	; 0xa2c <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     964:	fe 01       	movw	r30, r28
     966:	e5 5a       	subi	r30, 0xA5	; 165
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	60 81       	ld	r22, Z
     96c:	71 81       	ldd	r23, Z+1	; 0x01
     96e:	82 81       	ldd	r24, Z+2	; 0x02
     970:	93 81       	ldd	r25, Z+3	; 0x03
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	4f e7       	ldi	r20, 0x7F	; 127
     978:	57 e4       	ldi	r21, 0x47	; 71
     97a:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     97e:	18 16       	cp	r1, r24
     980:	0c f0       	brlt	.+2      	; 0x984 <lcd_set_4bit+0x244>
     982:	43 c0       	rjmp	.+134    	; 0xa0a <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     984:	fe 01       	movw	r30, r28
     986:	e1 5a       	subi	r30, 0xA1	; 161
     988:	ff 4f       	sbci	r31, 0xFF	; 255
     98a:	60 81       	ld	r22, Z
     98c:	71 81       	ldd	r23, Z+1	; 0x01
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	40 e2       	ldi	r20, 0x20	; 32
     998:	51 e4       	ldi	r21, 0x41	; 65
     99a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	8e 01       	movw	r16, r28
     9a4:	07 5a       	subi	r16, 0xA7	; 167
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	bc 01       	movw	r22, r24
     9aa:	cd 01       	movw	r24, r26
     9ac:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	f8 01       	movw	r30, r16
     9b6:	91 83       	std	Z+1, r25	; 0x01
     9b8:	80 83       	st	Z, r24
     9ba:	1f c0       	rjmp	.+62     	; 0x9fa <lcd_set_4bit+0x2ba>
     9bc:	fe 01       	movw	r30, r28
     9be:	e9 5a       	subi	r30, 0xA9	; 169
     9c0:	ff 4f       	sbci	r31, 0xFF	; 255
     9c2:	80 e7       	ldi	r24, 0x70	; 112
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	91 83       	std	Z+1, r25	; 0x01
     9c8:	80 83       	st	Z, r24
     9ca:	fe 01       	movw	r30, r28
     9cc:	e9 5a       	subi	r30, 0xA9	; 169
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <lcd_set_4bit+0x294>
     9d8:	fe 01       	movw	r30, r28
     9da:	e9 5a       	subi	r30, 0xA9	; 169
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e2:	de 01       	movw	r26, r28
     9e4:	a7 5a       	subi	r26, 0xA7	; 167
     9e6:	bf 4f       	sbci	r27, 0xFF	; 255
     9e8:	fe 01       	movw	r30, r28
     9ea:	e7 5a       	subi	r30, 0xA7	; 167
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	11 96       	adiw	r26, 0x01	; 1
     9f6:	9c 93       	st	X, r25
     9f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9fa:	fe 01       	movw	r30, r28
     9fc:	e7 5a       	subi	r30, 0xA7	; 167
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	00 97       	sbiw	r24, 0x00	; 0
     a06:	d1 f6       	brne	.-76     	; 0x9bc <lcd_set_4bit+0x27c>
     a08:	27 c0       	rjmp	.+78     	; 0xa58 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a0a:	8e 01       	movw	r16, r28
     a0c:	07 5a       	subi	r16, 0xA7	; 167
     a0e:	1f 4f       	sbci	r17, 0xFF	; 255
     a10:	fe 01       	movw	r30, r28
     a12:	e5 5a       	subi	r30, 0xA5	; 165
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	60 81       	ld	r22, Z
     a18:	71 81       	ldd	r23, Z+1	; 0x01
     a1a:	82 81       	ldd	r24, Z+2	; 0x02
     a1c:	93 81       	ldd	r25, Z+3	; 0x03
     a1e:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	f8 01       	movw	r30, r16
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	de 01       	movw	r26, r28
     a2e:	ab 5a       	subi	r26, 0xAB	; 171
     a30:	bf 4f       	sbci	r27, 0xFF	; 255
     a32:	fe 01       	movw	r30, r28
     a34:	e7 5a       	subi	r30, 0xA7	; 167
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	80 81       	ld	r24, Z
     a3a:	91 81       	ldd	r25, Z+1	; 0x01
     a3c:	8d 93       	st	X+, r24
     a3e:	9c 93       	st	X, r25
     a40:	fe 01       	movw	r30, r28
     a42:	eb 5a       	subi	r30, 0xAB	; 171
     a44:	ff 4f       	sbci	r31, 0xFF	; 255
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <lcd_set_4bit+0x30a>
     a4e:	fe 01       	movw	r30, r28
     a50:	eb 5a       	subi	r30, 0xAB	; 171
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a58:	a8 e2       	ldi	r26, 0x28	; 40
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e8 e2       	ldi	r30, 0x28	; 40
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8b 7f       	andi	r24, 0xFB	; 251
     a64:	8c 93       	st	X, r24
     a66:	fe 01       	movw	r30, r28
     a68:	ef 5a       	subi	r30, 0xAF	; 175
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e8       	ldi	r26, 0x80	; 128
     a72:	bf e3       	ldi	r27, 0x3F	; 63
     a74:	80 83       	st	Z, r24
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	a2 83       	std	Z+2, r26	; 0x02
     a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a7c:	8e 01       	movw	r16, r28
     a7e:	03 5b       	subi	r16, 0xB3	; 179
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	fe 01       	movw	r30, r28
     a84:	ef 5a       	subi	r30, 0xAF	; 175
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	60 81       	ld	r22, Z
     a8a:	71 81       	ldd	r23, Z+1	; 0x01
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	26 e6       	ldi	r18, 0x66	; 102
     a92:	36 e6       	ldi	r19, 0x66	; 102
     a94:	46 e6       	ldi	r20, 0x66	; 102
     a96:	55 e4       	ldi	r21, 0x45	; 69
     a98:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 83       	st	Z, r24
     aa4:	91 83       	std	Z+1, r25	; 0x01
     aa6:	a2 83       	std	Z+2, r26	; 0x02
     aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     aaa:	fe 01       	movw	r30, r28
     aac:	e3 5b       	subi	r30, 0xB3	; 179
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	60 81       	ld	r22, Z
     ab2:	71 81       	ldd	r23, Z+1	; 0x01
     ab4:	82 81       	ldd	r24, Z+2	; 0x02
     ab6:	93 81       	ldd	r25, Z+3	; 0x03
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5f e3       	ldi	r21, 0x3F	; 63
     ac0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     ac4:	88 23       	and	r24, r24
     ac6:	44 f4       	brge	.+16     	; 0xad8 <lcd_set_4bit+0x398>
		__ticks = 1;
     ac8:	fe 01       	movw	r30, r28
     aca:	e5 5b       	subi	r30, 0xB5	; 181
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	91 83       	std	Z+1, r25	; 0x01
     ad4:	80 83       	st	Z, r24
     ad6:	64 c0       	rjmp	.+200    	; 0xba0 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     ad8:	fe 01       	movw	r30, r28
     ada:	e3 5b       	subi	r30, 0xB3	; 179
     adc:	ff 4f       	sbci	r31, 0xFF	; 255
     ade:	60 81       	ld	r22, Z
     ae0:	71 81       	ldd	r23, Z+1	; 0x01
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	4f e7       	ldi	r20, 0x7F	; 127
     aec:	57 e4       	ldi	r21, 0x47	; 71
     aee:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     af2:	18 16       	cp	r1, r24
     af4:	0c f0       	brlt	.+2      	; 0xaf8 <lcd_set_4bit+0x3b8>
     af6:	43 c0       	rjmp	.+134    	; 0xb7e <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     af8:	fe 01       	movw	r30, r28
     afa:	ef 5a       	subi	r30, 0xAF	; 175
     afc:	ff 4f       	sbci	r31, 0xFF	; 255
     afe:	60 81       	ld	r22, Z
     b00:	71 81       	ldd	r23, Z+1	; 0x01
     b02:	82 81       	ldd	r24, Z+2	; 0x02
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	51 e4       	ldi	r21, 0x41	; 65
     b0e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	8e 01       	movw	r16, r28
     b18:	05 5b       	subi	r16, 0xB5	; 181
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	bc 01       	movw	r22, r24
     b1e:	cd 01       	movw	r24, r26
     b20:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	f8 01       	movw	r30, r16
     b2a:	91 83       	std	Z+1, r25	; 0x01
     b2c:	80 83       	st	Z, r24
     b2e:	1f c0       	rjmp	.+62     	; 0xb6e <lcd_set_4bit+0x42e>
     b30:	fe 01       	movw	r30, r28
     b32:	e7 5b       	subi	r30, 0xB7	; 183
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	80 e7       	ldi	r24, 0x70	; 112
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	80 83       	st	Z, r24
     b3e:	fe 01       	movw	r30, r28
     b40:	e7 5b       	subi	r30, 0xB7	; 183
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	80 81       	ld	r24, Z
     b46:	91 81       	ldd	r25, Z+1	; 0x01
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <lcd_set_4bit+0x408>
     b4c:	fe 01       	movw	r30, r28
     b4e:	e7 5b       	subi	r30, 0xB7	; 183
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b56:	de 01       	movw	r26, r28
     b58:	a5 5b       	subi	r26, 0xB5	; 181
     b5a:	bf 4f       	sbci	r27, 0xFF	; 255
     b5c:	fe 01       	movw	r30, r28
     b5e:	e5 5b       	subi	r30, 0xB5	; 181
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	11 96       	adiw	r26, 0x01	; 1
     b6a:	9c 93       	st	X, r25
     b6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	fe 01       	movw	r30, r28
     b70:	e5 5b       	subi	r30, 0xB5	; 181
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	80 81       	ld	r24, Z
     b76:	91 81       	ldd	r25, Z+1	; 0x01
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	d1 f6       	brne	.-76     	; 0xb30 <lcd_set_4bit+0x3f0>
     b7c:	27 c0       	rjmp	.+78     	; 0xbcc <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b7e:	8e 01       	movw	r16, r28
     b80:	05 5b       	subi	r16, 0xB5	; 181
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	fe 01       	movw	r30, r28
     b86:	e3 5b       	subi	r30, 0xB3	; 179
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	60 81       	ld	r22, Z
     b8c:	71 81       	ldd	r23, Z+1	; 0x01
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	93 81       	ldd	r25, Z+3	; 0x03
     b92:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
     ba0:	de 01       	movw	r26, r28
     ba2:	a9 5b       	subi	r26, 0xB9	; 185
     ba4:	bf 4f       	sbci	r27, 0xFF	; 255
     ba6:	fe 01       	movw	r30, r28
     ba8:	e5 5b       	subi	r30, 0xB5	; 181
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	8d 93       	st	X+, r24
     bb2:	9c 93       	st	X, r25
     bb4:	fe 01       	movw	r30, r28
     bb6:	e9 5b       	subi	r30, 0xB9	; 185
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <lcd_set_4bit+0x47e>
     bc2:	fe 01       	movw	r30, r28
     bc4:	e9 5b       	subi	r30, 0xB9	; 185
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     bcc:	a8 e2       	ldi	r26, 0x28	; 40
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e8 e2       	ldi	r30, 0x28	; 40
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     bda:	a8 e2       	ldi	r26, 0x28	; 40
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e8 e2       	ldi	r30, 0x28	; 40
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8d 7f       	andi	r24, 0xFD	; 253
     be6:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     be8:	e8 e2       	ldi	r30, 0x28	; 40
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 e3       	ldi	r24, 0x30	; 48
     bee:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     bf0:	a8 e2       	ldi	r26, 0x28	; 40
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e8 e2       	ldi	r30, 0x28	; 40
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	84 60       	ori	r24, 0x04	; 4
     bfc:	8c 93       	st	X, r24
     bfe:	fe 01       	movw	r30, r28
     c00:	ed 5b       	subi	r30, 0xBD	; 189
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a0 ea       	ldi	r26, 0xA0	; 160
     c0a:	b0 e4       	ldi	r27, 0x40	; 64
     c0c:	80 83       	st	Z, r24
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	a2 83       	std	Z+2, r26	; 0x02
     c12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c14:	8e 01       	movw	r16, r28
     c16:	01 5c       	subi	r16, 0xC1	; 193
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	fe 01       	movw	r30, r28
     c1c:	ed 5b       	subi	r30, 0xBD	; 189
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	60 81       	ld	r22, Z
     c22:	71 81       	ldd	r23, Z+1	; 0x01
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	26 e6       	ldi	r18, 0x66	; 102
     c2a:	36 e6       	ldi	r19, 0x66	; 102
     c2c:	46 e6       	ldi	r20, 0x66	; 102
     c2e:	55 e4       	ldi	r21, 0x45	; 69
     c30:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	f8 01       	movw	r30, r16
     c3a:	80 83       	st	Z, r24
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	a2 83       	std	Z+2, r26	; 0x02
     c40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c42:	fe 01       	movw	r30, r28
     c44:	ff 96       	adiw	r30, 0x3f	; 63
     c46:	60 81       	ld	r22, Z
     c48:	71 81       	ldd	r23, Z+1	; 0x01
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e8       	ldi	r20, 0x80	; 128
     c54:	5f e3       	ldi	r21, 0x3F	; 63
     c56:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     c5a:	88 23       	and	r24, r24
     c5c:	2c f4       	brge	.+10     	; 0xc68 <lcd_set_4bit+0x528>
		__ticks = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	9e af       	std	Y+62, r25	; 0x3e
     c64:	8d af       	std	Y+61, r24	; 0x3d
     c66:	46 c0       	rjmp	.+140    	; 0xcf4 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     c68:	fe 01       	movw	r30, r28
     c6a:	ff 96       	adiw	r30, 0x3f	; 63
     c6c:	60 81       	ld	r22, Z
     c6e:	71 81       	ldd	r23, Z+1	; 0x01
     c70:	82 81       	ldd	r24, Z+2	; 0x02
     c72:	93 81       	ldd	r25, Z+3	; 0x03
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	3f ef       	ldi	r19, 0xFF	; 255
     c78:	4f e7       	ldi	r20, 0x7F	; 127
     c7a:	57 e4       	ldi	r21, 0x47	; 71
     c7c:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     c80:	18 16       	cp	r1, r24
     c82:	64 f5       	brge	.+88     	; 0xcdc <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c84:	fe 01       	movw	r30, r28
     c86:	ed 5b       	subi	r30, 0xBD	; 189
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	9e af       	std	Y+62, r25	; 0x3e
     cb0:	8d af       	std	Y+61, r24	; 0x3d
     cb2:	0f c0       	rjmp	.+30     	; 0xcd2 <lcd_set_4bit+0x592>
     cb4:	80 e7       	ldi	r24, 0x70	; 112
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	9c af       	std	Y+60, r25	; 0x3c
     cba:	8b af       	std	Y+59, r24	; 0x3b
     cbc:	8b ad       	ldd	r24, Y+59	; 0x3b
     cbe:	9c ad       	ldd	r25, Y+60	; 0x3c
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <lcd_set_4bit+0x580>
     cc4:	9c af       	std	Y+60, r25	; 0x3c
     cc6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cc8:	8d ad       	ldd	r24, Y+61	; 0x3d
     cca:	9e ad       	ldd	r25, Y+62	; 0x3e
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	9e af       	std	Y+62, r25	; 0x3e
     cd0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd2:	8d ad       	ldd	r24, Y+61	; 0x3d
     cd4:	9e ad       	ldd	r25, Y+62	; 0x3e
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	69 f7       	brne	.-38     	; 0xcb4 <lcd_set_4bit+0x574>
     cda:	16 c0       	rjmp	.+44     	; 0xd08 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cdc:	fe 01       	movw	r30, r28
     cde:	ff 96       	adiw	r30, 0x3f	; 63
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	9e af       	std	Y+62, r25	; 0x3e
     cf2:	8d af       	std	Y+61, r24	; 0x3d
     cf4:	8d ad       	ldd	r24, Y+61	; 0x3d
     cf6:	9e ad       	ldd	r25, Y+62	; 0x3e
     cf8:	9a af       	std	Y+58, r25	; 0x3a
     cfa:	89 af       	std	Y+57, r24	; 0x39
     cfc:	89 ad       	ldd	r24, Y+57	; 0x39
     cfe:	9a ad       	ldd	r25, Y+58	; 0x3a
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <lcd_set_4bit+0x5c0>
     d04:	9a af       	std	Y+58, r25	; 0x3a
     d06:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d08:	a8 e2       	ldi	r26, 0x28	; 40
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e8 e2       	ldi	r30, 0x28	; 40
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	8c 93       	st	X, r24
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e8       	ldi	r26, 0x80	; 128
     d1c:	bf e3       	ldi	r27, 0x3F	; 63
     d1e:	8d ab       	std	Y+53, r24	; 0x35
     d20:	9e ab       	std	Y+54, r25	; 0x36
     d22:	af ab       	std	Y+55, r26	; 0x37
     d24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d26:	6d a9       	ldd	r22, Y+53	; 0x35
     d28:	7e a9       	ldd	r23, Y+54	; 0x36
     d2a:	8f a9       	ldd	r24, Y+55	; 0x37
     d2c:	98 ad       	ldd	r25, Y+56	; 0x38
     d2e:	26 e6       	ldi	r18, 0x66	; 102
     d30:	36 e6       	ldi	r19, 0x66	; 102
     d32:	46 e6       	ldi	r20, 0x66	; 102
     d34:	55 e4       	ldi	r21, 0x45	; 69
     d36:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	89 ab       	std	Y+49, r24	; 0x31
     d40:	9a ab       	std	Y+50, r25	; 0x32
     d42:	ab ab       	std	Y+51, r26	; 0x33
     d44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d46:	69 a9       	ldd	r22, Y+49	; 0x31
     d48:	7a a9       	ldd	r23, Y+50	; 0x32
     d4a:	8b a9       	ldd	r24, Y+51	; 0x33
     d4c:	9c a9       	ldd	r25, Y+52	; 0x34
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	2c f4       	brge	.+10     	; 0xd68 <lcd_set_4bit+0x628>
		__ticks = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	98 ab       	std	Y+48, r25	; 0x30
     d64:	8f a7       	std	Y+47, r24	; 0x2f
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     d68:	69 a9       	ldd	r22, Y+49	; 0x31
     d6a:	7a a9       	ldd	r23, Y+50	; 0x32
     d6c:	8b a9       	ldd	r24, Y+51	; 0x33
     d6e:	9c a9       	ldd	r25, Y+52	; 0x34
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3f ef       	ldi	r19, 0xFF	; 255
     d74:	4f e7       	ldi	r20, 0x7F	; 127
     d76:	57 e4       	ldi	r21, 0x47	; 71
     d78:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	4c f5       	brge	.+82     	; 0xdd2 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	6d a9       	ldd	r22, Y+53	; 0x35
     d82:	7e a9       	ldd	r23, Y+54	; 0x36
     d84:	8f a9       	ldd	r24, Y+55	; 0x37
     d86:	98 ad       	ldd	r25, Y+56	; 0x38
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	98 ab       	std	Y+48, r25	; 0x30
     da6:	8f a7       	std	Y+47, r24	; 0x2f
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <lcd_set_4bit+0x688>
     daa:	80 e7       	ldi	r24, 0x70	; 112
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	9e a7       	std	Y+46, r25	; 0x2e
     db0:	8d a7       	std	Y+45, r24	; 0x2d
     db2:	8d a5       	ldd	r24, Y+45	; 0x2d
     db4:	9e a5       	ldd	r25, Y+46	; 0x2e
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <lcd_set_4bit+0x676>
     dba:	9e a7       	std	Y+46, r25	; 0x2e
     dbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc0:	98 a9       	ldd	r25, Y+48	; 0x30
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	98 ab       	std	Y+48, r25	; 0x30
     dc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dca:	98 a9       	ldd	r25, Y+48	; 0x30
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f7       	brne	.-38     	; 0xdaa <lcd_set_4bit+0x66a>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	69 a9       	ldd	r22, Y+49	; 0x31
     dd4:	7a a9       	ldd	r23, Y+50	; 0x32
     dd6:	8b a9       	ldd	r24, Y+51	; 0x33
     dd8:	9c a9       	ldd	r25, Y+52	; 0x34
     dda:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	98 ab       	std	Y+48, r25	; 0x30
     de4:	8f a7       	std	Y+47, r24	; 0x2f
     de6:	8f a5       	ldd	r24, Y+47	; 0x2f
     de8:	98 a9       	ldd	r25, Y+48	; 0x30
     dea:	9c a7       	std	Y+44, r25	; 0x2c
     dec:	8b a7       	std	Y+43, r24	; 0x2b
     dee:	8b a5       	ldd	r24, Y+43	; 0x2b
     df0:	9c a5       	ldd	r25, Y+44	; 0x2c
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <lcd_set_4bit+0x6b2>
     df6:	9c a7       	std	Y+44, r25	; 0x2c
     df8:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     dfa:	a8 e2       	ldi	r26, 0x28	; 40
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e2       	ldi	r30, 0x28	; 40
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8e 7f       	andi	r24, 0xFE	; 254
     e06:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     e08:	a8 e2       	ldi	r26, 0x28	; 40
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e2       	ldi	r30, 0x28	; 40
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     e16:	e8 e2       	ldi	r30, 0x28	; 40
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 e3       	ldi	r24, 0x30	; 48
     e1c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8c 93       	st	X, r24
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a0 ea       	ldi	r26, 0xA0	; 160
     e32:	b0 e4       	ldi	r27, 0x40	; 64
     e34:	8f a3       	std	Y+39, r24	; 0x27
     e36:	98 a7       	std	Y+40, r25	; 0x28
     e38:	a9 a7       	std	Y+41, r26	; 0x29
     e3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3c:	6f a1       	ldd	r22, Y+39	; 0x27
     e3e:	78 a5       	ldd	r23, Y+40	; 0x28
     e40:	89 a5       	ldd	r24, Y+41	; 0x29
     e42:	9a a5       	ldd	r25, Y+42	; 0x2a
     e44:	26 e6       	ldi	r18, 0x66	; 102
     e46:	36 e6       	ldi	r19, 0x66	; 102
     e48:	46 e6       	ldi	r20, 0x66	; 102
     e4a:	55 e4       	ldi	r21, 0x45	; 69
     e4c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	8b a3       	std	Y+35, r24	; 0x23
     e56:	9c a3       	std	Y+36, r25	; 0x24
     e58:	ad a3       	std	Y+37, r26	; 0x25
     e5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e5c:	6b a1       	ldd	r22, Y+35	; 0x23
     e5e:	7c a1       	ldd	r23, Y+36	; 0x24
     e60:	8d a1       	ldd	r24, Y+37	; 0x25
     e62:	9e a1       	ldd	r25, Y+38	; 0x26
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5f e3       	ldi	r21, 0x3F	; 63
     e6c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     e70:	88 23       	and	r24, r24
     e72:	2c f4       	brge	.+10     	; 0xe7e <lcd_set_4bit+0x73e>
		__ticks = 1;
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9a a3       	std	Y+34, r25	; 0x22
     e7a:	89 a3       	std	Y+33, r24	; 0x21
     e7c:	3f c0       	rjmp	.+126    	; 0xefc <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     e7e:	6b a1       	ldd	r22, Y+35	; 0x23
     e80:	7c a1       	ldd	r23, Y+36	; 0x24
     e82:	8d a1       	ldd	r24, Y+37	; 0x25
     e84:	9e a1       	ldd	r25, Y+38	; 0x26
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	3f ef       	ldi	r19, 0xFF	; 255
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	57 e4       	ldi	r21, 0x47	; 71
     e8e:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     e92:	18 16       	cp	r1, r24
     e94:	4c f5       	brge	.+82     	; 0xee8 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e96:	6f a1       	ldd	r22, Y+39	; 0x27
     e98:	78 a5       	ldd	r23, Y+40	; 0x28
     e9a:	89 a5       	ldd	r24, Y+41	; 0x29
     e9c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e2       	ldi	r20, 0x20	; 32
     ea4:	51 e4       	ldi	r21, 0x41	; 65
     ea6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9a a3       	std	Y+34, r25	; 0x22
     ebc:	89 a3       	std	Y+33, r24	; 0x21
     ebe:	0f c0       	rjmp	.+30     	; 0xede <lcd_set_4bit+0x79e>
     ec0:	80 e7       	ldi	r24, 0x70	; 112
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	98 a3       	std	Y+32, r25	; 0x20
     ec6:	8f 8f       	std	Y+31, r24	; 0x1f
     ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eca:	98 a1       	ldd	r25, Y+32	; 0x20
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <lcd_set_4bit+0x78c>
     ed0:	98 a3       	std	Y+32, r25	; 0x20
     ed2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed4:	89 a1       	ldd	r24, Y+33	; 0x21
     ed6:	9a a1       	ldd	r25, Y+34	; 0x22
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	9a a3       	std	Y+34, r25	; 0x22
     edc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	9a a1       	ldd	r25, Y+34	; 0x22
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	69 f7       	brne	.-38     	; 0xec0 <lcd_set_4bit+0x780>
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee8:	6b a1       	ldd	r22, Y+35	; 0x23
     eea:	7c a1       	ldd	r23, Y+36	; 0x24
     eec:	8d a1       	ldd	r24, Y+37	; 0x25
     eee:	9e a1       	ldd	r25, Y+38	; 0x26
     ef0:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9a a3       	std	Y+34, r25	; 0x22
     efa:	89 a3       	std	Y+33, r24	; 0x21
     efc:	89 a1       	ldd	r24, Y+33	; 0x21
     efe:	9a a1       	ldd	r25, Y+34	; 0x22
     f00:	9e 8f       	std	Y+30, r25	; 0x1e
     f02:	8d 8f       	std	Y+29, r24	; 0x1d
     f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <lcd_set_4bit+0x7c8>
     f0c:	9e 8f       	std	Y+30, r25	; 0x1e
     f0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     f10:	a8 e2       	ldi	r26, 0x28	; 40
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e2       	ldi	r30, 0x28	; 40
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	8c 93       	st	X, r24
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a0 e8       	ldi	r26, 0x80	; 128
     f24:	bf e3       	ldi	r27, 0x3F	; 63
     f26:	89 8f       	std	Y+25, r24	; 0x19
     f28:	9a 8f       	std	Y+26, r25	; 0x1a
     f2a:	ab 8f       	std	Y+27, r26	; 0x1b
     f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2e:	69 8d       	ldd	r22, Y+25	; 0x19
     f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f36:	26 e6       	ldi	r18, 0x66	; 102
     f38:	36 e6       	ldi	r19, 0x66	; 102
     f3a:	46 e6       	ldi	r20, 0x66	; 102
     f3c:	55 e4       	ldi	r21, 0x45	; 69
     f3e:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	8d 8b       	std	Y+21, r24	; 0x15
     f48:	9e 8b       	std	Y+22, r25	; 0x16
     f4a:	af 8b       	std	Y+23, r26	; 0x17
     f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f4e:	6d 89       	ldd	r22, Y+21	; 0x15
     f50:	7e 89       	ldd	r23, Y+22	; 0x16
     f52:	8f 89       	ldd	r24, Y+23	; 0x17
     f54:	98 8d       	ldd	r25, Y+24	; 0x18
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
     f62:	88 23       	and	r24, r24
     f64:	2c f4       	brge	.+10     	; 0xf70 <lcd_set_4bit+0x830>
		__ticks = 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 8b       	std	Y+20, r25	; 0x14
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
     f6e:	3f c0       	rjmp	.+126    	; 0xfee <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     f70:	6d 89       	ldd	r22, Y+21	; 0x15
     f72:	7e 89       	ldd	r23, Y+22	; 0x16
     f74:	8f 89       	ldd	r24, Y+23	; 0x17
     f76:	98 8d       	ldd	r25, Y+24	; 0x18
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	57 e4       	ldi	r21, 0x47	; 71
     f80:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
     f84:	18 16       	cp	r1, r24
     f86:	4c f5       	brge	.+82     	; 0xfda <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f88:	69 8d       	ldd	r22, Y+25	; 0x19
     f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e2       	ldi	r20, 0x20	; 32
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	bc 01       	movw	r22, r24
     fa2:	cd 01       	movw	r24, r26
     fa4:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9c 8b       	std	Y+20, r25	; 0x14
     fae:	8b 8b       	std	Y+19, r24	; 0x13
     fb0:	0f c0       	rjmp	.+30     	; 0xfd0 <lcd_set_4bit+0x890>
     fb2:	80 e7       	ldi	r24, 0x70	; 112
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	9a 8b       	std	Y+18, r25	; 0x12
     fb8:	89 8b       	std	Y+17, r24	; 0x11
     fba:	89 89       	ldd	r24, Y+17	; 0x11
     fbc:	9a 89       	ldd	r25, Y+18	; 0x12
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <lcd_set_4bit+0x87e>
     fc2:	9a 8b       	std	Y+18, r25	; 0x12
     fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc6:	8b 89       	ldd	r24, Y+19	; 0x13
     fc8:	9c 89       	ldd	r25, Y+20	; 0x14
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd0:	8b 89       	ldd	r24, Y+19	; 0x13
     fd2:	9c 89       	ldd	r25, Y+20	; 0x14
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	69 f7       	brne	.-38     	; 0xfb2 <lcd_set_4bit+0x872>
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	9c 8b       	std	Y+20, r25	; 0x14
     fec:	8b 8b       	std	Y+19, r24	; 0x13
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	98 8b       	std	Y+16, r25	; 0x10
     ff4:	8f 87       	std	Y+15, r24	; 0x0f
     ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff8:	98 89       	ldd	r25, Y+16	; 0x10
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	f1 f7       	brne	.-4      	; 0xffa <lcd_set_4bit+0x8ba>
     ffe:	98 8b       	std	Y+16, r25	; 0x10
    1000:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
    1002:	a8 e2       	ldi	r26, 0x28	; 40
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 e2       	ldi	r30, 0x28	; 40
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
    1010:	a8 e2       	ldi	r26, 0x28	; 40
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e8 e2       	ldi	r30, 0x28	; 40
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8d 7f       	andi	r24, 0xFD	; 253
    101c:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
    101e:	e8 e2       	ldi	r30, 0x28	; 40
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
    1026:	a8 e2       	ldi	r26, 0x28	; 40
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e2       	ldi	r30, 0x28	; 40
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	84 60       	ori	r24, 0x04	; 4
    1032:	8c 93       	st	X, r24
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 ea       	ldi	r26, 0xA0	; 160
    103a:	b0 e4       	ldi	r27, 0x40	; 64
    103c:	8b 87       	std	Y+11, r24	; 0x0b
    103e:	9c 87       	std	Y+12, r25	; 0x0c
    1040:	ad 87       	std	Y+13, r26	; 0x0d
    1042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1044:	6b 85       	ldd	r22, Y+11	; 0x0b
    1046:	7c 85       	ldd	r23, Y+12	; 0x0c
    1048:	8d 85       	ldd	r24, Y+13	; 0x0d
    104a:	9e 85       	ldd	r25, Y+14	; 0x0e
    104c:	26 e6       	ldi	r18, 0x66	; 102
    104e:	36 e6       	ldi	r19, 0x66	; 102
    1050:	46 e6       	ldi	r20, 0x66	; 102
    1052:	55 e4       	ldi	r21, 0x45	; 69
    1054:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	8f 83       	std	Y+7, r24	; 0x07
    105e:	98 87       	std	Y+8, r25	; 0x08
    1060:	a9 87       	std	Y+9, r26	; 0x09
    1062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1064:	6f 81       	ldd	r22, Y+7	; 0x07
    1066:	78 85       	ldd	r23, Y+8	; 0x08
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	9a 85       	ldd	r25, Y+10	; 0x0a
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    1078:	88 23       	and	r24, r24
    107a:	2c f4       	brge	.+10     	; 0x1086 <lcd_set_4bit+0x946>
		__ticks = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
    1084:	3f c0       	rjmp	.+126    	; 0x1104 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	3f ef       	ldi	r19, 0xFF	; 255
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	57 e4       	ldi	r21, 0x47	; 71
    1096:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	4c f5       	brge	.+82     	; 0x10f0 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    109e:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e2       	ldi	r20, 0x20	; 32
    10ac:	51 e4       	ldi	r21, 0x41	; 65
    10ae:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	0f c0       	rjmp	.+30     	; 0x10e6 <lcd_set_4bit+0x9a6>
    10c8:	80 e7       	ldi	r24, 0x70	; 112
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	8b 83       	std	Y+3, r24	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <lcd_set_4bit+0x994>
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	69 f7       	brne	.-38     	; 0x10c8 <lcd_set_4bit+0x988>
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <lcd_set_4bit+0x9d0>
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1118:	a8 e2       	ldi	r26, 0x28	; 40
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e2       	ldi	r30, 0x28	; 40
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8b 7f       	andi	r24, 0xFB	; 251
    1124:	8c 93       	st	X, r24

	
}
    1126:	c0 59       	subi	r28, 0x90	; 144
    1128:	df 4f       	sbci	r29, 0xFF	; 255
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	2e 97       	sbiw	r28, 0x0e	; 14
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e8       	ldi	r26, 0x80	; 128
    1158:	bf e3       	ldi	r27, 0x3F	; 63
    115a:	8b 87       	std	Y+11, r24	; 0x0b
    115c:	9c 87       	std	Y+12, r25	; 0x0c
    115e:	ad 87       	std	Y+13, r26	; 0x0d
    1160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	6b 85       	ldd	r22, Y+11	; 0x0b
    1164:	7c 85       	ldd	r23, Y+12	; 0x0c
    1166:	8d 85       	ldd	r24, Y+13	; 0x0d
    1168:	9e 85       	ldd	r25, Y+14	; 0x0e
    116a:	26 e6       	ldi	r18, 0x66	; 102
    116c:	36 e6       	ldi	r19, 0x66	; 102
    116e:	46 e6       	ldi	r20, 0x66	; 102
    1170:	55 e4       	ldi	r21, 0x45	; 69
    1172:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8f 83       	std	Y+7, r24	; 0x07
    117c:	98 87       	std	Y+8, r25	; 0x08
    117e:	a9 87       	std	Y+9, r26	; 0x09
    1180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    1196:	88 23       	and	r24, r24
    1198:	2c f4       	brge	.+10     	; 0x11a4 <lcd_init+0x66>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	3f c0       	rjmp	.+126    	; 0x1222 <lcd_init+0xe4>
	else if (__tmp > 65535)
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	3f ef       	ldi	r19, 0xFF	; 255
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	57 e4       	ldi	r21, 0x47	; 71
    11b4:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    11b8:	18 16       	cp	r1, r24
    11ba:	4c f5       	brge	.+82     	; 0x120e <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11be:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e2       	ldi	r20, 0x20	; 32
    11ca:	51 e4       	ldi	r21, 0x41	; 65
    11cc:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <lcd_init+0xc6>
    11e6:	80 e7       	ldi	r24, 0x70	; 112
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	9c 81       	ldd	r25, Y+4	; 0x04
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <lcd_init+0xb4>
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	69 f7       	brne	.-38     	; 0x11e6 <lcd_init+0xa8>
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e 83       	std	Y+6, r25	; 0x06
    1220:	8d 83       	std	Y+5, r24	; 0x05
    1222:	8d 81       	ldd	r24, Y+5	; 0x05
    1224:	9e 81       	ldd	r25, Y+6	; 0x06
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	9a 81       	ldd	r25, Y+2	; 0x02
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <lcd_init+0xf0>
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    1236:	88 e2       	ldi	r24, 0x28	; 40
    1238:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
	lcd_wr_command(0x01);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
	lcd_wr_command(0x06);
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
	lcd_wr_command(0x0E);
    1248:	8e e0       	ldi	r24, 0x0E	; 14
    124a:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
	lcd_wr_command(0x80);
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
		
}
    1254:	2e 96       	adiw	r28, 0x0e	; 14
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	6e 97       	sbiw	r28, 0x1e	; 30
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    127c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    127e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1280:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1282:	80 7f       	andi	r24, 0xF0	; 240
    1284:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1286:	a8 e2       	ldi	r26, 0x28	; 40
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e8 e2       	ldi	r30, 0x28	; 40
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 70       	andi	r24, 0x0F	; 15
    1292:	8c 93       	st	X, r24
	lcd_port |= temp;
    1294:	a8 e2       	ldi	r26, 0x28	; 40
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e2       	ldi	r30, 0x28	; 40
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	90 81       	ld	r25, Z
    129e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a0:	89 2b       	or	r24, r25
    12a2:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    12a4:	a8 e2       	ldi	r26, 0x28	; 40
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e2       	ldi	r30, 0x28	; 40
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8e 7f       	andi	r24, 0xFE	; 254
    12b0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    12b2:	a8 e2       	ldi	r26, 0x28	; 40
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e8 e2       	ldi	r30, 0x28	; 40
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    12c0:	a8 e2       	ldi	r26, 0x28	; 40
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e8 e2       	ldi	r30, 0x28	; 40
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	84 60       	ori	r24, 0x04	; 4
    12cc:	8c 93       	st	X, r24
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 ea       	ldi	r26, 0xA0	; 160
    12d4:	b0 e4       	ldi	r27, 0x40	; 64
    12d6:	89 8f       	std	Y+25, r24	; 0x19
    12d8:	9a 8f       	std	Y+26, r25	; 0x1a
    12da:	ab 8f       	std	Y+27, r26	; 0x1b
    12dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	69 8d       	ldd	r22, Y+25	; 0x19
    12e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e6:	26 e6       	ldi	r18, 0x66	; 102
    12e8:	36 e6       	ldi	r19, 0x66	; 102
    12ea:	46 e6       	ldi	r20, 0x66	; 102
    12ec:	55 e4       	ldi	r21, 0x45	; 69
    12ee:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8d 8b       	std	Y+21, r24	; 0x15
    12f8:	9e 8b       	std	Y+22, r25	; 0x16
    12fa:	af 8b       	std	Y+23, r26	; 0x17
    12fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <lcd_wr_command+0xba>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
    131e:	3f c0       	rjmp	.+126    	; 0x139e <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	69 8d       	ldd	r22, Y+25	; 0x19
    133a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <lcd_wr_command+0x11a>
    1362:	80 e7       	ldi	r24, 0x70	; 112
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	9a 8b       	std	Y+18, r25	; 0x12
    1368:	89 8b       	std	Y+17, r24	; 0x11
    136a:	89 89       	ldd	r24, Y+17	; 0x11
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <lcd_wr_command+0x108>
    1372:	9a 8b       	std	Y+18, r25	; 0x12
    1374:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	9c 89       	ldd	r25, Y+20	; 0x14
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9c 8b       	std	Y+20, r25	; 0x14
    137e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <lcd_wr_command+0xfc>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6d 89       	ldd	r22, Y+21	; 0x15
    138c:	7e 89       	ldd	r23, Y+22	; 0x16
    138e:	8f 89       	ldd	r24, Y+23	; 0x17
    1390:	98 8d       	ldd	r25, Y+24	; 0x18
    1392:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9c 8b       	std	Y+20, r25	; 0x14
    139c:	8b 8b       	std	Y+19, r24	; 0x13
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	98 8b       	std	Y+16, r25	; 0x10
    13a4:	8f 87       	std	Y+15, r24	; 0x0f
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	98 89       	ldd	r25, Y+16	; 0x10
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <lcd_wr_command+0x144>
    13ae:	98 8b       	std	Y+16, r25	; 0x10
    13b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    13b2:	a8 e2       	ldi	r26, 0x28	; 40
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e2       	ldi	r30, 0x28	; 40
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8b 7f       	andi	r24, 0xFB	; 251
    13be:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    13c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c2:	8f 70       	andi	r24, 0x0F	; 15
    13c4:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    13c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c8:	82 95       	swap	r24
    13ca:	80 7f       	andi	r24, 0xF0	; 240
    13cc:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    13ce:	a8 e2       	ldi	r26, 0x28	; 40
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e8 e2       	ldi	r30, 0x28	; 40
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	8f 70       	andi	r24, 0x0F	; 15
    13da:	8c 93       	st	X, r24
	lcd_port |= cmd;
    13dc:	a8 e2       	ldi	r26, 0x28	; 40
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e2       	ldi	r30, 0x28	; 40
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	90 81       	ld	r25, Z
    13e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e8:	89 2b       	or	r24, r25
    13ea:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    13ec:	a8 e2       	ldi	r26, 0x28	; 40
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e8 e2       	ldi	r30, 0x28	; 40
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    13fa:	a8 e2       	ldi	r26, 0x28	; 40
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e8 e2       	ldi	r30, 0x28	; 40
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1408:	a8 e2       	ldi	r26, 0x28	; 40
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e2       	ldi	r30, 0x28	; 40
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	8c 93       	st	X, r24
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	a0 ea       	ldi	r26, 0xA0	; 160
    141c:	b0 e4       	ldi	r27, 0x40	; 64
    141e:	8b 87       	std	Y+11, r24	; 0x0b
    1420:	9c 87       	std	Y+12, r25	; 0x0c
    1422:	ad 87       	std	Y+13, r26	; 0x0d
    1424:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1426:	6b 85       	ldd	r22, Y+11	; 0x0b
    1428:	7c 85       	ldd	r23, Y+12	; 0x0c
    142a:	8d 85       	ldd	r24, Y+13	; 0x0d
    142c:	9e 85       	ldd	r25, Y+14	; 0x0e
    142e:	26 e6       	ldi	r18, 0x66	; 102
    1430:	36 e6       	ldi	r19, 0x66	; 102
    1432:	46 e6       	ldi	r20, 0x66	; 102
    1434:	55 e4       	ldi	r21, 0x45	; 69
    1436:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	8f 83       	std	Y+7, r24	; 0x07
    1440:	98 87       	std	Y+8, r25	; 0x08
    1442:	a9 87       	std	Y+9, r26	; 0x09
    1444:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1446:	6f 81       	ldd	r22, Y+7	; 0x07
    1448:	78 85       	ldd	r23, Y+8	; 0x08
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e8       	ldi	r20, 0x80	; 128
    1454:	5f e3       	ldi	r21, 0x3F	; 63
    1456:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    145a:	88 23       	and	r24, r24
    145c:	2c f4       	brge	.+10     	; 0x1468 <lcd_wr_command+0x202>
		__ticks = 1;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	3f c0       	rjmp	.+126    	; 0x14e6 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    1468:	6f 81       	ldd	r22, Y+7	; 0x07
    146a:	78 85       	ldd	r23, Y+8	; 0x08
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    147c:	18 16       	cp	r1, r24
    147e:	4c f5       	brge	.+82     	; 0x14d2 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1480:	6b 85       	ldd	r22, Y+11	; 0x0b
    1482:	7c 85       	ldd	r23, Y+12	; 0x0c
    1484:	8d 85       	ldd	r24, Y+13	; 0x0d
    1486:	9e 85       	ldd	r25, Y+14	; 0x0e
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e2       	ldi	r20, 0x20	; 32
    148e:	51 e4       	ldi	r21, 0x41	; 65
    1490:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <lcd_wr_command+0x262>
    14aa:	80 e7       	ldi	r24, 0x70	; 112
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <lcd_wr_command+0x250>
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	69 f7       	brne	.-38     	; 0x14aa <lcd_wr_command+0x244>
    14d0:	14 c0       	rjmp	.+40     	; 0x14fa <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d2:	6f 81       	ldd	r22, Y+7	; 0x07
    14d4:	78 85       	ldd	r23, Y+8	; 0x08
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	9a 81       	ldd	r25, Y+2	; 0x02
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <lcd_wr_command+0x28c>
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    14fa:	a8 e2       	ldi	r26, 0x28	; 40
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e2       	ldi	r30, 0x28	; 40
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8b 7f       	andi	r24, 0xFB	; 251
    1506:	8c 93       	st	X, r24
}
    1508:	6e 96       	adiw	r28, 0x1e	; 30
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	6e 97       	sbiw	r28, 0x1e	; 30
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    1530:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1532:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    1534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1536:	80 7f       	andi	r24, 0xF0	; 240
    1538:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    153a:	a8 e2       	ldi	r26, 0x28	; 40
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e8 e2       	ldi	r30, 0x28	; 40
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8f 70       	andi	r24, 0x0F	; 15
    1546:	8c 93       	st	X, r24
	lcd_port |= temp;
    1548:	a8 e2       	ldi	r26, 0x28	; 40
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e2       	ldi	r30, 0x28	; 40
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	90 81       	ld	r25, Z
    1552:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1554:	89 2b       	or	r24, r25
    1556:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1558:	a8 e2       	ldi	r26, 0x28	; 40
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e8 e2       	ldi	r30, 0x28	; 40
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1566:	a8 e2       	ldi	r26, 0x28	; 40
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 e2       	ldi	r30, 0x28	; 40
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8d 7f       	andi	r24, 0xFD	; 253
    1572:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1574:	a8 e2       	ldi	r26, 0x28	; 40
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e8 e2       	ldi	r30, 0x28	; 40
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	8c 93       	st	X, r24
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 ea       	ldi	r26, 0xA0	; 160
    1588:	b0 e4       	ldi	r27, 0x40	; 64
    158a:	89 8f       	std	Y+25, r24	; 0x19
    158c:	9a 8f       	std	Y+26, r25	; 0x1a
    158e:	ab 8f       	std	Y+27, r26	; 0x1b
    1590:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	69 8d       	ldd	r22, Y+25	; 0x19
    1594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159a:	26 e6       	ldi	r18, 0x66	; 102
    159c:	36 e6       	ldi	r19, 0x66	; 102
    159e:	46 e6       	ldi	r20, 0x66	; 102
    15a0:	55 e4       	ldi	r21, 0x45	; 69
    15a2:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8d 8b       	std	Y+21, r24	; 0x15
    15ac:	9e 8b       	std	Y+22, r25	; 0x16
    15ae:	af 8b       	std	Y+23, r26	; 0x17
    15b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15b2:	6d 89       	ldd	r22, Y+21	; 0x15
    15b4:	7e 89       	ldd	r23, Y+22	; 0x16
    15b6:	8f 89       	ldd	r24, Y+23	; 0x17
    15b8:	98 8d       	ldd	r25, Y+24	; 0x18
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <lcd_wr_char+0xba>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 8b       	std	Y+20, r25	; 0x14
    15d0:	8b 8b       	std	Y+19, r24	; 0x13
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    15d4:	6d 89       	ldd	r22, Y+21	; 0x15
    15d6:	7e 89       	ldd	r23, Y+22	; 0x16
    15d8:	8f 89       	ldd	r24, Y+23	; 0x17
    15da:	98 8d       	ldd	r25, Y+24	; 0x18
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	69 8d       	ldd	r22, Y+25	; 0x19
    15ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9c 8b       	std	Y+20, r25	; 0x14
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <lcd_wr_char+0x11a>
    1616:	80 e7       	ldi	r24, 0x70	; 112
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	9a 8b       	std	Y+18, r25	; 0x12
    161c:	89 8b       	std	Y+17, r24	; 0x11
    161e:	89 89       	ldd	r24, Y+17	; 0x11
    1620:	9a 89       	ldd	r25, Y+18	; 0x12
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <lcd_wr_char+0x108>
    1626:	9a 8b       	std	Y+18, r25	; 0x12
    1628:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9c 8b       	std	Y+20, r25	; 0x14
    1632:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8b 89       	ldd	r24, Y+19	; 0x13
    1636:	9c 89       	ldd	r25, Y+20	; 0x14
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <lcd_wr_char+0xfc>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6d 89       	ldd	r22, Y+21	; 0x15
    1640:	7e 89       	ldd	r23, Y+22	; 0x16
    1642:	8f 89       	ldd	r24, Y+23	; 0x17
    1644:	98 8d       	ldd	r25, Y+24	; 0x18
    1646:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c 8b       	std	Y+20, r25	; 0x14
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	8b 89       	ldd	r24, Y+19	; 0x13
    1654:	9c 89       	ldd	r25, Y+20	; 0x14
    1656:	98 8b       	std	Y+16, r25	; 0x10
    1658:	8f 87       	std	Y+15, r24	; 0x0f
    165a:	8f 85       	ldd	r24, Y+15	; 0x0f
    165c:	98 89       	ldd	r25, Y+16	; 0x10
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <lcd_wr_char+0x144>
    1662:	98 8b       	std	Y+16, r25	; 0x10
    1664:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1666:	a8 e2       	ldi	r26, 0x28	; 40
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e2       	ldi	r30, 0x28	; 40
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8b 7f       	andi	r24, 0xFB	; 251
    1672:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    1674:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1676:	8f 70       	andi	r24, 0x0F	; 15
    1678:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    167a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    167c:	82 95       	swap	r24
    167e:	80 7f       	andi	r24, 0xF0	; 240
    1680:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1682:	a8 e2       	ldi	r26, 0x28	; 40
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e2       	ldi	r30, 0x28	; 40
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8f 70       	andi	r24, 0x0F	; 15
    168e:	8c 93       	st	X, r24
	lcd_port |= letter;
    1690:	a8 e2       	ldi	r26, 0x28	; 40
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e2       	ldi	r30, 0x28	; 40
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	90 81       	ld	r25, Z
    169a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    169c:	89 2b       	or	r24, r25
    169e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    16a0:	a8 e2       	ldi	r26, 0x28	; 40
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e8 e2       	ldi	r30, 0x28	; 40
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    16ae:	a8 e2       	ldi	r26, 0x28	; 40
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e2       	ldi	r30, 0x28	; 40
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8d 7f       	andi	r24, 0xFD	; 253
    16ba:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    16bc:	a8 e2       	ldi	r26, 0x28	; 40
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e8 e2       	ldi	r30, 0x28	; 40
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	84 60       	ori	r24, 0x04	; 4
    16c8:	8c 93       	st	X, r24
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 ea       	ldi	r26, 0xA0	; 160
    16d0:	b0 e4       	ldi	r27, 0x40	; 64
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	9c 87       	std	Y+12, r25	; 0x0c
    16d6:	ad 87       	std	Y+13, r26	; 0x0d
    16d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6b 85       	ldd	r22, Y+11	; 0x0b
    16dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	26 e6       	ldi	r18, 0x66	; 102
    16e4:	36 e6       	ldi	r19, 0x66	; 102
    16e6:	46 e6       	ldi	r20, 0x66	; 102
    16e8:	55 e4       	ldi	r21, 0x45	; 69
    16ea:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	98 87       	std	Y+8, r25	; 0x08
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <lcd_wr_char+0x202>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	3f c0       	rjmp	.+126    	; 0x179a <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	0f c0       	rjmp	.+30     	; 0x177c <lcd_wr_char+0x262>
    175e:	80 e7       	ldi	r24, 0x70	; 112
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <lcd_wr_char+0x250>
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <lcd_wr_char+0x244>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <lcd_wr_char+0x28c>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    17ae:	a8 e2       	ldi	r26, 0x28	; 40
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e8 e2       	ldi	r30, 0x28	; 40
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8b 7f       	andi	r24, 0xFB	; 251
    17ba:	8c 93       	st	X, r24
}
    17bc:	6e 96       	adiw	r28, 0x1e	; 30
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <lcd_home>:


void lcd_home()
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    17d6:	80 e8       	ldi	r24, 0x80	; 128
    17d8:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
}
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	0f 92       	push	r0
    17e8:	0f 92       	push	r0
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    17f4:	e9 81       	ldd	r30, Y+1	; 0x01
    17f6:	fa 81       	ldd	r31, Y+2	; 0x02
    17f8:	80 81       	ld	r24, Z
    17fa:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
		str++;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1808:	e9 81       	ldd	r30, Y+1	; 0x01
    180a:	fa 81       	ldd	r31, Y+2	; 0x02
    180c:	80 81       	ld	r24, Z
    180e:	88 23       	and	r24, r24
    1810:	89 f7       	brne	.-30     	; 0x17f4 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <lcd_cursor+0x6>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 83       	std	Y+4, r19	; 0x04
    1834:	2b 83       	std	Y+3, r18	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	91 05       	cpc	r25, r1
    183e:	d9 f0       	breq	.+54     	; 0x1876 <lcd_cursor+0x5a>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	23 30       	cpi	r18, 0x03	; 3
    1846:	31 05       	cpc	r19, r1
    1848:	34 f4       	brge	.+12     	; 0x1856 <lcd_cursor+0x3a>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	61 f0       	breq	.+24     	; 0x186c <lcd_cursor+0x50>
    1854:	1e c0       	rjmp	.+60     	; 0x1892 <lcd_cursor+0x76>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	23 30       	cpi	r18, 0x03	; 3
    185c:	31 05       	cpc	r19, r1
    185e:	81 f0       	breq	.+32     	; 0x1880 <lcd_cursor+0x64>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	84 30       	cpi	r24, 0x04	; 4
    1866:	91 05       	cpc	r25, r1
    1868:	81 f0       	breq	.+32     	; 0x188a <lcd_cursor+0x6e>
    186a:	13 c0       	rjmp	.+38     	; 0x1892 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	81 58       	subi	r24, 0x81	; 129
    1870:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	81 54       	subi	r24, 0x41	; 65
    187a:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	8d 56       	subi	r24, 0x6D	; 109
    1884:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	8d 52       	subi	r24, 0x2D	; 45
    188e:	0e 94 33 09 	call	0x1266	; 0x1266 <lcd_wr_command>
		default: break;
	}
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	27 97       	sbiw	r28, 0x07	; 7
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	6b 83       	std	Y+3, r22	; 0x03
    18b8:	5d 83       	std	Y+5, r21	; 0x05
    18ba:	4c 83       	std	Y+4, r20	; 0x04
    18bc:	3f 83       	std	Y+7, r19	; 0x07
    18be:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    18c0:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	88 23       	and	r24, r24
    18c6:	19 f0       	breq	.+6      	; 0x18ce <lcd_print+0x2e>
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	88 23       	and	r24, r24
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <lcd_print+0x34>
	{
		lcd_home();
    18ce:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <lcd_home>
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	6b 81       	ldd	r22, Y+3	; 0x03
    18d8:	0e 94 0e 0c 	call	0x181c	; 0x181c <lcd_cursor>
	}
	if(digits==5 || flag==1)
    18dc:	8e 81       	ldd	r24, Y+6	; 0x06
    18de:	9f 81       	ldd	r25, Y+7	; 0x07
    18e0:	85 30       	cpi	r24, 0x05	; 5
    18e2:	91 05       	cpc	r25, r1
    18e4:	19 f0       	breq	.+6      	; 0x18ec <lcd_print+0x4c>
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a9 f4       	brne	.+42     	; 0x1916 <lcd_print+0x76>
	{
		million=value/10000+48;
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	20 e1       	ldi	r18, 0x10	; 16
    18f2:	37 e2       	ldi	r19, 0x27	; 39
    18f4:	b9 01       	movw	r22, r18
    18f6:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    18fa:	cb 01       	movw	r24, r22
    18fc:	c0 96       	adiw	r24, 0x30	; 48
    18fe:	90 93 1e 03 	sts	0x031E, r25
    1902:	80 93 1d 03 	sts	0x031D, r24
		lcd_wr_char(million);
    1906:	80 91 1d 03 	lds	r24, 0x031D
    190a:	90 91 1e 03 	lds	r25, 0x031E
    190e:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
		flag=1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1916:	8e 81       	ldd	r24, Y+6	; 0x06
    1918:	9f 81       	ldd	r25, Y+7	; 0x07
    191a:	84 30       	cpi	r24, 0x04	; 4
    191c:	91 05       	cpc	r25, r1
    191e:	19 f0       	breq	.+6      	; 0x1926 <lcd_print+0x86>
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	11 f5       	brne	.+68     	; 0x196a <lcd_print+0xca>
	{
		temp = value/1000;
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	28 ee       	ldi	r18, 0xE8	; 232
    192c:	33 e0       	ldi	r19, 0x03	; 3
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1934:	cb 01       	movw	r24, r22
    1936:	90 93 20 03 	sts	0x0320, r25
    193a:	80 93 1f 03 	sts	0x031F, r24
		thousand = temp%10 + 48;
    193e:	80 91 1f 03 	lds	r24, 0x031F
    1942:	90 91 20 03 	lds	r25, 0x0320
    1946:	2a e0       	ldi	r18, 0x0A	; 10
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	b9 01       	movw	r22, r18
    194c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1950:	c0 96       	adiw	r24, 0x30	; 48
    1952:	90 93 2d 03 	sts	0x032D, r25
    1956:	80 93 2c 03 	sts	0x032C, r24
		lcd_wr_char(thousand);
    195a:	80 91 2c 03 	lds	r24, 0x032C
    195e:	90 91 2d 03 	lds	r25, 0x032D
    1962:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
		flag=1;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	19 f0       	breq	.+6      	; 0x197a <lcd_print+0xda>
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	11 f5       	brne	.+68     	; 0x19be <lcd_print+0x11e>
	{
		temp = value/100;
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	24 e6       	ldi	r18, 0x64	; 100
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	b9 01       	movw	r22, r18
    1984:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1988:	cb 01       	movw	r24, r22
    198a:	90 93 20 03 	sts	0x0320, r25
    198e:	80 93 1f 03 	sts	0x031F, r24
		hundred = temp%10 + 48;
    1992:	80 91 1f 03 	lds	r24, 0x031F
    1996:	90 91 20 03 	lds	r25, 0x0320
    199a:	2a e0       	ldi	r18, 0x0A	; 10
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	b9 01       	movw	r22, r18
    19a0:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    19a4:	c0 96       	adiw	r24, 0x30	; 48
    19a6:	90 93 29 03 	sts	0x0329, r25
    19aa:	80 93 28 03 	sts	0x0328, r24
		lcd_wr_char(hundred);
    19ae:	80 91 28 03 	lds	r24, 0x0328
    19b2:	90 91 29 03 	lds	r25, 0x0329
    19b6:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
		flag=1;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	91 05       	cpc	r25, r1
    19c6:	19 f0       	breq	.+6      	; 0x19ce <lcd_print+0x12e>
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	11 f5       	brne	.+68     	; 0x1a12 <lcd_print+0x172>
	{
		temp = value/10;
    19ce:	8c 81       	ldd	r24, Y+4	; 0x04
    19d0:	9d 81       	ldd	r25, Y+5	; 0x05
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	b9 01       	movw	r22, r18
    19d8:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    19dc:	cb 01       	movw	r24, r22
    19de:	90 93 20 03 	sts	0x0320, r25
    19e2:	80 93 1f 03 	sts	0x031F, r24
		tens = temp%10 + 48;
    19e6:	80 91 1f 03 	lds	r24, 0x031F
    19ea:	90 91 20 03 	lds	r25, 0x0320
    19ee:	2a e0       	ldi	r18, 0x0A	; 10
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	b9 01       	movw	r22, r18
    19f4:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    19f8:	c0 96       	adiw	r24, 0x30	; 48
    19fa:	90 93 27 03 	sts	0x0327, r25
    19fe:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(tens);
    1a02:	80 91 26 03 	lds	r24, 0x0326
    1a06:	90 91 27 03 	lds	r25, 0x0327
    1a0a:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
		flag=1;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1a12:	8e 81       	ldd	r24, Y+6	; 0x06
    1a14:	9f 81       	ldd	r25, Y+7	; 0x07
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	91 05       	cpc	r25, r1
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <lcd_print+0x182>
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 f4       	brne	.+36     	; 0x1a46 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	2a e0       	ldi	r18, 0x0A	; 10
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	b9 01       	movw	r22, r18
    1a2c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    1a30:	c0 96       	adiw	r24, 0x30	; 48
    1a32:	90 93 2b 03 	sts	0x032B, r25
    1a36:	80 93 2a 03 	sts	0x032A, r24
		lcd_wr_char(unit);
    1a3a:	80 91 2a 03 	lds	r24, 0x032A
    1a3e:	90 91 2b 03 	lds	r25, 0x032B
    1a42:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
	}
	if(digits>5)
    1a46:	8e 81       	ldd	r24, Y+6	; 0x06
    1a48:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4a:	86 30       	cpi	r24, 0x06	; 6
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	1c f0       	brlt	.+6      	; 0x1a56 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1a50:	85 e4       	ldi	r24, 0x45	; 69
    1a52:	0e 94 8d 0a 	call	0x151a	; 0x151a <lcd_wr_char>
	}
	
}
    1a56:	27 96       	adiw	r28, 0x07	; 7
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	de bf       	out	0x3e, r29	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	cd bf       	out	0x3d, r28	; 61
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <LCD_DISPLAY_INT_1>:


void LCD_DISPLAY_INT_1(int val)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	0f 92       	push	r0
    1a6e:	0f 92       	push	r0
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01


 lcd_print(1,1,val,4);
    1a78:	29 81       	ldd	r18, Y+1	; 0x01
    1a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	61 e0       	ldi	r22, 0x01	; 1
    1a80:	a9 01       	movw	r20, r18
    1a82:	24 e0       	ldi	r18, 0x04	; 4
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <lcd_print>

}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <reverse>:

/* reverse: reverse string s in place */
void reverse(char s[])
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	28 97       	sbiw	r28, 0x08	; 8
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	98 87       	std	Y+8, r25	; 0x08
    1aaa:	8f 83       	std	Y+7, r24	; 0x07
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1aac:	1c 82       	std	Y+4, r1	; 0x04
    1aae:	1b 82       	std	Y+3, r1	; 0x03
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	0e 94 4d 18 	call	0x309a	; 0x309a <strlen>
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	2f c0       	rjmp	.+94     	; 0x1b1e <reverse+0x8a>
        c = s[i];
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac6:	98 85       	ldd	r25, Y+8	; 0x08
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e2 0f       	add	r30, r18
    1acc:	f3 1f       	adc	r31, r19
    1ace:	80 81       	ld	r24, Z
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
        s[i] = s[j];
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ade:	98 85       	ldd	r25, Y+8	; 0x08
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	a2 0f       	add	r26, r18
    1ae4:	b3 1f       	adc	r27, r19
    1ae6:	29 81       	ldd	r18, Y+1	; 0x01
    1ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aea:	8f 81       	ldd	r24, Y+7	; 0x07
    1aec:	98 85       	ldd	r25, Y+8	; 0x08
    1aee:	fc 01       	movw	r30, r24
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	80 81       	ld	r24, Z
    1af6:	8c 93       	st	X, r24
        s[j] = c;
    1af8:	29 81       	ldd	r18, Y+1	; 0x01
    1afa:	3a 81       	ldd	r19, Y+2	; 0x02
    1afc:	8f 81       	ldd	r24, Y+7	; 0x07
    1afe:	98 85       	ldd	r25, Y+8	; 0x08
    1b00:	fc 01       	movw	r30, r24
    1b02:	e2 0f       	add	r30, r18
    1b04:	f3 1f       	adc	r31, r19
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	80 83       	st	Z, r24

/* reverse: reverse string s in place */
void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s)-1; i < j; i++, j--) {
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	9c 83       	std	Y+4, r25	; 0x04
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b20:	3c 81       	ldd	r19, Y+4	; 0x04
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	28 17       	cp	r18, r24
    1b28:	39 07       	cpc	r19, r25
    1b2a:	54 f2       	brlt	.-108    	; 0x1ac0 <reverse+0x2c>
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}
    1b2c:	28 96       	adiw	r28, 0x08	; 8
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <itoa1>:
void itoa1(int n, char s[])
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	28 97       	sbiw	r28, 0x08	; 8
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	78 87       	std	Y+8, r23	; 0x08
    1b58:	6f 83       	std	Y+7, r22	; 0x07
    int i, sign;
    if ((sign = n) < 0) /* record sign */
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	99 23       	and	r25, r25
    1b68:	3c f4       	brge	.+14     	; 0x1b78 <itoa1+0x3a>
         n = -n;          /* make n positive */
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	90 95       	com	r25
    1b70:	81 95       	neg	r24
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
    i = 0;
    1b78:	1c 82       	std	Y+4, r1	; 0x04
    1b7a:	1b 82       	std	Y+3, r1	; 0x03
    do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0'; /* get next digit */
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	8f 81       	ldd	r24, Y+7	; 0x07
    1b82:	98 85       	ldd	r25, Y+8	; 0x08
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__divmodhi4>
    1b98:	80 5d       	subi	r24, 0xD0	; 208
    1b9a:	80 83       	st	Z, r24
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
    } while ((n /= 10) > 0);     /* delete it */
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	2a e0       	ldi	r18, 0x0A	; 10
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	b9 01       	movw	r22, r18
    1bb0:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__divmodhi4>
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	18 16       	cp	r1, r24
    1bc0:	19 06       	cpc	r1, r25
    1bc2:	e4 f2       	brlt	.-72     	; 0x1b7c <itoa1+0x3e>
    if (sign < 0)
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	99 23       	and	r25, r25
    1bca:	74 f4       	brge	.+28     	; 0x1be8 <itoa1+0xaa>
         s[i++] = '-';
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd2:	98 85       	ldd	r25, Y+8	; 0x08
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f3 1f       	adc	r31, r19
    1bda:	8d e2       	ldi	r24, 0x2D	; 45
    1bdc:	80 83       	st	Z, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	01 96       	adiw	r24, 0x01	; 1
    1be4:	9c 83       	std	Y+4, r25	; 0x04
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    s[i] = '\0';
    1be8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bea:	3c 81       	ldd	r19, Y+4	; 0x04
    1bec:	8f 81       	ldd	r24, Y+7	; 0x07
    1bee:	98 85       	ldd	r25, Y+8	; 0x08
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	e2 0f       	add	r30, r18
    1bf4:	f3 1f       	adc	r31, r19
    1bf6:	10 82       	st	Z, r1
    reverse(s);
    1bf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfa:	98 85       	ldd	r25, Y+8	; 0x08
    1bfc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <reverse>
}
    1c00:	28 96       	adiw	r28, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <LCD_DISPLAY_INT_2>:

}*/
	

void LCD_DISPLAY_INT_2(int val)
{	
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	0f 92       	push	r0
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01


lcd_print(2,1,val,4);
    1c22:	29 81       	ldd	r18, Y+1	; 0x01
    1c24:	3a 81       	ldd	r19, Y+2	; 0x02
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	61 e0       	ldi	r22, 0x01	; 1
    1c2a:	a9 01       	movw	r20, r18
    1c2c:	24 e0       	ldi	r18, 0x04	; 4
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <lcd_print>

}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <init_buzzer>:

// BUZZER Functions

/*****Function to Initialize PORTS*****/
void init_buzzer()
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;				//Setting PORTC pin3 as outpt
    1c46:	a7 e2       	ldi	r26, 0x27	; 39
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e7 e2       	ldi	r30, 0x27	; 39
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 60       	ori	r24, 0x08	; 8
    1c52:	8c 93       	st	X, r24
	PORTC = 0x00;				//Initialize Values of PORTC to 0.
    1c54:	e8 e2       	ldi	r30, 0x28	; 40
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	10 82       	st	Z, r1
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <buzzer_delay>:

/***** Buzzer Delay Function*****/
void buzzer_delay()
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	6a 97       	sbiw	r28, 0x1a	; 26
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
	unsigned int i;
	for(i=0; i<10;i++)
    1c74:	1a 8e       	std	Y+26, r1	; 0x1a
    1c76:	19 8e       	std	Y+25, r1	; 0x19
    1c78:	c3 c0       	rjmp	.+390    	; 0x1e00 <buzzer_delay+0x1a0>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a8 ec       	ldi	r26, 0xC8	; 200
    1c80:	b2 e4       	ldi	r27, 0x42	; 66
    1c82:	8d 8b       	std	Y+21, r24	; 0x15
    1c84:	9e 8b       	std	Y+22, r25	; 0x16
    1c86:	af 8b       	std	Y+23, r26	; 0x17
    1c88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c90:	98 8d       	ldd	r25, Y+24	; 0x18
    1c92:	22 e5       	ldi	r18, 0x52	; 82
    1c94:	39 e4       	ldi	r19, 0x49	; 73
    1c96:	4d e9       	ldi	r20, 0x9D	; 157
    1c98:	50 e4       	ldi	r21, 0x40	; 64
    1c9a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	89 8b       	std	Y+17, r24	; 0x11
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	ab 8b       	std	Y+19, r26	; 0x13
    1ca8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1caa:	69 89       	ldd	r22, Y+17	; 0x11
    1cac:	7a 89       	ldd	r23, Y+18	; 0x12
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	1c f4       	brge	.+6      	; 0x1cc8 <buzzer_delay+0x68>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	88 8b       	std	Y+16, r24	; 0x10
    1cc6:	91 c0       	rjmp	.+290    	; 0x1dea <buzzer_delay+0x18a>
	else if (__tmp > 255)
    1cc8:	69 89       	ldd	r22, Y+17	; 0x11
    1cca:	7a 89       	ldd	r23, Y+18	; 0x12
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	53 e4       	ldi	r21, 0x43	; 67
    1cd8:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	0c f0       	brlt	.+2      	; 0x1ce2 <buzzer_delay+0x82>
    1ce0:	7b c0       	rjmp	.+246    	; 0x1dd8 <buzzer_delay+0x178>
	{
		_delay_ms(__us / 1000.0);
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a e7       	ldi	r20, 0x7A	; 122
    1cf0:	54 e4       	ldi	r21, 0x44	; 68
    1cf2:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__divsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8c 87       	std	Y+12, r24	; 0x0c
    1cfc:	9d 87       	std	Y+13, r25	; 0x0d
    1cfe:	ae 87       	std	Y+14, r26	; 0x0e
    1d00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d04:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d0a:	26 e6       	ldi	r18, 0x66	; 102
    1d0c:	36 e6       	ldi	r19, 0x66	; 102
    1d0e:	46 e6       	ldi	r20, 0x66	; 102
    1d10:	55 e4       	ldi	r21, 0x45	; 69
    1d12:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	88 87       	std	Y+8, r24	; 0x08
    1d1c:	99 87       	std	Y+9, r25	; 0x09
    1d1e:	aa 87       	std	Y+10, r26	; 0x0a
    1d20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d22:	68 85       	ldd	r22, Y+8	; 0x08
    1d24:	79 85       	ldd	r23, Y+9	; 0x09
    1d26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d28:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <buzzer_delay+0xe4>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9f 83       	std	Y+7, r25	; 0x07
    1d40:	8e 83       	std	Y+6, r24	; 0x06
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <buzzer_delay+0x162>
	else if (__tmp > 65535)
    1d44:	68 85       	ldd	r22, Y+8	; 0x08
    1d46:	79 85       	ldd	r23, Y+9	; 0x09
    1d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 9d 14 	call	0x293a	; 0x293a <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <buzzer_delay+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9f 83       	std	Y+7, r25	; 0x07
    1d82:	8e 83       	std	Y+6, r24	; 0x06
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <buzzer_delay+0x144>
    1d86:	80 e7       	ldi	r24, 0x70	; 112
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	9d 83       	std	Y+5, r25	; 0x05
    1d8c:	8c 83       	std	Y+4, r24	; 0x04
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	9d 81       	ldd	r25, Y+5	; 0x05
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <buzzer_delay+0x132>
    1d96:	9d 83       	std	Y+5, r25	; 0x05
    1d98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9f 83       	std	Y+7, r25	; 0x07
    1da2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <buzzer_delay+0x126>
    1dac:	24 c0       	rjmp	.+72     	; 0x1df6 <buzzer_delay+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	68 85       	ldd	r22, Y+8	; 0x08
    1db0:	79 85       	ldd	r23, Y+9	; 0x09
    1db2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db6:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9f 83       	std	Y+7, r25	; 0x07
    1dc0:	8e 83       	std	Y+6, r24	; 0x06
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	9b 83       	std	Y+3, r25	; 0x03
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <buzzer_delay+0x16e>
    1dd2:	9b 83       	std	Y+3, r25	; 0x03
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <buzzer_delay+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dd8:	69 89       	ldd	r22, Y+17	; 0x11
    1dda:	7a 89       	ldd	r23, Y+18	; 0x12
    1ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dde:	9c 89       	ldd	r25, Y+20	; 0x14
    1de0:	0e 94 21 11 	call	0x2242	; 0x2242 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	88 8b       	std	Y+16, r24	; 0x10
    1dea:	88 89       	ldd	r24, Y+16	; 0x10
    1dec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	8a 95       	dec	r24
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <buzzer_delay+0x190>
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	89 8d       	ldd	r24, Y+25	; 0x19
    1df8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1dfa:	01 96       	adiw	r24, 0x01	; 1
    1dfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dfe:	89 8f       	std	Y+25, r24	; 0x19
    1e00:	89 8d       	ldd	r24, Y+25	; 0x19
    1e02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e04:	8a 30       	cpi	r24, 0x0A	; 10
    1e06:	91 05       	cpc	r25, r1
    1e08:	08 f4       	brcc	.+2      	; 0x1e0c <buzzer_delay+0x1ac>
    1e0a:	37 cf       	rjmp	.-402    	; 0x1c7a <buzzer_delay+0x1a>
	{
		_delay_us(100);
	}
}
    1e0c:	6a 96       	adiw	r28, 0x1a	; 26
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <BUZZER_ON>:

void BUZZER_ON()
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <BUZZER_ON+0x6>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62

int i=0; 
    1e28:	1b 82       	std	Y+3, r1	; 0x03
    1e2a:	1a 82       	std	Y+2, r1	; 0x02
   unsigned char port_C_copy;
   port_C_copy = PORTC;
    1e2c:	e8 e2       	ldi	r30, 0x28	; 40
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy | 0x08;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	88 60       	ori	r24, 0x08	; 8
    1e38:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1e3a:	e8 e2       	ldi	r30, 0x28	; 40
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	80 83       	st	Z, r24
   //for(i=0;i<10;i++)
	//tick_timer();
	buzzer_delay();
    1e42:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <buzzer_delay>
   port_C_copy = PORTC;
    1e46:	e8 e2       	ldi	r30, 0x28	; 40
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	89 83       	std	Y+1, r24	; 0x01
   port_C_copy = port_C_copy & 0xF7;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	87 7f       	andi	r24, 0xF7	; 247
    1e52:	89 83       	std	Y+1, r24	; 0x01
   PORTC = port_C_copy;	
    1e54:	e8 e2       	ldi	r30, 0x28	; 40
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	80 83       	st	Z, r24

//PORTC = 0x08;			//Set pin3 to turn the "buzzer ON"
//buzzer_delay();			//delay


}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <BUZZER_OFF>:


void BUZZER_OFF()
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62

PORTC = 0x00;			//Clear pin3 to turn the "buzzer OFF"
    1e70:	e8 e2       	ldi	r30, 0x28	; 40
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
buzzer_delay();			//delay
    1e76:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <buzzer_delay>

}
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <Obstacle_Avoidance_I_KINECT>:
static integer KINECT_v;
static integer MOTOR_LEFT_SPEED_v;
static integer MOTOR_RIGHT_SPEED_v;
static integer fir;
static unsigned char _state_1 = 1;
void Obstacle_Avoidance_I_KINECT(integer _v) {
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	0f 92       	push	r0
    1e86:	0f 92       	push	r0
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
  _s.KINECT = 1;
    1e90:	80 91 14 03 	lds	r24, 0x0314
    1e94:	81 60       	ori	r24, 0x01	; 1
    1e96:	80 93 14 03 	sts	0x0314, r24
  KINECT_v = _v;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9e:	90 93 16 03 	sts	0x0316, r25
    1ea2:	80 93 15 03 	sts	0x0315, r24
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <Obstacle_Avoidance>:

int Obstacle_Avoidance(void)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
  /* Vacuous terminate */;
  if (_state_1) {
    1eb8:	80 91 00 02 	lds	r24, 0x0200
    1ebc:	88 23       	and	r24, r24
    1ebe:	b9 f0       	breq	.+46     	; 0x1eee <Obstacle_Avoidance+0x3e>
    _s.MOTOR_RIGHT_SPEED = 0;;
    1ec0:	80 91 14 03 	lds	r24, 0x0314
    1ec4:	8f 7e       	andi	r24, 0xEF	; 239
    1ec6:	80 93 14 03 	sts	0x0314, r24
    _s.MOTOR_LEFT_SPEED = 0;;
    1eca:	80 91 14 03 	lds	r24, 0x0314
    1ece:	87 7f       	andi	r24, 0xF7	; 247
    1ed0:	80 93 14 03 	sts	0x0314, r24
    _s.MOVE_REV = 0;;
    1ed4:	80 91 14 03 	lds	r24, 0x0314
    1ed8:	8b 7f       	andi	r24, 0xFB	; 251
    1eda:	80 93 14 03 	sts	0x0314, r24
    _s.MOVE_FWD = 0;;
    1ede:	80 91 14 03 	lds	r24, 0x0314
    1ee2:	8d 7f       	andi	r24, 0xFD	; 253
    1ee4:	80 93 14 03 	sts	0x0314, r24
    _state_1 = 0;
    1ee8:	10 92 00 02 	sts	0x0200, r1
    1eec:	ff c0       	rjmp	.+510    	; 0x20ec <Obstacle_Avoidance+0x23c>
  } else {
    if (_s.KINECT) {
    1eee:	80 91 14 03 	lds	r24, 0x0314
    1ef2:	81 70       	andi	r24, 0x01	; 1
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <Obstacle_Avoidance+0x4a>
    1ef8:	f7 c0       	rjmp	.+494    	; 0x20e8 <Obstacle_Avoidance+0x238>
      _state_1 = 0;
    1efa:	10 92 00 02 	sts	0x0200, r1
      fir = KINECT_v;
    1efe:	80 91 15 03 	lds	r24, 0x0315
    1f02:	90 91 16 03 	lds	r25, 0x0316
    1f06:	90 93 1c 03 	sts	0x031C, r25
    1f0a:	80 93 1b 03 	sts	0x031B, r24
      if ((fir == 1)) {
    1f0e:	80 91 1b 03 	lds	r24, 0x031B
    1f12:	90 91 1c 03 	lds	r25, 0x031C
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	e1 f4       	brne	.+56     	; 0x1f54 <Obstacle_Avoidance+0xa4>
        _s.MOVE_FWD = 1;
    1f1c:	80 91 14 03 	lds	r24, 0x0314
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	80 93 14 03 	sts	0x0314, r24
        (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
    1f26:	86 e9       	ldi	r24, 0x96	; 150
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	90 93 18 03 	sts	0x0318, r25
    1f2e:	80 93 17 03 	sts	0x0317, r24
    1f32:	80 91 14 03 	lds	r24, 0x0314
    1f36:	88 60       	ori	r24, 0x08	; 8
    1f38:	80 93 14 03 	sts	0x0314, r24
        (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
    1f3c:	86 e9       	ldi	r24, 0x96	; 150
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	90 93 1a 03 	sts	0x031A, r25
    1f44:	80 93 19 03 	sts	0x0319, r24
    1f48:	80 91 14 03 	lds	r24, 0x0314
    1f4c:	80 61       	ori	r24, 0x10	; 16
    1f4e:	80 93 14 03 	sts	0x0314, r24
    1f52:	cc c0       	rjmp	.+408    	; 0x20ec <Obstacle_Avoidance+0x23c>
      } else {
        if ((fir == 2)) {
    1f54:	80 91 1b 03 	lds	r24, 0x031B
    1f58:	90 91 1c 03 	lds	r25, 0x031C
    1f5c:	82 30       	cpi	r24, 0x02	; 2
    1f5e:	91 05       	cpc	r25, r1
    1f60:	d1 f4       	brne	.+52     	; 0x1f96 <Obstacle_Avoidance+0xe6>
          _s.MOVE_FWD = 1;
    1f62:	80 91 14 03 	lds	r24, 0x0314
    1f66:	82 60       	ori	r24, 0x02	; 2
    1f68:	80 93 14 03 	sts	0x0314, r24
          (MOTOR_LEFT_SPEED_v = 130), (_s.MOTOR_LEFT_SPEED = 1);
    1f6c:	82 e8       	ldi	r24, 0x82	; 130
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	90 93 18 03 	sts	0x0318, r25
    1f74:	80 93 17 03 	sts	0x0317, r24
    1f78:	80 91 14 03 	lds	r24, 0x0314
    1f7c:	88 60       	ori	r24, 0x08	; 8
    1f7e:	80 93 14 03 	sts	0x0314, r24
          (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    1f82:	10 92 1a 03 	sts	0x031A, r1
    1f86:	10 92 19 03 	sts	0x0319, r1
    1f8a:	80 91 14 03 	lds	r24, 0x0314
    1f8e:	80 61       	ori	r24, 0x10	; 16
    1f90:	80 93 14 03 	sts	0x0314, r24
    1f94:	ab c0       	rjmp	.+342    	; 0x20ec <Obstacle_Avoidance+0x23c>
        } else {
          if ((fir == 3)) {
    1f96:	80 91 1b 03 	lds	r24, 0x031B
    1f9a:	90 91 1c 03 	lds	r25, 0x031C
    1f9e:	83 30       	cpi	r24, 0x03	; 3
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	d1 f4       	brne	.+52     	; 0x1fd8 <Obstacle_Avoidance+0x128>
            _s.MOVE_FWD = 1;
    1fa4:	80 91 14 03 	lds	r24, 0x0314
    1fa8:	82 60       	ori	r24, 0x02	; 2
    1faa:	80 93 14 03 	sts	0x0314, r24
            (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
    1fae:	10 92 18 03 	sts	0x0318, r1
    1fb2:	10 92 17 03 	sts	0x0317, r1
    1fb6:	80 91 14 03 	lds	r24, 0x0314
    1fba:	88 60       	ori	r24, 0x08	; 8
    1fbc:	80 93 14 03 	sts	0x0314, r24
            (MOTOR_RIGHT_SPEED_v = 130), (_s.MOTOR_RIGHT_SPEED = 1);
    1fc0:	82 e8       	ldi	r24, 0x82	; 130
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	90 93 1a 03 	sts	0x031A, r25
    1fc8:	80 93 19 03 	sts	0x0319, r24
    1fcc:	80 91 14 03 	lds	r24, 0x0314
    1fd0:	80 61       	ori	r24, 0x10	; 16
    1fd2:	80 93 14 03 	sts	0x0314, r24
    1fd6:	8a c0       	rjmp	.+276    	; 0x20ec <Obstacle_Avoidance+0x23c>
          } else {
            if ((fir == 4)) {
    1fd8:	80 91 1b 03 	lds	r24, 0x031B
    1fdc:	90 91 1c 03 	lds	r25, 0x031C
    1fe0:	84 30       	cpi	r24, 0x04	; 4
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	e1 f4       	brne	.+56     	; 0x201e <Obstacle_Avoidance+0x16e>
              _s.MOVE_REV = 1;
    1fe6:	80 91 14 03 	lds	r24, 0x0314
    1fea:	84 60       	ori	r24, 0x04	; 4
    1fec:	80 93 14 03 	sts	0x0314, r24
              (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
    1ff0:	86 e9       	ldi	r24, 0x96	; 150
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	90 93 18 03 	sts	0x0318, r25
    1ff8:	80 93 17 03 	sts	0x0317, r24
    1ffc:	80 91 14 03 	lds	r24, 0x0314
    2000:	88 60       	ori	r24, 0x08	; 8
    2002:	80 93 14 03 	sts	0x0314, r24
              (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
    2006:	86 e9       	ldi	r24, 0x96	; 150
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	90 93 1a 03 	sts	0x031A, r25
    200e:	80 93 19 03 	sts	0x0319, r24
    2012:	80 91 14 03 	lds	r24, 0x0314
    2016:	80 61       	ori	r24, 0x10	; 16
    2018:	80 93 14 03 	sts	0x0314, r24
    201c:	67 c0       	rjmp	.+206    	; 0x20ec <Obstacle_Avoidance+0x23c>
            } else {
              if ((fir == 5)) {
    201e:	80 91 1b 03 	lds	r24, 0x031B
    2022:	90 91 1c 03 	lds	r25, 0x031C
    2026:	85 30       	cpi	r24, 0x05	; 5
    2028:	91 05       	cpc	r25, r1
    202a:	e1 f4       	brne	.+56     	; 0x2064 <Obstacle_Avoidance+0x1b4>
                _s.MOVE_FWD = 1;
    202c:	80 91 14 03 	lds	r24, 0x0314
    2030:	82 60       	ori	r24, 0x02	; 2
    2032:	80 93 14 03 	sts	0x0314, r24
                (MOTOR_LEFT_SPEED_v = 150), (_s.MOTOR_LEFT_SPEED = 1);
    2036:	86 e9       	ldi	r24, 0x96	; 150
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	90 93 18 03 	sts	0x0318, r25
    203e:	80 93 17 03 	sts	0x0317, r24
    2042:	80 91 14 03 	lds	r24, 0x0314
    2046:	88 60       	ori	r24, 0x08	; 8
    2048:	80 93 14 03 	sts	0x0314, r24
                (MOTOR_RIGHT_SPEED_v = 70), (_s.MOTOR_RIGHT_SPEED = 1);
    204c:	86 e4       	ldi	r24, 0x46	; 70
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	90 93 1a 03 	sts	0x031A, r25
    2054:	80 93 19 03 	sts	0x0319, r24
    2058:	80 91 14 03 	lds	r24, 0x0314
    205c:	80 61       	ori	r24, 0x10	; 16
    205e:	80 93 14 03 	sts	0x0314, r24
    2062:	44 c0       	rjmp	.+136    	; 0x20ec <Obstacle_Avoidance+0x23c>
              } else {
                if ((fir == 6)) {
    2064:	80 91 1b 03 	lds	r24, 0x031B
    2068:	90 91 1c 03 	lds	r25, 0x031C
    206c:	86 30       	cpi	r24, 0x06	; 6
    206e:	91 05       	cpc	r25, r1
    2070:	e1 f4       	brne	.+56     	; 0x20aa <Obstacle_Avoidance+0x1fa>
                  _s.MOVE_FWD = 1;
    2072:	80 91 14 03 	lds	r24, 0x0314
    2076:	82 60       	ori	r24, 0x02	; 2
    2078:	80 93 14 03 	sts	0x0314, r24
                  (MOTOR_LEFT_SPEED_v = 70), (_s.MOTOR_LEFT_SPEED = 1);
    207c:	86 e4       	ldi	r24, 0x46	; 70
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	90 93 18 03 	sts	0x0318, r25
    2084:	80 93 17 03 	sts	0x0317, r24
    2088:	80 91 14 03 	lds	r24, 0x0314
    208c:	88 60       	ori	r24, 0x08	; 8
    208e:	80 93 14 03 	sts	0x0314, r24
                  (MOTOR_RIGHT_SPEED_v = 150), (_s.MOTOR_RIGHT_SPEED = 1);
    2092:	86 e9       	ldi	r24, 0x96	; 150
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	90 93 1a 03 	sts	0x031A, r25
    209a:	80 93 19 03 	sts	0x0319, r24
    209e:	80 91 14 03 	lds	r24, 0x0314
    20a2:	80 61       	ori	r24, 0x10	; 16
    20a4:	80 93 14 03 	sts	0x0314, r24
    20a8:	21 c0       	rjmp	.+66     	; 0x20ec <Obstacle_Avoidance+0x23c>
                } else {
                  if ((fir == 7)) {
    20aa:	80 91 1b 03 	lds	r24, 0x031B
    20ae:	90 91 1c 03 	lds	r25, 0x031C
    20b2:	87 30       	cpi	r24, 0x07	; 7
    20b4:	91 05       	cpc	r25, r1
    20b6:	d1 f4       	brne	.+52     	; 0x20ec <Obstacle_Avoidance+0x23c>
                    _s.MOVE_FWD = 1;
    20b8:	80 91 14 03 	lds	r24, 0x0314
    20bc:	82 60       	ori	r24, 0x02	; 2
    20be:	80 93 14 03 	sts	0x0314, r24
                    (MOTOR_LEFT_SPEED_v = 0), (_s.MOTOR_LEFT_SPEED = 1);
    20c2:	10 92 18 03 	sts	0x0318, r1
    20c6:	10 92 17 03 	sts	0x0317, r1
    20ca:	80 91 14 03 	lds	r24, 0x0314
    20ce:	88 60       	ori	r24, 0x08	; 8
    20d0:	80 93 14 03 	sts	0x0314, r24
                    (MOTOR_RIGHT_SPEED_v = 0), (_s.MOTOR_RIGHT_SPEED = 1);
    20d4:	10 92 1a 03 	sts	0x031A, r1
    20d8:	10 92 19 03 	sts	0x0319, r1
    20dc:	80 91 14 03 	lds	r24, 0x0314
    20e0:	80 61       	ori	r24, 0x10	; 16
    20e2:	80 93 14 03 	sts	0x0314, r24
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <Obstacle_Avoidance+0x23c>
            }
          }
        }
      }
    } else {
      _state_1 = 0;
    20e8:	10 92 00 02 	sts	0x0200, r1
    }
  }
  if (_s.MOVE_FWD) { Obstacle_Avoidance_O_MOVE_FWD(); _s.MOVE_FWD = 0; }
    20ec:	80 91 14 03 	lds	r24, 0x0314
    20f0:	86 95       	lsr	r24
    20f2:	81 70       	andi	r24, 0x01	; 1
    20f4:	88 23       	and	r24, r24
    20f6:	39 f0       	breq	.+14     	; 0x2106 <Obstacle_Avoidance+0x256>
    20f8:	0e 94 01 11 	call	0x2202	; 0x2202 <Obstacle_Avoidance_O_MOVE_FWD>
    20fc:	80 91 14 03 	lds	r24, 0x0314
    2100:	8d 7f       	andi	r24, 0xFD	; 253
    2102:	80 93 14 03 	sts	0x0314, r24
  if (_s.MOVE_REV) { Obstacle_Avoidance_O_MOVE_REV(); _s.MOVE_REV = 0; }
    2106:	80 91 14 03 	lds	r24, 0x0314
    210a:	86 95       	lsr	r24
    210c:	86 95       	lsr	r24
    210e:	81 70       	andi	r24, 0x01	; 1
    2110:	88 23       	and	r24, r24
    2112:	39 f0       	breq	.+14     	; 0x2122 <Obstacle_Avoidance+0x272>
    2114:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <Obstacle_Avoidance_O_MOVE_REV>
    2118:	80 91 14 03 	lds	r24, 0x0314
    211c:	8b 7f       	andi	r24, 0xFB	; 251
    211e:	80 93 14 03 	sts	0x0314, r24
  if (_s.MOTOR_LEFT_SPEED) { Obstacle_Avoidance_O_MOTOR_LEFT_SPEED(MOTOR_LEFT_SPEED_v); _s.MOTOR_LEFT_SPEED = 0; }
    2122:	80 91 14 03 	lds	r24, 0x0314
    2126:	86 95       	lsr	r24
    2128:	86 95       	lsr	r24
    212a:	86 95       	lsr	r24
    212c:	81 70       	andi	r24, 0x01	; 1
    212e:	88 23       	and	r24, r24
    2130:	59 f0       	breq	.+22     	; 0x2148 <Obstacle_Avoidance+0x298>
    2132:	80 91 17 03 	lds	r24, 0x0317
    2136:	90 91 18 03 	lds	r25, 0x0318
    213a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED>
    213e:	80 91 14 03 	lds	r24, 0x0314
    2142:	87 7f       	andi	r24, 0xF7	; 247
    2144:	80 93 14 03 	sts	0x0314, r24
  if (_s.MOTOR_RIGHT_SPEED) { Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED(MOTOR_RIGHT_SPEED_v); _s.MOTOR_RIGHT_SPEED = 0; }
    2148:	80 91 14 03 	lds	r24, 0x0314
    214c:	82 95       	swap	r24
    214e:	8f 70       	andi	r24, 0x0F	; 15
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	88 23       	and	r24, r24
    2154:	59 f0       	breq	.+22     	; 0x216c <Obstacle_Avoidance+0x2bc>
    2156:	80 91 19 03 	lds	r24, 0x0319
    215a:	90 91 1a 03 	lds	r25, 0x031A
    215e:	0e 94 ce 10 	call	0x219c	; 0x219c <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED>
    2162:	80 91 14 03 	lds	r24, 0x0314
    2166:	8f 7e       	andi	r24, 0xEF	; 239
    2168:	80 93 14 03 	sts	0x0314, r24
  _s.KINECT = 0;
    216c:	80 91 14 03 	lds	r24, 0x0314
    2170:	8e 7f       	andi	r24, 0xFE	; 254
    2172:	80 93 14 03 	sts	0x0314, r24
  return 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <Obstacle_Avoidance_reset>:

int Obstacle_Avoidance_reset(void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
  _s.KINECT = 0;
    2188:	80 91 14 03 	lds	r24, 0x0314
    218c:	8e 7f       	andi	r24, 0xFE	; 254
    218e:	80 93 14 03 	sts	0x0314, r24
  return 0;
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED>:
/****************************** Fire Bird Specific part ***************************/
static int  IR_THRESHHOLD[3] = {50, 50, 50};
Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED(int val)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <Obstacle_Avoidance_O_MOTOR_RIGHT_SPEED+0x6>
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
	MOTOR_RIGHT_SPEED(val);
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	0e 94 3c 02 	call	0x478	; 0x478 <MOTOR_RIGHT_SPEED>
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED>:
Obstacle_Avoidance_O_MOTOR_LEFT_SPEED(int val)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <Obstacle_Avoidance_O_MOTOR_LEFT_SPEED+0x6>
    21c8:	0f 92       	push	r0
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
	MOTOR_LEFT_SPEED(val);
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	0e 94 22 02 	call	0x444	; 0x444 <MOTOR_LEFT_SPEED>
}
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <Obstacle_Avoidance_O_MOVE_REV>:
 Obstacle_Avoidance_O_MOVE_REV(void)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	0f 92       	push	r0
    21ee:	0f 92       	push	r0
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	MOVE_REV();
    21f4:	0e 94 8e 01 	call	0x31c	; 0x31c <MOVE_REV>
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <Obstacle_Avoidance_O_MOVE_FWD>:
Obstacle_Avoidance_O_MOVE_FWD(void)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	0f 92       	push	r0
    2208:	0f 92       	push	r0
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
	MOVE_FWD();
    220e:	0e 94 84 01 	call	0x308	; 0x308 <MOVE_FWD>
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <main>:

/****************************** Main function ***************************/
void main()
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
 init_devices();
    2224:	0e 94 46 01 	call	0x28c	; 0x28c <init_devices>
 Obstacle_Avoidance_reset();
    2228:	0e 94 c0 10 	call	0x2180	; 0x2180 <Obstacle_Avoidance_reset>
 Obstacle_Avoidance();
    222c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Obstacle_Avoidance>
 while(1)
 {
  Obstacle_Avoidance_I_KINECT(GESTURE_VALUE);
    2230:	80 91 22 03 	lds	r24, 0x0322
    2234:	90 91 23 03 	lds	r25, 0x0323
    2238:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <Obstacle_Avoidance_I_KINECT>
    Obstacle_Avoidance();
    223c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <Obstacle_Avoidance>
    2240:	f7 cf       	rjmp	.-18     	; 0x2230 <main+0x14>

00002242 <__fixunssfsi>:
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	7b 01       	movw	r14, r22
    224c:	8c 01       	movw	r16, r24
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	5f e4       	ldi	r21, 0x4F	; 79
    2256:	0e 94 cd 14 	call	0x299a	; 0x299a <__gesf2>
    225a:	88 23       	and	r24, r24
    225c:	8c f0       	brlt	.+34     	; 0x2280 <__fixunssfsi+0x3e>
    225e:	c8 01       	movw	r24, r16
    2260:	b7 01       	movw	r22, r14
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	5f e4       	ldi	r21, 0x4F	; 79
    226a:	0e 94 99 12 	call	0x2532	; 0x2532 <__subsf3>
    226e:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fixsfsi>
    2272:	9b 01       	movw	r18, r22
    2274:	ac 01       	movw	r20, r24
    2276:	20 50       	subi	r18, 0x00	; 0
    2278:	30 40       	sbci	r19, 0x00	; 0
    227a:	40 40       	sbci	r20, 0x00	; 0
    227c:	50 48       	sbci	r21, 0x80	; 128
    227e:	06 c0       	rjmp	.+12     	; 0x228c <__fixunssfsi+0x4a>
    2280:	c8 01       	movw	r24, r16
    2282:	b7 01       	movw	r22, r14
    2284:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__fixsfsi>
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	b9 01       	movw	r22, r18
    228e:	ca 01       	movw	r24, r20
    2290:	1f 91       	pop	r17
    2292:	0f 91       	pop	r16
    2294:	ff 90       	pop	r15
    2296:	ef 90       	pop	r14
    2298:	08 95       	ret

0000229a <_fpadd_parts>:
    229a:	a0 e0       	ldi	r26, 0x00	; 0
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e3 e5       	ldi	r30, 0x53	; 83
    22a0:	f1 e1       	ldi	r31, 0x11	; 17
    22a2:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__>
    22a6:	dc 01       	movw	r26, r24
    22a8:	2b 01       	movw	r4, r22
    22aa:	fa 01       	movw	r30, r20
    22ac:	9c 91       	ld	r25, X
    22ae:	92 30       	cpi	r25, 0x02	; 2
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <_fpadd_parts+0x1a>
    22b2:	39 c1       	rjmp	.+626    	; 0x2526 <_fpadd_parts+0x28c>
    22b4:	eb 01       	movw	r28, r22
    22b6:	88 81       	ld	r24, Y
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	08 f4       	brcc	.+2      	; 0x22be <_fpadd_parts+0x24>
    22bc:	33 c1       	rjmp	.+614    	; 0x2524 <_fpadd_parts+0x28a>
    22be:	94 30       	cpi	r25, 0x04	; 4
    22c0:	69 f4       	brne	.+26     	; 0x22dc <_fpadd_parts+0x42>
    22c2:	84 30       	cpi	r24, 0x04	; 4
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <_fpadd_parts+0x2e>
    22c6:	2f c1       	rjmp	.+606    	; 0x2526 <_fpadd_parts+0x28c>
    22c8:	11 96       	adiw	r26, 0x01	; 1
    22ca:	9c 91       	ld	r25, X
    22cc:	11 97       	sbiw	r26, 0x01	; 1
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	98 17       	cp	r25, r24
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <_fpadd_parts+0x3c>
    22d4:	28 c1       	rjmp	.+592    	; 0x2526 <_fpadd_parts+0x28c>
    22d6:	a7 e0       	ldi	r26, 0x07	; 7
    22d8:	b2 e0       	ldi	r27, 0x02	; 2
    22da:	25 c1       	rjmp	.+586    	; 0x2526 <_fpadd_parts+0x28c>
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	09 f4       	brne	.+2      	; 0x22e2 <_fpadd_parts+0x48>
    22e0:	21 c1       	rjmp	.+578    	; 0x2524 <_fpadd_parts+0x28a>
    22e2:	82 30       	cpi	r24, 0x02	; 2
    22e4:	a9 f4       	brne	.+42     	; 0x2310 <_fpadd_parts+0x76>
    22e6:	92 30       	cpi	r25, 0x02	; 2
    22e8:	09 f0       	breq	.+2      	; 0x22ec <_fpadd_parts+0x52>
    22ea:	1d c1       	rjmp	.+570    	; 0x2526 <_fpadd_parts+0x28c>
    22ec:	9a 01       	movw	r18, r20
    22ee:	ad 01       	movw	r20, r26
    22f0:	88 e0       	ldi	r24, 0x08	; 8
    22f2:	ea 01       	movw	r28, r20
    22f4:	09 90       	ld	r0, Y+
    22f6:	ae 01       	movw	r20, r28
    22f8:	e9 01       	movw	r28, r18
    22fa:	09 92       	st	Y+, r0
    22fc:	9e 01       	movw	r18, r28
    22fe:	81 50       	subi	r24, 0x01	; 1
    2300:	c1 f7       	brne	.-16     	; 0x22f2 <_fpadd_parts+0x58>
    2302:	e2 01       	movw	r28, r4
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	11 96       	adiw	r26, 0x01	; 1
    2308:	9c 91       	ld	r25, X
    230a:	89 23       	and	r24, r25
    230c:	81 83       	std	Z+1, r24	; 0x01
    230e:	08 c1       	rjmp	.+528    	; 0x2520 <_fpadd_parts+0x286>
    2310:	92 30       	cpi	r25, 0x02	; 2
    2312:	09 f4       	brne	.+2      	; 0x2316 <_fpadd_parts+0x7c>
    2314:	07 c1       	rjmp	.+526    	; 0x2524 <_fpadd_parts+0x28a>
    2316:	12 96       	adiw	r26, 0x02	; 2
    2318:	2d 90       	ld	r2, X+
    231a:	3c 90       	ld	r3, X
    231c:	13 97       	sbiw	r26, 0x03	; 3
    231e:	eb 01       	movw	r28, r22
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	ad 90       	ld	r10, X+
    2328:	bd 90       	ld	r11, X+
    232a:	cd 90       	ld	r12, X+
    232c:	dc 90       	ld	r13, X
    232e:	17 97       	sbiw	r26, 0x07	; 7
    2330:	ec 80       	ldd	r14, Y+4	; 0x04
    2332:	fd 80       	ldd	r15, Y+5	; 0x05
    2334:	0e 81       	ldd	r16, Y+6	; 0x06
    2336:	1f 81       	ldd	r17, Y+7	; 0x07
    2338:	91 01       	movw	r18, r2
    233a:	28 1b       	sub	r18, r24
    233c:	39 0b       	sbc	r19, r25
    233e:	b9 01       	movw	r22, r18
    2340:	37 ff       	sbrs	r19, 7
    2342:	04 c0       	rjmp	.+8      	; 0x234c <_fpadd_parts+0xb2>
    2344:	66 27       	eor	r22, r22
    2346:	77 27       	eor	r23, r23
    2348:	62 1b       	sub	r22, r18
    234a:	73 0b       	sbc	r23, r19
    234c:	60 32       	cpi	r22, 0x20	; 32
    234e:	71 05       	cpc	r23, r1
    2350:	0c f0       	brlt	.+2      	; 0x2354 <_fpadd_parts+0xba>
    2352:	61 c0       	rjmp	.+194    	; 0x2416 <_fpadd_parts+0x17c>
    2354:	12 16       	cp	r1, r18
    2356:	13 06       	cpc	r1, r19
    2358:	6c f5       	brge	.+90     	; 0x23b4 <_fpadd_parts+0x11a>
    235a:	37 01       	movw	r6, r14
    235c:	48 01       	movw	r8, r16
    235e:	06 2e       	mov	r0, r22
    2360:	04 c0       	rjmp	.+8      	; 0x236a <_fpadd_parts+0xd0>
    2362:	96 94       	lsr	r9
    2364:	87 94       	ror	r8
    2366:	77 94       	ror	r7
    2368:	67 94       	ror	r6
    236a:	0a 94       	dec	r0
    236c:	d2 f7       	brpl	.-12     	; 0x2362 <_fpadd_parts+0xc8>
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	04 c0       	rjmp	.+8      	; 0x2380 <_fpadd_parts+0xe6>
    2378:	22 0f       	add	r18, r18
    237a:	33 1f       	adc	r19, r19
    237c:	44 1f       	adc	r20, r20
    237e:	55 1f       	adc	r21, r21
    2380:	6a 95       	dec	r22
    2382:	d2 f7       	brpl	.-12     	; 0x2378 <_fpadd_parts+0xde>
    2384:	21 50       	subi	r18, 0x01	; 1
    2386:	30 40       	sbci	r19, 0x00	; 0
    2388:	40 40       	sbci	r20, 0x00	; 0
    238a:	50 40       	sbci	r21, 0x00	; 0
    238c:	2e 21       	and	r18, r14
    238e:	3f 21       	and	r19, r15
    2390:	40 23       	and	r20, r16
    2392:	51 23       	and	r21, r17
    2394:	21 15       	cp	r18, r1
    2396:	31 05       	cpc	r19, r1
    2398:	41 05       	cpc	r20, r1
    239a:	51 05       	cpc	r21, r1
    239c:	21 f0       	breq	.+8      	; 0x23a6 <_fpadd_parts+0x10c>
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	79 01       	movw	r14, r18
    23a8:	8a 01       	movw	r16, r20
    23aa:	e6 28       	or	r14, r6
    23ac:	f7 28       	or	r15, r7
    23ae:	08 29       	or	r16, r8
    23b0:	19 29       	or	r17, r9
    23b2:	3c c0       	rjmp	.+120    	; 0x242c <_fpadd_parts+0x192>
    23b4:	23 2b       	or	r18, r19
    23b6:	d1 f1       	breq	.+116    	; 0x242c <_fpadd_parts+0x192>
    23b8:	26 0e       	add	r2, r22
    23ba:	37 1e       	adc	r3, r23
    23bc:	35 01       	movw	r6, r10
    23be:	46 01       	movw	r8, r12
    23c0:	06 2e       	mov	r0, r22
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <_fpadd_parts+0x132>
    23c4:	96 94       	lsr	r9
    23c6:	87 94       	ror	r8
    23c8:	77 94       	ror	r7
    23ca:	67 94       	ror	r6
    23cc:	0a 94       	dec	r0
    23ce:	d2 f7       	brpl	.-12     	; 0x23c4 <_fpadd_parts+0x12a>
    23d0:	21 e0       	ldi	r18, 0x01	; 1
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	04 c0       	rjmp	.+8      	; 0x23e2 <_fpadd_parts+0x148>
    23da:	22 0f       	add	r18, r18
    23dc:	33 1f       	adc	r19, r19
    23de:	44 1f       	adc	r20, r20
    23e0:	55 1f       	adc	r21, r21
    23e2:	6a 95       	dec	r22
    23e4:	d2 f7       	brpl	.-12     	; 0x23da <_fpadd_parts+0x140>
    23e6:	21 50       	subi	r18, 0x01	; 1
    23e8:	30 40       	sbci	r19, 0x00	; 0
    23ea:	40 40       	sbci	r20, 0x00	; 0
    23ec:	50 40       	sbci	r21, 0x00	; 0
    23ee:	2a 21       	and	r18, r10
    23f0:	3b 21       	and	r19, r11
    23f2:	4c 21       	and	r20, r12
    23f4:	5d 21       	and	r21, r13
    23f6:	21 15       	cp	r18, r1
    23f8:	31 05       	cpc	r19, r1
    23fa:	41 05       	cpc	r20, r1
    23fc:	51 05       	cpc	r21, r1
    23fe:	21 f0       	breq	.+8      	; 0x2408 <_fpadd_parts+0x16e>
    2400:	21 e0       	ldi	r18, 0x01	; 1
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	59 01       	movw	r10, r18
    240a:	6a 01       	movw	r12, r20
    240c:	a6 28       	or	r10, r6
    240e:	b7 28       	or	r11, r7
    2410:	c8 28       	or	r12, r8
    2412:	d9 28       	or	r13, r9
    2414:	0b c0       	rjmp	.+22     	; 0x242c <_fpadd_parts+0x192>
    2416:	82 15       	cp	r24, r2
    2418:	93 05       	cpc	r25, r3
    241a:	2c f0       	brlt	.+10     	; 0x2426 <_fpadd_parts+0x18c>
    241c:	1c 01       	movw	r2, r24
    241e:	aa 24       	eor	r10, r10
    2420:	bb 24       	eor	r11, r11
    2422:	65 01       	movw	r12, r10
    2424:	03 c0       	rjmp	.+6      	; 0x242c <_fpadd_parts+0x192>
    2426:	ee 24       	eor	r14, r14
    2428:	ff 24       	eor	r15, r15
    242a:	87 01       	movw	r16, r14
    242c:	11 96       	adiw	r26, 0x01	; 1
    242e:	9c 91       	ld	r25, X
    2430:	d2 01       	movw	r26, r4
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	8c 91       	ld	r24, X
    2436:	98 17       	cp	r25, r24
    2438:	09 f4       	brne	.+2      	; 0x243c <_fpadd_parts+0x1a2>
    243a:	45 c0       	rjmp	.+138    	; 0x24c6 <_fpadd_parts+0x22c>
    243c:	99 23       	and	r25, r25
    243e:	39 f0       	breq	.+14     	; 0x244e <_fpadd_parts+0x1b4>
    2440:	a8 01       	movw	r20, r16
    2442:	97 01       	movw	r18, r14
    2444:	2a 19       	sub	r18, r10
    2446:	3b 09       	sbc	r19, r11
    2448:	4c 09       	sbc	r20, r12
    244a:	5d 09       	sbc	r21, r13
    244c:	06 c0       	rjmp	.+12     	; 0x245a <_fpadd_parts+0x1c0>
    244e:	a6 01       	movw	r20, r12
    2450:	95 01       	movw	r18, r10
    2452:	2e 19       	sub	r18, r14
    2454:	3f 09       	sbc	r19, r15
    2456:	40 0b       	sbc	r20, r16
    2458:	51 0b       	sbc	r21, r17
    245a:	57 fd       	sbrc	r21, 7
    245c:	08 c0       	rjmp	.+16     	; 0x246e <_fpadd_parts+0x1d4>
    245e:	11 82       	std	Z+1, r1	; 0x01
    2460:	33 82       	std	Z+3, r3	; 0x03
    2462:	22 82       	std	Z+2, r2	; 0x02
    2464:	24 83       	std	Z+4, r18	; 0x04
    2466:	35 83       	std	Z+5, r19	; 0x05
    2468:	46 83       	std	Z+6, r20	; 0x06
    246a:	57 83       	std	Z+7, r21	; 0x07
    246c:	1d c0       	rjmp	.+58     	; 0x24a8 <_fpadd_parts+0x20e>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	81 83       	std	Z+1, r24	; 0x01
    2472:	33 82       	std	Z+3, r3	; 0x03
    2474:	22 82       	std	Z+2, r2	; 0x02
    2476:	88 27       	eor	r24, r24
    2478:	99 27       	eor	r25, r25
    247a:	dc 01       	movw	r26, r24
    247c:	82 1b       	sub	r24, r18
    247e:	93 0b       	sbc	r25, r19
    2480:	a4 0b       	sbc	r26, r20
    2482:	b5 0b       	sbc	r27, r21
    2484:	84 83       	std	Z+4, r24	; 0x04
    2486:	95 83       	std	Z+5, r25	; 0x05
    2488:	a6 83       	std	Z+6, r26	; 0x06
    248a:	b7 83       	std	Z+7, r27	; 0x07
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <_fpadd_parts+0x20e>
    248e:	22 0f       	add	r18, r18
    2490:	33 1f       	adc	r19, r19
    2492:	44 1f       	adc	r20, r20
    2494:	55 1f       	adc	r21, r21
    2496:	24 83       	std	Z+4, r18	; 0x04
    2498:	35 83       	std	Z+5, r19	; 0x05
    249a:	46 83       	std	Z+6, r20	; 0x06
    249c:	57 83       	std	Z+7, r21	; 0x07
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	93 83       	std	Z+3, r25	; 0x03
    24a6:	82 83       	std	Z+2, r24	; 0x02
    24a8:	24 81       	ldd	r18, Z+4	; 0x04
    24aa:	35 81       	ldd	r19, Z+5	; 0x05
    24ac:	46 81       	ldd	r20, Z+6	; 0x06
    24ae:	57 81       	ldd	r21, Z+7	; 0x07
    24b0:	da 01       	movw	r26, r20
    24b2:	c9 01       	movw	r24, r18
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	a1 09       	sbc	r26, r1
    24b8:	b1 09       	sbc	r27, r1
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	af 4f       	sbci	r26, 0xFF	; 255
    24c0:	bf 43       	sbci	r27, 0x3F	; 63
    24c2:	28 f3       	brcs	.-54     	; 0x248e <_fpadd_parts+0x1f4>
    24c4:	0b c0       	rjmp	.+22     	; 0x24dc <_fpadd_parts+0x242>
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	33 82       	std	Z+3, r3	; 0x03
    24ca:	22 82       	std	Z+2, r2	; 0x02
    24cc:	ea 0c       	add	r14, r10
    24ce:	fb 1c       	adc	r15, r11
    24d0:	0c 1d       	adc	r16, r12
    24d2:	1d 1d       	adc	r17, r13
    24d4:	e4 82       	std	Z+4, r14	; 0x04
    24d6:	f5 82       	std	Z+5, r15	; 0x05
    24d8:	06 83       	std	Z+6, r16	; 0x06
    24da:	17 83       	std	Z+7, r17	; 0x07
    24dc:	83 e0       	ldi	r24, 0x03	; 3
    24de:	80 83       	st	Z, r24
    24e0:	24 81       	ldd	r18, Z+4	; 0x04
    24e2:	35 81       	ldd	r19, Z+5	; 0x05
    24e4:	46 81       	ldd	r20, Z+6	; 0x06
    24e6:	57 81       	ldd	r21, Z+7	; 0x07
    24e8:	57 ff       	sbrs	r21, 7
    24ea:	1a c0       	rjmp	.+52     	; 0x2520 <_fpadd_parts+0x286>
    24ec:	c9 01       	movw	r24, r18
    24ee:	aa 27       	eor	r26, r26
    24f0:	97 fd       	sbrc	r25, 7
    24f2:	a0 95       	com	r26
    24f4:	ba 2f       	mov	r27, r26
    24f6:	81 70       	andi	r24, 0x01	; 1
    24f8:	90 70       	andi	r25, 0x00	; 0
    24fa:	a0 70       	andi	r26, 0x00	; 0
    24fc:	b0 70       	andi	r27, 0x00	; 0
    24fe:	56 95       	lsr	r21
    2500:	47 95       	ror	r20
    2502:	37 95       	ror	r19
    2504:	27 95       	ror	r18
    2506:	82 2b       	or	r24, r18
    2508:	93 2b       	or	r25, r19
    250a:	a4 2b       	or	r26, r20
    250c:	b5 2b       	or	r27, r21
    250e:	84 83       	std	Z+4, r24	; 0x04
    2510:	95 83       	std	Z+5, r25	; 0x05
    2512:	a6 83       	std	Z+6, r26	; 0x06
    2514:	b7 83       	std	Z+7, r27	; 0x07
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	93 83       	std	Z+3, r25	; 0x03
    251e:	82 83       	std	Z+2, r24	; 0x02
    2520:	df 01       	movw	r26, r30
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <_fpadd_parts+0x28c>
    2524:	d2 01       	movw	r26, r4
    2526:	cd 01       	movw	r24, r26
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	e2 e1       	ldi	r30, 0x12	; 18
    252e:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__>

00002532 <__subsf3>:
    2532:	a0 e2       	ldi	r26, 0x20	; 32
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
    253e:	69 83       	std	Y+1, r22	; 0x01
    2540:	7a 83       	std	Y+2, r23	; 0x02
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	2d 83       	std	Y+5, r18	; 0x05
    2548:	3e 83       	std	Y+6, r19	; 0x06
    254a:	4f 83       	std	Y+7, r20	; 0x07
    254c:	58 87       	std	Y+8, r21	; 0x08
    254e:	e9 e0       	ldi	r30, 0x09	; 9
    2550:	ee 2e       	mov	r14, r30
    2552:	f1 2c       	mov	r15, r1
    2554:	ec 0e       	add	r14, r28
    2556:	fd 1e       	adc	r15, r29
    2558:	ce 01       	movw	r24, r28
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	b7 01       	movw	r22, r14
    255e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2562:	8e 01       	movw	r16, r28
    2564:	0f 5e       	subi	r16, 0xEF	; 239
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	ce 01       	movw	r24, r28
    256a:	05 96       	adiw	r24, 0x05	; 5
    256c:	b8 01       	movw	r22, r16
    256e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2572:	8a 89       	ldd	r24, Y+18	; 0x12
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	89 27       	eor	r24, r25
    2578:	8a 8b       	std	Y+18, r24	; 0x12
    257a:	c7 01       	movw	r24, r14
    257c:	b8 01       	movw	r22, r16
    257e:	ae 01       	movw	r20, r28
    2580:	47 5e       	subi	r20, 0xE7	; 231
    2582:	5f 4f       	sbci	r21, 0xFF	; 255
    2584:	0e 94 4d 11 	call	0x229a	; 0x229a <_fpadd_parts>
    2588:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    258c:	a0 96       	adiw	r28, 0x20	; 32
    258e:	e6 e0       	ldi	r30, 0x06	; 6
    2590:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

00002594 <__addsf3>:
    2594:	a0 e2       	ldi	r26, 0x20	; 32
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e0 ed       	ldi	r30, 0xD0	; 208
    259a:	f2 e1       	ldi	r31, 0x12	; 18
    259c:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
    25a0:	69 83       	std	Y+1, r22	; 0x01
    25a2:	7a 83       	std	Y+2, r23	; 0x02
    25a4:	8b 83       	std	Y+3, r24	; 0x03
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	2d 83       	std	Y+5, r18	; 0x05
    25aa:	3e 83       	std	Y+6, r19	; 0x06
    25ac:	4f 83       	std	Y+7, r20	; 0x07
    25ae:	58 87       	std	Y+8, r21	; 0x08
    25b0:	f9 e0       	ldi	r31, 0x09	; 9
    25b2:	ef 2e       	mov	r14, r31
    25b4:	f1 2c       	mov	r15, r1
    25b6:	ec 0e       	add	r14, r28
    25b8:	fd 1e       	adc	r15, r29
    25ba:	ce 01       	movw	r24, r28
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	b7 01       	movw	r22, r14
    25c0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    25c4:	8e 01       	movw	r16, r28
    25c6:	0f 5e       	subi	r16, 0xEF	; 239
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	ce 01       	movw	r24, r28
    25cc:	05 96       	adiw	r24, 0x05	; 5
    25ce:	b8 01       	movw	r22, r16
    25d0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    25d4:	c7 01       	movw	r24, r14
    25d6:	b8 01       	movw	r22, r16
    25d8:	ae 01       	movw	r20, r28
    25da:	47 5e       	subi	r20, 0xE7	; 231
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	0e 94 4d 11 	call	0x229a	; 0x229a <_fpadd_parts>
    25e2:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    25e6:	a0 96       	adiw	r28, 0x20	; 32
    25e8:	e6 e0       	ldi	r30, 0x06	; 6
    25ea:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

000025ee <__mulsf3>:
    25ee:	a0 e2       	ldi	r26, 0x20	; 32
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ed ef       	ldi	r30, 0xFD	; 253
    25f4:	f2 e1       	ldi	r31, 0x12	; 18
    25f6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__>
    25fa:	69 83       	std	Y+1, r22	; 0x01
    25fc:	7a 83       	std	Y+2, r23	; 0x02
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    2600:	9c 83       	std	Y+4, r25	; 0x04
    2602:	2d 83       	std	Y+5, r18	; 0x05
    2604:	3e 83       	std	Y+6, r19	; 0x06
    2606:	4f 83       	std	Y+7, r20	; 0x07
    2608:	58 87       	std	Y+8, r21	; 0x08
    260a:	ce 01       	movw	r24, r28
    260c:	01 96       	adiw	r24, 0x01	; 1
    260e:	be 01       	movw	r22, r28
    2610:	67 5f       	subi	r22, 0xF7	; 247
    2612:	7f 4f       	sbci	r23, 0xFF	; 255
    2614:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2618:	ce 01       	movw	r24, r28
    261a:	05 96       	adiw	r24, 0x05	; 5
    261c:	be 01       	movw	r22, r28
    261e:	6f 5e       	subi	r22, 0xEF	; 239
    2620:	7f 4f       	sbci	r23, 0xFF	; 255
    2622:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2626:	99 85       	ldd	r25, Y+9	; 0x09
    2628:	92 30       	cpi	r25, 0x02	; 2
    262a:	88 f0       	brcs	.+34     	; 0x264e <__mulsf3+0x60>
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	c8 f0       	brcs	.+50     	; 0x2664 <__mulsf3+0x76>
    2632:	94 30       	cpi	r25, 0x04	; 4
    2634:	19 f4       	brne	.+6      	; 0x263c <__mulsf3+0x4e>
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	51 f4       	brne	.+20     	; 0x264e <__mulsf3+0x60>
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <__mulsf3+0x56>
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	29 f4       	brne	.+10     	; 0x264a <__mulsf3+0x5c>
    2640:	92 30       	cpi	r25, 0x02	; 2
    2642:	81 f4       	brne	.+32     	; 0x2664 <__mulsf3+0x76>
    2644:	87 e0       	ldi	r24, 0x07	; 7
    2646:	92 e0       	ldi	r25, 0x02	; 2
    2648:	c6 c0       	rjmp	.+396    	; 0x27d6 <__mulsf3+0x1e8>
    264a:	92 30       	cpi	r25, 0x02	; 2
    264c:	49 f4       	brne	.+18     	; 0x2660 <__mulsf3+0x72>
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	9a 85       	ldd	r25, Y+10	; 0x0a
    2652:	8a 89       	ldd	r24, Y+18	; 0x12
    2654:	98 13       	cpse	r25, r24
    2656:	21 e0       	ldi	r18, 0x01	; 1
    2658:	2a 87       	std	Y+10, r18	; 0x0a
    265a:	ce 01       	movw	r24, r28
    265c:	09 96       	adiw	r24, 0x09	; 9
    265e:	bb c0       	rjmp	.+374    	; 0x27d6 <__mulsf3+0x1e8>
    2660:	82 30       	cpi	r24, 0x02	; 2
    2662:	49 f4       	brne	.+18     	; 0x2676 <__mulsf3+0x88>
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	8a 89       	ldd	r24, Y+18	; 0x12
    266a:	98 13       	cpse	r25, r24
    266c:	21 e0       	ldi	r18, 0x01	; 1
    266e:	2a 8b       	std	Y+18, r18	; 0x12
    2670:	ce 01       	movw	r24, r28
    2672:	41 96       	adiw	r24, 0x11	; 17
    2674:	b0 c0       	rjmp	.+352    	; 0x27d6 <__mulsf3+0x1e8>
    2676:	2d 84       	ldd	r2, Y+13	; 0x0d
    2678:	3e 84       	ldd	r3, Y+14	; 0x0e
    267a:	4f 84       	ldd	r4, Y+15	; 0x0f
    267c:	58 88       	ldd	r5, Y+16	; 0x10
    267e:	6d 88       	ldd	r6, Y+21	; 0x15
    2680:	7e 88       	ldd	r7, Y+22	; 0x16
    2682:	8f 88       	ldd	r8, Y+23	; 0x17
    2684:	98 8c       	ldd	r9, Y+24	; 0x18
    2686:	ee 24       	eor	r14, r14
    2688:	ff 24       	eor	r15, r15
    268a:	87 01       	movw	r16, r14
    268c:	aa 24       	eor	r10, r10
    268e:	bb 24       	eor	r11, r11
    2690:	65 01       	movw	r12, r10
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	e0 e0       	ldi	r30, 0x00	; 0
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	c1 01       	movw	r24, r2
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	90 70       	andi	r25, 0x00	; 0
    26a4:	89 2b       	or	r24, r25
    26a6:	e9 f0       	breq	.+58     	; 0x26e2 <__mulsf3+0xf4>
    26a8:	e6 0c       	add	r14, r6
    26aa:	f7 1c       	adc	r15, r7
    26ac:	08 1d       	adc	r16, r8
    26ae:	19 1d       	adc	r17, r9
    26b0:	9a 01       	movw	r18, r20
    26b2:	ab 01       	movw	r20, r22
    26b4:	2a 0d       	add	r18, r10
    26b6:	3b 1d       	adc	r19, r11
    26b8:	4c 1d       	adc	r20, r12
    26ba:	5d 1d       	adc	r21, r13
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e0       	ldi	r26, 0x00	; 0
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e6 14       	cp	r14, r6
    26c6:	f7 04       	cpc	r15, r7
    26c8:	08 05       	cpc	r16, r8
    26ca:	19 05       	cpc	r17, r9
    26cc:	20 f4       	brcc	.+8      	; 0x26d6 <__mulsf3+0xe8>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	ba 01       	movw	r22, r20
    26d8:	a9 01       	movw	r20, r18
    26da:	48 0f       	add	r20, r24
    26dc:	59 1f       	adc	r21, r25
    26de:	6a 1f       	adc	r22, r26
    26e0:	7b 1f       	adc	r23, r27
    26e2:	aa 0c       	add	r10, r10
    26e4:	bb 1c       	adc	r11, r11
    26e6:	cc 1c       	adc	r12, r12
    26e8:	dd 1c       	adc	r13, r13
    26ea:	97 fe       	sbrs	r9, 7
    26ec:	08 c0       	rjmp	.+16     	; 0x26fe <__mulsf3+0x110>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	a8 2a       	or	r10, r24
    26f8:	b9 2a       	or	r11, r25
    26fa:	ca 2a       	or	r12, r26
    26fc:	db 2a       	or	r13, r27
    26fe:	31 96       	adiw	r30, 0x01	; 1
    2700:	e0 32       	cpi	r30, 0x20	; 32
    2702:	f1 05       	cpc	r31, r1
    2704:	49 f0       	breq	.+18     	; 0x2718 <__mulsf3+0x12a>
    2706:	66 0c       	add	r6, r6
    2708:	77 1c       	adc	r7, r7
    270a:	88 1c       	adc	r8, r8
    270c:	99 1c       	adc	r9, r9
    270e:	56 94       	lsr	r5
    2710:	47 94       	ror	r4
    2712:	37 94       	ror	r3
    2714:	27 94       	ror	r2
    2716:	c3 cf       	rjmp	.-122    	; 0x269e <__mulsf3+0xb0>
    2718:	fa 85       	ldd	r31, Y+10	; 0x0a
    271a:	ea 89       	ldd	r30, Y+18	; 0x12
    271c:	2b 89       	ldd	r18, Y+19	; 0x13
    271e:	3c 89       	ldd	r19, Y+20	; 0x14
    2720:	8b 85       	ldd	r24, Y+11	; 0x0b
    2722:	9c 85       	ldd	r25, Y+12	; 0x0c
    2724:	28 0f       	add	r18, r24
    2726:	39 1f       	adc	r19, r25
    2728:	2e 5f       	subi	r18, 0xFE	; 254
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	17 c0       	rjmp	.+46     	; 0x275c <__mulsf3+0x16e>
    272e:	ca 01       	movw	r24, r20
    2730:	81 70       	andi	r24, 0x01	; 1
    2732:	90 70       	andi	r25, 0x00	; 0
    2734:	89 2b       	or	r24, r25
    2736:	61 f0       	breq	.+24     	; 0x2750 <__mulsf3+0x162>
    2738:	16 95       	lsr	r17
    273a:	07 95       	ror	r16
    273c:	f7 94       	ror	r15
    273e:	e7 94       	ror	r14
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	a0 e0       	ldi	r26, 0x00	; 0
    2746:	b0 e8       	ldi	r27, 0x80	; 128
    2748:	e8 2a       	or	r14, r24
    274a:	f9 2a       	or	r15, r25
    274c:	0a 2b       	or	r16, r26
    274e:	1b 2b       	or	r17, r27
    2750:	76 95       	lsr	r23
    2752:	67 95       	ror	r22
    2754:	57 95       	ror	r21
    2756:	47 95       	ror	r20
    2758:	2f 5f       	subi	r18, 0xFF	; 255
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	77 fd       	sbrc	r23, 7
    275e:	e7 cf       	rjmp	.-50     	; 0x272e <__mulsf3+0x140>
    2760:	0c c0       	rjmp	.+24     	; 0x277a <__mulsf3+0x18c>
    2762:	44 0f       	add	r20, r20
    2764:	55 1f       	adc	r21, r21
    2766:	66 1f       	adc	r22, r22
    2768:	77 1f       	adc	r23, r23
    276a:	17 fd       	sbrc	r17, 7
    276c:	41 60       	ori	r20, 0x01	; 1
    276e:	ee 0c       	add	r14, r14
    2770:	ff 1c       	adc	r15, r15
    2772:	00 1f       	adc	r16, r16
    2774:	11 1f       	adc	r17, r17
    2776:	21 50       	subi	r18, 0x01	; 1
    2778:	30 40       	sbci	r19, 0x00	; 0
    277a:	40 30       	cpi	r20, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	59 07       	cpc	r21, r25
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	69 07       	cpc	r22, r25
    2784:	90 e4       	ldi	r25, 0x40	; 64
    2786:	79 07       	cpc	r23, r25
    2788:	60 f3       	brcs	.-40     	; 0x2762 <__mulsf3+0x174>
    278a:	2b 8f       	std	Y+27, r18	; 0x1b
    278c:	3c 8f       	std	Y+28, r19	; 0x1c
    278e:	db 01       	movw	r26, r22
    2790:	ca 01       	movw	r24, r20
    2792:	8f 77       	andi	r24, 0x7F	; 127
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	a0 70       	andi	r26, 0x00	; 0
    2798:	b0 70       	andi	r27, 0x00	; 0
    279a:	80 34       	cpi	r24, 0x40	; 64
    279c:	91 05       	cpc	r25, r1
    279e:	a1 05       	cpc	r26, r1
    27a0:	b1 05       	cpc	r27, r1
    27a2:	61 f4       	brne	.+24     	; 0x27bc <__mulsf3+0x1ce>
    27a4:	47 fd       	sbrc	r20, 7
    27a6:	0a c0       	rjmp	.+20     	; 0x27bc <__mulsf3+0x1ce>
    27a8:	e1 14       	cp	r14, r1
    27aa:	f1 04       	cpc	r15, r1
    27ac:	01 05       	cpc	r16, r1
    27ae:	11 05       	cpc	r17, r1
    27b0:	29 f0       	breq	.+10     	; 0x27bc <__mulsf3+0x1ce>
    27b2:	40 5c       	subi	r20, 0xC0	; 192
    27b4:	5f 4f       	sbci	r21, 0xFF	; 255
    27b6:	6f 4f       	sbci	r22, 0xFF	; 255
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	40 78       	andi	r20, 0x80	; 128
    27bc:	1a 8e       	std	Y+26, r1	; 0x1a
    27be:	fe 17       	cp	r31, r30
    27c0:	11 f0       	breq	.+4      	; 0x27c6 <__mulsf3+0x1d8>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	8a 8f       	std	Y+26, r24	; 0x1a
    27c6:	4d 8f       	std	Y+29, r20	; 0x1d
    27c8:	5e 8f       	std	Y+30, r21	; 0x1e
    27ca:	6f 8f       	std	Y+31, r22	; 0x1f
    27cc:	78 a3       	std	Y+32, r23	; 0x20
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	89 8f       	std	Y+25, r24	; 0x19
    27d2:	ce 01       	movw	r24, r28
    27d4:	49 96       	adiw	r24, 0x19	; 25
    27d6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    27da:	a0 96       	adiw	r28, 0x20	; 32
    27dc:	e2 e1       	ldi	r30, 0x12	; 18
    27de:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__>

000027e2 <__divsf3>:
    27e2:	a8 e1       	ldi	r26, 0x18	; 24
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e7 ef       	ldi	r30, 0xF7	; 247
    27e8:	f3 e1       	ldi	r31, 0x13	; 19
    27ea:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x10>
    27ee:	69 83       	std	Y+1, r22	; 0x01
    27f0:	7a 83       	std	Y+2, r23	; 0x02
    27f2:	8b 83       	std	Y+3, r24	; 0x03
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	2d 83       	std	Y+5, r18	; 0x05
    27f8:	3e 83       	std	Y+6, r19	; 0x06
    27fa:	4f 83       	std	Y+7, r20	; 0x07
    27fc:	58 87       	std	Y+8, r21	; 0x08
    27fe:	b9 e0       	ldi	r27, 0x09	; 9
    2800:	eb 2e       	mov	r14, r27
    2802:	f1 2c       	mov	r15, r1
    2804:	ec 0e       	add	r14, r28
    2806:	fd 1e       	adc	r15, r29
    2808:	ce 01       	movw	r24, r28
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	b7 01       	movw	r22, r14
    280e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2812:	8e 01       	movw	r16, r28
    2814:	0f 5e       	subi	r16, 0xEF	; 239
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	ce 01       	movw	r24, r28
    281a:	05 96       	adiw	r24, 0x05	; 5
    281c:	b8 01       	movw	r22, r16
    281e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2822:	29 85       	ldd	r18, Y+9	; 0x09
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	08 f4       	brcc	.+2      	; 0x282a <__divsf3+0x48>
    2828:	7e c0       	rjmp	.+252    	; 0x2926 <__divsf3+0x144>
    282a:	39 89       	ldd	r19, Y+17	; 0x11
    282c:	32 30       	cpi	r19, 0x02	; 2
    282e:	10 f4       	brcc	.+4      	; 0x2834 <__divsf3+0x52>
    2830:	b8 01       	movw	r22, r16
    2832:	7c c0       	rjmp	.+248    	; 0x292c <__divsf3+0x14a>
    2834:	8a 85       	ldd	r24, Y+10	; 0x0a
    2836:	9a 89       	ldd	r25, Y+18	; 0x12
    2838:	89 27       	eor	r24, r25
    283a:	8a 87       	std	Y+10, r24	; 0x0a
    283c:	24 30       	cpi	r18, 0x04	; 4
    283e:	11 f0       	breq	.+4      	; 0x2844 <__divsf3+0x62>
    2840:	22 30       	cpi	r18, 0x02	; 2
    2842:	31 f4       	brne	.+12     	; 0x2850 <__divsf3+0x6e>
    2844:	23 17       	cp	r18, r19
    2846:	09 f0       	breq	.+2      	; 0x284a <__divsf3+0x68>
    2848:	6e c0       	rjmp	.+220    	; 0x2926 <__divsf3+0x144>
    284a:	67 e0       	ldi	r22, 0x07	; 7
    284c:	72 e0       	ldi	r23, 0x02	; 2
    284e:	6e c0       	rjmp	.+220    	; 0x292c <__divsf3+0x14a>
    2850:	34 30       	cpi	r19, 0x04	; 4
    2852:	39 f4       	brne	.+14     	; 0x2862 <__divsf3+0x80>
    2854:	1d 86       	std	Y+13, r1	; 0x0d
    2856:	1e 86       	std	Y+14, r1	; 0x0e
    2858:	1f 86       	std	Y+15, r1	; 0x0f
    285a:	18 8a       	std	Y+16, r1	; 0x10
    285c:	1c 86       	std	Y+12, r1	; 0x0c
    285e:	1b 86       	std	Y+11, r1	; 0x0b
    2860:	04 c0       	rjmp	.+8      	; 0x286a <__divsf3+0x88>
    2862:	32 30       	cpi	r19, 0x02	; 2
    2864:	21 f4       	brne	.+8      	; 0x286e <__divsf3+0x8c>
    2866:	84 e0       	ldi	r24, 0x04	; 4
    2868:	89 87       	std	Y+9, r24	; 0x09
    286a:	b7 01       	movw	r22, r14
    286c:	5f c0       	rjmp	.+190    	; 0x292c <__divsf3+0x14a>
    286e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2870:	3c 85       	ldd	r19, Y+12	; 0x0c
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	9c 89       	ldd	r25, Y+20	; 0x14
    2876:	28 1b       	sub	r18, r24
    2878:	39 0b       	sbc	r19, r25
    287a:	3c 87       	std	Y+12, r19	; 0x0c
    287c:	2b 87       	std	Y+11, r18	; 0x0b
    287e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2880:	fe 84       	ldd	r15, Y+14	; 0x0e
    2882:	0f 85       	ldd	r16, Y+15	; 0x0f
    2884:	18 89       	ldd	r17, Y+16	; 0x10
    2886:	ad 88       	ldd	r10, Y+21	; 0x15
    2888:	be 88       	ldd	r11, Y+22	; 0x16
    288a:	cf 88       	ldd	r12, Y+23	; 0x17
    288c:	d8 8c       	ldd	r13, Y+24	; 0x18
    288e:	ea 14       	cp	r14, r10
    2890:	fb 04       	cpc	r15, r11
    2892:	0c 05       	cpc	r16, r12
    2894:	1d 05       	cpc	r17, r13
    2896:	40 f4       	brcc	.+16     	; 0x28a8 <__divsf3+0xc6>
    2898:	ee 0c       	add	r14, r14
    289a:	ff 1c       	adc	r15, r15
    289c:	00 1f       	adc	r16, r16
    289e:	11 1f       	adc	r17, r17
    28a0:	21 50       	subi	r18, 0x01	; 1
    28a2:	30 40       	sbci	r19, 0x00	; 0
    28a4:	3c 87       	std	Y+12, r19	; 0x0c
    28a6:	2b 87       	std	Y+11, r18	; 0x0b
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e0       	ldi	r26, 0x00	; 0
    28b6:	b0 e4       	ldi	r27, 0x40	; 64
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	ea 14       	cp	r14, r10
    28be:	fb 04       	cpc	r15, r11
    28c0:	0c 05       	cpc	r16, r12
    28c2:	1d 05       	cpc	r17, r13
    28c4:	40 f0       	brcs	.+16     	; 0x28d6 <__divsf3+0xf4>
    28c6:	28 2b       	or	r18, r24
    28c8:	39 2b       	or	r19, r25
    28ca:	4a 2b       	or	r20, r26
    28cc:	5b 2b       	or	r21, r27
    28ce:	ea 18       	sub	r14, r10
    28d0:	fb 08       	sbc	r15, r11
    28d2:	0c 09       	sbc	r16, r12
    28d4:	1d 09       	sbc	r17, r13
    28d6:	b6 95       	lsr	r27
    28d8:	a7 95       	ror	r26
    28da:	97 95       	ror	r25
    28dc:	87 95       	ror	r24
    28de:	ee 0c       	add	r14, r14
    28e0:	ff 1c       	adc	r15, r15
    28e2:	00 1f       	adc	r16, r16
    28e4:	11 1f       	adc	r17, r17
    28e6:	6f 5f       	subi	r22, 0xFF	; 255
    28e8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ea:	6f 31       	cpi	r22, 0x1F	; 31
    28ec:	71 05       	cpc	r23, r1
    28ee:	31 f7       	brne	.-52     	; 0x28bc <__divsf3+0xda>
    28f0:	da 01       	movw	r26, r20
    28f2:	c9 01       	movw	r24, r18
    28f4:	8f 77       	andi	r24, 0x7F	; 127
    28f6:	90 70       	andi	r25, 0x00	; 0
    28f8:	a0 70       	andi	r26, 0x00	; 0
    28fa:	b0 70       	andi	r27, 0x00	; 0
    28fc:	80 34       	cpi	r24, 0x40	; 64
    28fe:	91 05       	cpc	r25, r1
    2900:	a1 05       	cpc	r26, r1
    2902:	b1 05       	cpc	r27, r1
    2904:	61 f4       	brne	.+24     	; 0x291e <__divsf3+0x13c>
    2906:	27 fd       	sbrc	r18, 7
    2908:	0a c0       	rjmp	.+20     	; 0x291e <__divsf3+0x13c>
    290a:	e1 14       	cp	r14, r1
    290c:	f1 04       	cpc	r15, r1
    290e:	01 05       	cpc	r16, r1
    2910:	11 05       	cpc	r17, r1
    2912:	29 f0       	breq	.+10     	; 0x291e <__divsf3+0x13c>
    2914:	20 5c       	subi	r18, 0xC0	; 192
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	4f 4f       	sbci	r20, 0xFF	; 255
    291a:	5f 4f       	sbci	r21, 0xFF	; 255
    291c:	20 78       	andi	r18, 0x80	; 128
    291e:	2d 87       	std	Y+13, r18	; 0x0d
    2920:	3e 87       	std	Y+14, r19	; 0x0e
    2922:	4f 87       	std	Y+15, r20	; 0x0f
    2924:	58 8b       	std	Y+16, r21	; 0x10
    2926:	be 01       	movw	r22, r28
    2928:	67 5f       	subi	r22, 0xF7	; 247
    292a:	7f 4f       	sbci	r23, 0xFF	; 255
    292c:	cb 01       	movw	r24, r22
    292e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    2932:	68 96       	adiw	r28, 0x18	; 24
    2934:	ea e0       	ldi	r30, 0x0A	; 10
    2936:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x10>

0000293a <__gtsf2>:
    293a:	a8 e1       	ldi	r26, 0x18	; 24
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e3 ea       	ldi	r30, 0xA3	; 163
    2940:	f4 e1       	ldi	r31, 0x14	; 20
    2942:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
    2946:	69 83       	std	Y+1, r22	; 0x01
    2948:	7a 83       	std	Y+2, r23	; 0x02
    294a:	8b 83       	std	Y+3, r24	; 0x03
    294c:	9c 83       	std	Y+4, r25	; 0x04
    294e:	2d 83       	std	Y+5, r18	; 0x05
    2950:	3e 83       	std	Y+6, r19	; 0x06
    2952:	4f 83       	std	Y+7, r20	; 0x07
    2954:	58 87       	std	Y+8, r21	; 0x08
    2956:	89 e0       	ldi	r24, 0x09	; 9
    2958:	e8 2e       	mov	r14, r24
    295a:	f1 2c       	mov	r15, r1
    295c:	ec 0e       	add	r14, r28
    295e:	fd 1e       	adc	r15, r29
    2960:	ce 01       	movw	r24, r28
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    296a:	8e 01       	movw	r16, r28
    296c:	0f 5e       	subi	r16, 0xEF	; 239
    296e:	1f 4f       	sbci	r17, 0xFF	; 255
    2970:	ce 01       	movw	r24, r28
    2972:	05 96       	adiw	r24, 0x05	; 5
    2974:	b8 01       	movw	r22, r16
    2976:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    297a:	89 85       	ldd	r24, Y+9	; 0x09
    297c:	82 30       	cpi	r24, 0x02	; 2
    297e:	40 f0       	brcs	.+16     	; 0x2990 <__gtsf2+0x56>
    2980:	89 89       	ldd	r24, Y+17	; 0x11
    2982:	82 30       	cpi	r24, 0x02	; 2
    2984:	28 f0       	brcs	.+10     	; 0x2990 <__gtsf2+0x56>
    2986:	c7 01       	movw	r24, r14
    2988:	b8 01       	movw	r22, r16
    298a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fpcmp_parts_f>
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <__gtsf2+0x58>
    2990:	8f ef       	ldi	r24, 0xFF	; 255
    2992:	68 96       	adiw	r28, 0x18	; 24
    2994:	e6 e0       	ldi	r30, 0x06	; 6
    2996:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

0000299a <__gesf2>:
    299a:	a8 e1       	ldi	r26, 0x18	; 24
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e3 ed       	ldi	r30, 0xD3	; 211
    29a0:	f4 e1       	ldi	r31, 0x14	; 20
    29a2:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
    29a6:	69 83       	std	Y+1, r22	; 0x01
    29a8:	7a 83       	std	Y+2, r23	; 0x02
    29aa:	8b 83       	std	Y+3, r24	; 0x03
    29ac:	9c 83       	std	Y+4, r25	; 0x04
    29ae:	2d 83       	std	Y+5, r18	; 0x05
    29b0:	3e 83       	std	Y+6, r19	; 0x06
    29b2:	4f 83       	std	Y+7, r20	; 0x07
    29b4:	58 87       	std	Y+8, r21	; 0x08
    29b6:	89 e0       	ldi	r24, 0x09	; 9
    29b8:	e8 2e       	mov	r14, r24
    29ba:	f1 2c       	mov	r15, r1
    29bc:	ec 0e       	add	r14, r28
    29be:	fd 1e       	adc	r15, r29
    29c0:	ce 01       	movw	r24, r28
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	b7 01       	movw	r22, r14
    29c6:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    29ca:	8e 01       	movw	r16, r28
    29cc:	0f 5e       	subi	r16, 0xEF	; 239
    29ce:	1f 4f       	sbci	r17, 0xFF	; 255
    29d0:	ce 01       	movw	r24, r28
    29d2:	05 96       	adiw	r24, 0x05	; 5
    29d4:	b8 01       	movw	r22, r16
    29d6:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	82 30       	cpi	r24, 0x02	; 2
    29de:	40 f0       	brcs	.+16     	; 0x29f0 <__gesf2+0x56>
    29e0:	89 89       	ldd	r24, Y+17	; 0x11
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	28 f0       	brcs	.+10     	; 0x29f0 <__gesf2+0x56>
    29e6:	c7 01       	movw	r24, r14
    29e8:	b8 01       	movw	r22, r16
    29ea:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fpcmp_parts_f>
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <__gesf2+0x58>
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	68 96       	adiw	r28, 0x18	; 24
    29f4:	e6 e0       	ldi	r30, 0x06	; 6
    29f6:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

000029fa <__ltsf2>:
    29fa:	a8 e1       	ldi	r26, 0x18	; 24
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x18>
    2a06:	69 83       	std	Y+1, r22	; 0x01
    2a08:	7a 83       	std	Y+2, r23	; 0x02
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	2d 83       	std	Y+5, r18	; 0x05
    2a10:	3e 83       	std	Y+6, r19	; 0x06
    2a12:	4f 83       	std	Y+7, r20	; 0x07
    2a14:	58 87       	std	Y+8, r21	; 0x08
    2a16:	89 e0       	ldi	r24, 0x09	; 9
    2a18:	e8 2e       	mov	r14, r24
    2a1a:	f1 2c       	mov	r15, r1
    2a1c:	ec 0e       	add	r14, r28
    2a1e:	fd 1e       	adc	r15, r29
    2a20:	ce 01       	movw	r24, r28
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	b7 01       	movw	r22, r14
    2a26:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2a2a:	8e 01       	movw	r16, r28
    2a2c:	0f 5e       	subi	r16, 0xEF	; 239
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	ce 01       	movw	r24, r28
    2a32:	05 96       	adiw	r24, 0x05	; 5
    2a34:	b8 01       	movw	r22, r16
    2a36:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	40 f0       	brcs	.+16     	; 0x2a50 <__ltsf2+0x56>
    2a40:	89 89       	ldd	r24, Y+17	; 0x11
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	28 f0       	brcs	.+10     	; 0x2a50 <__ltsf2+0x56>
    2a46:	c7 01       	movw	r24, r14
    2a48:	b8 01       	movw	r22, r16
    2a4a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__fpcmp_parts_f>
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <__ltsf2+0x58>
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	68 96       	adiw	r28, 0x18	; 24
    2a54:	e6 e0       	ldi	r30, 0x06	; 6
    2a56:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x18>

00002a5a <__floatsisf>:
    2a5a:	a8 e0       	ldi	r26, 0x08	; 8
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e3 e3       	ldi	r30, 0x33	; 51
    2a60:	f5 e1       	ldi	r31, 0x15	; 21
    2a62:	0c 94 86 18 	jmp	0x310c	; 0x310c <__prologue_saves__+0x12>
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	83 e0       	ldi	r24, 0x03	; 3
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	da 01       	movw	r26, r20
    2a70:	c9 01       	movw	r24, r18
    2a72:	88 27       	eor	r24, r24
    2a74:	b7 fd       	sbrc	r27, 7
    2a76:	83 95       	inc	r24
    2a78:	99 27       	eor	r25, r25
    2a7a:	aa 27       	eor	r26, r26
    2a7c:	bb 27       	eor	r27, r27
    2a7e:	b8 2e       	mov	r11, r24
    2a80:	21 15       	cp	r18, r1
    2a82:	31 05       	cpc	r19, r1
    2a84:	41 05       	cpc	r20, r1
    2a86:	51 05       	cpc	r21, r1
    2a88:	19 f4       	brne	.+6      	; 0x2a90 <__floatsisf+0x36>
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	3a c0       	rjmp	.+116    	; 0x2b04 <__floatsisf+0xaa>
    2a90:	88 23       	and	r24, r24
    2a92:	a9 f0       	breq	.+42     	; 0x2abe <__floatsisf+0x64>
    2a94:	20 30       	cpi	r18, 0x00	; 0
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	38 07       	cpc	r19, r24
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	48 07       	cpc	r20, r24
    2a9e:	80 e8       	ldi	r24, 0x80	; 128
    2aa0:	58 07       	cpc	r21, r24
    2aa2:	29 f4       	brne	.+10     	; 0x2aae <__floatsisf+0x54>
    2aa4:	60 e0       	ldi	r22, 0x00	; 0
    2aa6:	70 e0       	ldi	r23, 0x00	; 0
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	9f ec       	ldi	r25, 0xCF	; 207
    2aac:	30 c0       	rjmp	.+96     	; 0x2b0e <__floatsisf+0xb4>
    2aae:	ee 24       	eor	r14, r14
    2ab0:	ff 24       	eor	r15, r15
    2ab2:	87 01       	movw	r16, r14
    2ab4:	e2 1a       	sub	r14, r18
    2ab6:	f3 0a       	sbc	r15, r19
    2ab8:	04 0b       	sbc	r16, r20
    2aba:	15 0b       	sbc	r17, r21
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <__floatsisf+0x68>
    2abe:	79 01       	movw	r14, r18
    2ac0:	8a 01       	movw	r16, r20
    2ac2:	8e e1       	ldi	r24, 0x1E	; 30
    2ac4:	c8 2e       	mov	r12, r24
    2ac6:	d1 2c       	mov	r13, r1
    2ac8:	dc 82       	std	Y+4, r13	; 0x04
    2aca:	cb 82       	std	Y+3, r12	; 0x03
    2acc:	ed 82       	std	Y+5, r14	; 0x05
    2ace:	fe 82       	std	Y+6, r15	; 0x06
    2ad0:	0f 83       	std	Y+7, r16	; 0x07
    2ad2:	18 87       	std	Y+8, r17	; 0x08
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	b7 01       	movw	r22, r14
    2ad8:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__clzsi2>
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	18 16       	cp	r1, r24
    2ae0:	19 06       	cpc	r1, r25
    2ae2:	84 f4       	brge	.+32     	; 0x2b04 <__floatsisf+0xaa>
    2ae4:	08 2e       	mov	r0, r24
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <__floatsisf+0x96>
    2ae8:	ee 0c       	add	r14, r14
    2aea:	ff 1c       	adc	r15, r15
    2aec:	00 1f       	adc	r16, r16
    2aee:	11 1f       	adc	r17, r17
    2af0:	0a 94       	dec	r0
    2af2:	d2 f7       	brpl	.-12     	; 0x2ae8 <__floatsisf+0x8e>
    2af4:	ed 82       	std	Y+5, r14	; 0x05
    2af6:	fe 82       	std	Y+6, r15	; 0x06
    2af8:	0f 83       	std	Y+7, r16	; 0x07
    2afa:	18 87       	std	Y+8, r17	; 0x08
    2afc:	c8 1a       	sub	r12, r24
    2afe:	d9 0a       	sbc	r13, r25
    2b00:	dc 82       	std	Y+4, r13	; 0x04
    2b02:	cb 82       	std	Y+3, r12	; 0x03
    2b04:	ba 82       	std	Y+2, r11	; 0x02
    2b06:	ce 01       	movw	r24, r28
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    2b0e:	28 96       	adiw	r28, 0x08	; 8
    2b10:	e9 e0       	ldi	r30, 0x09	; 9
    2b12:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__epilogue_restores__+0x12>

00002b16 <__fixsfsi>:
    2b16:	ac e0       	ldi	r26, 0x0C	; 12
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e1 e9       	ldi	r30, 0x91	; 145
    2b1c:	f5 e1       	ldi	r31, 0x15	; 21
    2b1e:	0c 94 8d 18 	jmp	0x311a	; 0x311a <__prologue_saves__+0x20>
    2b22:	69 83       	std	Y+1, r22	; 0x01
    2b24:	7a 83       	std	Y+2, r23	; 0x02
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	9c 83       	std	Y+4, r25	; 0x04
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	01 96       	adiw	r24, 0x01	; 1
    2b2e:	be 01       	movw	r22, r28
    2b30:	6b 5f       	subi	r22, 0xFB	; 251
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <__unpack_f>
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	61 f1       	breq	.+88     	; 0x2b96 <__fixsfsi+0x80>
    2b3e:	82 30       	cpi	r24, 0x02	; 2
    2b40:	50 f1       	brcs	.+84     	; 0x2b96 <__fixsfsi+0x80>
    2b42:	84 30       	cpi	r24, 0x04	; 4
    2b44:	21 f4       	brne	.+8      	; 0x2b4e <__fixsfsi+0x38>
    2b46:	8e 81       	ldd	r24, Y+6	; 0x06
    2b48:	88 23       	and	r24, r24
    2b4a:	51 f1       	breq	.+84     	; 0x2ba0 <__fixsfsi+0x8a>
    2b4c:	2e c0       	rjmp	.+92     	; 0x2baa <__fixsfsi+0x94>
    2b4e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b50:	38 85       	ldd	r19, Y+8	; 0x08
    2b52:	37 fd       	sbrc	r19, 7
    2b54:	20 c0       	rjmp	.+64     	; 0x2b96 <__fixsfsi+0x80>
    2b56:	6e 81       	ldd	r22, Y+6	; 0x06
    2b58:	2f 31       	cpi	r18, 0x1F	; 31
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	1c f0       	brlt	.+6      	; 0x2b64 <__fixsfsi+0x4e>
    2b5e:	66 23       	and	r22, r22
    2b60:	f9 f0       	breq	.+62     	; 0x2ba0 <__fixsfsi+0x8a>
    2b62:	23 c0       	rjmp	.+70     	; 0x2baa <__fixsfsi+0x94>
    2b64:	8e e1       	ldi	r24, 0x1E	; 30
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	82 1b       	sub	r24, r18
    2b6a:	93 0b       	sbc	r25, r19
    2b6c:	29 85       	ldd	r18, Y+9	; 0x09
    2b6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b70:	4b 85       	ldd	r20, Y+11	; 0x0b
    2b72:	5c 85       	ldd	r21, Y+12	; 0x0c
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__fixsfsi+0x68>
    2b76:	56 95       	lsr	r21
    2b78:	47 95       	ror	r20
    2b7a:	37 95       	ror	r19
    2b7c:	27 95       	ror	r18
    2b7e:	8a 95       	dec	r24
    2b80:	d2 f7       	brpl	.-12     	; 0x2b76 <__fixsfsi+0x60>
    2b82:	66 23       	and	r22, r22
    2b84:	b1 f0       	breq	.+44     	; 0x2bb2 <__fixsfsi+0x9c>
    2b86:	50 95       	com	r21
    2b88:	40 95       	com	r20
    2b8a:	30 95       	com	r19
    2b8c:	21 95       	neg	r18
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	4f 4f       	sbci	r20, 0xFF	; 255
    2b92:	5f 4f       	sbci	r21, 0xFF	; 255
    2b94:	0e c0       	rjmp	.+28     	; 0x2bb2 <__fixsfsi+0x9c>
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	09 c0       	rjmp	.+18     	; 0x2bb2 <__fixsfsi+0x9c>
    2ba0:	2f ef       	ldi	r18, 0xFF	; 255
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f ef       	ldi	r20, 0xFF	; 255
    2ba6:	5f e7       	ldi	r21, 0x7F	; 127
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <__fixsfsi+0x9c>
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e8       	ldi	r21, 0x80	; 128
    2bb2:	b9 01       	movw	r22, r18
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	2c 96       	adiw	r28, 0x0c	; 12
    2bb8:	e2 e0       	ldi	r30, 0x02	; 2
    2bba:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__epilogue_restores__+0x20>

00002bbe <__floatunsisf>:
    2bbe:	a8 e0       	ldi	r26, 0x08	; 8
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e5 ee       	ldi	r30, 0xE5	; 229
    2bc4:	f5 e1       	ldi	r31, 0x15	; 21
    2bc6:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x10>
    2bca:	7b 01       	movw	r14, r22
    2bcc:	8c 01       	movw	r16, r24
    2bce:	61 15       	cp	r22, r1
    2bd0:	71 05       	cpc	r23, r1
    2bd2:	81 05       	cpc	r24, r1
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	19 f4       	brne	.+6      	; 0x2bde <__floatunsisf+0x20>
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	89 83       	std	Y+1, r24	; 0x01
    2bdc:	60 c0       	rjmp	.+192    	; 0x2c9e <__floatunsisf+0xe0>
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	89 83       	std	Y+1, r24	; 0x01
    2be2:	8e e1       	ldi	r24, 0x1E	; 30
    2be4:	c8 2e       	mov	r12, r24
    2be6:	d1 2c       	mov	r13, r1
    2be8:	dc 82       	std	Y+4, r13	; 0x04
    2bea:	cb 82       	std	Y+3, r12	; 0x03
    2bec:	ed 82       	std	Y+5, r14	; 0x05
    2bee:	fe 82       	std	Y+6, r15	; 0x06
    2bf0:	0f 83       	std	Y+7, r16	; 0x07
    2bf2:	18 87       	std	Y+8, r17	; 0x08
    2bf4:	c8 01       	movw	r24, r16
    2bf6:	b7 01       	movw	r22, r14
    2bf8:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <__clzsi2>
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	31 97       	sbiw	r30, 0x01	; 1
    2c00:	f7 ff       	sbrs	r31, 7
    2c02:	3b c0       	rjmp	.+118    	; 0x2c7a <__floatunsisf+0xbc>
    2c04:	22 27       	eor	r18, r18
    2c06:	33 27       	eor	r19, r19
    2c08:	2e 1b       	sub	r18, r30
    2c0a:	3f 0b       	sbc	r19, r31
    2c0c:	57 01       	movw	r10, r14
    2c0e:	68 01       	movw	r12, r16
    2c10:	02 2e       	mov	r0, r18
    2c12:	04 c0       	rjmp	.+8      	; 0x2c1c <__floatunsisf+0x5e>
    2c14:	d6 94       	lsr	r13
    2c16:	c7 94       	ror	r12
    2c18:	b7 94       	ror	r11
    2c1a:	a7 94       	ror	r10
    2c1c:	0a 94       	dec	r0
    2c1e:	d2 f7       	brpl	.-12     	; 0x2c14 <__floatunsisf+0x56>
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	04 c0       	rjmp	.+8      	; 0x2c3a <__floatunsisf+0x7c>
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	aa 1f       	adc	r26, r26
    2c38:	bb 1f       	adc	r27, r27
    2c3a:	2a 95       	dec	r18
    2c3c:	d2 f7       	brpl	.-12     	; 0x2c32 <__floatunsisf+0x74>
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	a1 09       	sbc	r26, r1
    2c42:	b1 09       	sbc	r27, r1
    2c44:	8e 21       	and	r24, r14
    2c46:	9f 21       	and	r25, r15
    2c48:	a0 23       	and	r26, r16
    2c4a:	b1 23       	and	r27, r17
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	a1 05       	cpc	r26, r1
    2c50:	b1 05       	cpc	r27, r1
    2c52:	21 f0       	breq	.+8      	; 0x2c5c <__floatunsisf+0x9e>
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	60 e0       	ldi	r22, 0x00	; 0
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	4a 29       	or	r20, r10
    2c5e:	5b 29       	or	r21, r11
    2c60:	6c 29       	or	r22, r12
    2c62:	7d 29       	or	r23, r13
    2c64:	4d 83       	std	Y+5, r20	; 0x05
    2c66:	5e 83       	std	Y+6, r21	; 0x06
    2c68:	6f 83       	std	Y+7, r22	; 0x07
    2c6a:	78 87       	std	Y+8, r23	; 0x08
    2c6c:	8e e1       	ldi	r24, 0x1E	; 30
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	8e 1b       	sub	r24, r30
    2c72:	9f 0b       	sbc	r25, r31
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
    2c78:	12 c0       	rjmp	.+36     	; 0x2c9e <__floatunsisf+0xe0>
    2c7a:	30 97       	sbiw	r30, 0x00	; 0
    2c7c:	81 f0       	breq	.+32     	; 0x2c9e <__floatunsisf+0xe0>
    2c7e:	0e 2e       	mov	r0, r30
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <__floatunsisf+0xcc>
    2c82:	ee 0c       	add	r14, r14
    2c84:	ff 1c       	adc	r15, r15
    2c86:	00 1f       	adc	r16, r16
    2c88:	11 1f       	adc	r17, r17
    2c8a:	0a 94       	dec	r0
    2c8c:	d2 f7       	brpl	.-12     	; 0x2c82 <__floatunsisf+0xc4>
    2c8e:	ed 82       	std	Y+5, r14	; 0x05
    2c90:	fe 82       	std	Y+6, r15	; 0x06
    2c92:	0f 83       	std	Y+7, r16	; 0x07
    2c94:	18 87       	std	Y+8, r17	; 0x08
    2c96:	ce 1a       	sub	r12, r30
    2c98:	df 0a       	sbc	r13, r31
    2c9a:	dc 82       	std	Y+4, r13	; 0x04
    2c9c:	cb 82       	std	Y+3, r12	; 0x03
    2c9e:	1a 82       	std	Y+2, r1	; 0x02
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__pack_f>
    2ca8:	28 96       	adiw	r28, 0x08	; 8
    2caa:	ea e0       	ldi	r30, 0x0A	; 10
    2cac:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x10>

00002cb0 <__clzsi2>:
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	7b 01       	movw	r14, r22
    2cba:	8c 01       	movw	r16, r24
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	e8 16       	cp	r14, r24
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	f8 06       	cpc	r15, r24
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	08 07       	cpc	r16, r24
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	18 07       	cpc	r17, r24
    2ccc:	88 f4       	brcc	.+34     	; 0x2cf0 <__clzsi2+0x40>
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	e8 16       	cp	r14, r24
    2cd2:	f1 04       	cpc	r15, r1
    2cd4:	01 05       	cpc	r16, r1
    2cd6:	11 05       	cpc	r17, r1
    2cd8:	31 f0       	breq	.+12     	; 0x2ce6 <__clzsi2+0x36>
    2cda:	28 f0       	brcs	.+10     	; 0x2ce6 <__clzsi2+0x36>
    2cdc:	88 e0       	ldi	r24, 0x08	; 8
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	17 c0       	rjmp	.+46     	; 0x2d14 <__clzsi2+0x64>
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a0 e0       	ldi	r26, 0x00	; 0
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	12 c0       	rjmp	.+36     	; 0x2d14 <__clzsi2+0x64>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	e8 16       	cp	r14, r24
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	f8 06       	cpc	r15, r24
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	08 07       	cpc	r16, r24
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	18 07       	cpc	r17, r24
    2d00:	28 f0       	brcs	.+10     	; 0x2d0c <__clzsi2+0x5c>
    2d02:	88 e1       	ldi	r24, 0x18	; 24
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e0       	ldi	r26, 0x00	; 0
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	04 c0       	rjmp	.+8      	; 0x2d14 <__clzsi2+0x64>
    2d0c:	80 e1       	ldi	r24, 0x10	; 16
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	20 e2       	ldi	r18, 0x20	; 32
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	28 1b       	sub	r18, r24
    2d1e:	39 0b       	sbc	r19, r25
    2d20:	4a 0b       	sbc	r20, r26
    2d22:	5b 0b       	sbc	r21, r27
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <__clzsi2+0x7e>
    2d26:	16 95       	lsr	r17
    2d28:	07 95       	ror	r16
    2d2a:	f7 94       	ror	r15
    2d2c:	e7 94       	ror	r14
    2d2e:	8a 95       	dec	r24
    2d30:	d2 f7       	brpl	.-12     	; 0x2d26 <__clzsi2+0x76>
    2d32:	f7 01       	movw	r30, r14
    2d34:	e1 5f       	subi	r30, 0xF1	; 241
    2d36:	fd 4f       	sbci	r31, 0xFD	; 253
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 1b       	sub	r18, r24
    2d3c:	31 09       	sbc	r19, r1
    2d3e:	41 09       	sbc	r20, r1
    2d40:	51 09       	sbc	r21, r1
    2d42:	c9 01       	movw	r24, r18
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	ff 90       	pop	r15
    2d4a:	ef 90       	pop	r14
    2d4c:	08 95       	ret

00002d4e <__pack_f>:
    2d4e:	df 92       	push	r13
    2d50:	ef 92       	push	r14
    2d52:	ff 92       	push	r15
    2d54:	0f 93       	push	r16
    2d56:	1f 93       	push	r17
    2d58:	fc 01       	movw	r30, r24
    2d5a:	e4 80       	ldd	r14, Z+4	; 0x04
    2d5c:	f5 80       	ldd	r15, Z+5	; 0x05
    2d5e:	06 81       	ldd	r16, Z+6	; 0x06
    2d60:	17 81       	ldd	r17, Z+7	; 0x07
    2d62:	d1 80       	ldd	r13, Z+1	; 0x01
    2d64:	80 81       	ld	r24, Z
    2d66:	82 30       	cpi	r24, 0x02	; 2
    2d68:	48 f4       	brcc	.+18     	; 0x2d7c <__pack_f+0x2e>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a0 e1       	ldi	r26, 0x10	; 16
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e8 2a       	or	r14, r24
    2d74:	f9 2a       	or	r15, r25
    2d76:	0a 2b       	or	r16, r26
    2d78:	1b 2b       	or	r17, r27
    2d7a:	a5 c0       	rjmp	.+330    	; 0x2ec6 <__pack_f+0x178>
    2d7c:	84 30       	cpi	r24, 0x04	; 4
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <__pack_f+0x34>
    2d80:	9f c0       	rjmp	.+318    	; 0x2ec0 <__pack_f+0x172>
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	21 f4       	brne	.+8      	; 0x2d8e <__pack_f+0x40>
    2d86:	ee 24       	eor	r14, r14
    2d88:	ff 24       	eor	r15, r15
    2d8a:	87 01       	movw	r16, r14
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <__pack_f+0x4a>
    2d8e:	e1 14       	cp	r14, r1
    2d90:	f1 04       	cpc	r15, r1
    2d92:	01 05       	cpc	r16, r1
    2d94:	11 05       	cpc	r17, r1
    2d96:	19 f4       	brne	.+6      	; 0x2d9e <__pack_f+0x50>
    2d98:	e0 e0       	ldi	r30, 0x00	; 0
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	96 c0       	rjmp	.+300    	; 0x2eca <__pack_f+0x17c>
    2d9e:	62 81       	ldd	r22, Z+2	; 0x02
    2da0:	73 81       	ldd	r23, Z+3	; 0x03
    2da2:	9f ef       	ldi	r25, 0xFF	; 255
    2da4:	62 38       	cpi	r22, 0x82	; 130
    2da6:	79 07       	cpc	r23, r25
    2da8:	0c f0       	brlt	.+2      	; 0x2dac <__pack_f+0x5e>
    2daa:	5b c0       	rjmp	.+182    	; 0x2e62 <__pack_f+0x114>
    2dac:	22 e8       	ldi	r18, 0x82	; 130
    2dae:	3f ef       	ldi	r19, 0xFF	; 255
    2db0:	26 1b       	sub	r18, r22
    2db2:	37 0b       	sbc	r19, r23
    2db4:	2a 31       	cpi	r18, 0x1A	; 26
    2db6:	31 05       	cpc	r19, r1
    2db8:	2c f0       	brlt	.+10     	; 0x2dc4 <__pack_f+0x76>
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	2a c0       	rjmp	.+84     	; 0x2e18 <__pack_f+0xca>
    2dc4:	b8 01       	movw	r22, r16
    2dc6:	a7 01       	movw	r20, r14
    2dc8:	02 2e       	mov	r0, r18
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <__pack_f+0x86>
    2dcc:	76 95       	lsr	r23
    2dce:	67 95       	ror	r22
    2dd0:	57 95       	ror	r21
    2dd2:	47 95       	ror	r20
    2dd4:	0a 94       	dec	r0
    2dd6:	d2 f7       	brpl	.-12     	; 0x2dcc <__pack_f+0x7e>
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	04 c0       	rjmp	.+8      	; 0x2dea <__pack_f+0x9c>
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	aa 1f       	adc	r26, r26
    2de8:	bb 1f       	adc	r27, r27
    2dea:	2a 95       	dec	r18
    2dec:	d2 f7       	brpl	.-12     	; 0x2de2 <__pack_f+0x94>
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	a1 09       	sbc	r26, r1
    2df2:	b1 09       	sbc	r27, r1
    2df4:	8e 21       	and	r24, r14
    2df6:	9f 21       	and	r25, r15
    2df8:	a0 23       	and	r26, r16
    2dfa:	b1 23       	and	r27, r17
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	a1 05       	cpc	r26, r1
    2e00:	b1 05       	cpc	r27, r1
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <__pack_f+0xbe>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	9a 01       	movw	r18, r20
    2e0e:	ab 01       	movw	r20, r22
    2e10:	28 2b       	or	r18, r24
    2e12:	39 2b       	or	r19, r25
    2e14:	4a 2b       	or	r20, r26
    2e16:	5b 2b       	or	r21, r27
    2e18:	da 01       	movw	r26, r20
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	8f 77       	andi	r24, 0x7F	; 127
    2e1e:	90 70       	andi	r25, 0x00	; 0
    2e20:	a0 70       	andi	r26, 0x00	; 0
    2e22:	b0 70       	andi	r27, 0x00	; 0
    2e24:	80 34       	cpi	r24, 0x40	; 64
    2e26:	91 05       	cpc	r25, r1
    2e28:	a1 05       	cpc	r26, r1
    2e2a:	b1 05       	cpc	r27, r1
    2e2c:	39 f4       	brne	.+14     	; 0x2e3c <__pack_f+0xee>
    2e2e:	27 ff       	sbrs	r18, 7
    2e30:	09 c0       	rjmp	.+18     	; 0x2e44 <__pack_f+0xf6>
    2e32:	20 5c       	subi	r18, 0xC0	; 192
    2e34:	3f 4f       	sbci	r19, 0xFF	; 255
    2e36:	4f 4f       	sbci	r20, 0xFF	; 255
    2e38:	5f 4f       	sbci	r21, 0xFF	; 255
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <__pack_f+0xf6>
    2e3c:	21 5c       	subi	r18, 0xC1	; 193
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	4f 4f       	sbci	r20, 0xFF	; 255
    2e42:	5f 4f       	sbci	r21, 0xFF	; 255
    2e44:	e0 e0       	ldi	r30, 0x00	; 0
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	20 30       	cpi	r18, 0x00	; 0
    2e4a:	a0 e0       	ldi	r26, 0x00	; 0
    2e4c:	3a 07       	cpc	r19, r26
    2e4e:	a0 e0       	ldi	r26, 0x00	; 0
    2e50:	4a 07       	cpc	r20, r26
    2e52:	a0 e4       	ldi	r26, 0x40	; 64
    2e54:	5a 07       	cpc	r21, r26
    2e56:	10 f0       	brcs	.+4      	; 0x2e5c <__pack_f+0x10e>
    2e58:	e1 e0       	ldi	r30, 0x01	; 1
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	79 01       	movw	r14, r18
    2e5e:	8a 01       	movw	r16, r20
    2e60:	27 c0       	rjmp	.+78     	; 0x2eb0 <__pack_f+0x162>
    2e62:	60 38       	cpi	r22, 0x80	; 128
    2e64:	71 05       	cpc	r23, r1
    2e66:	64 f5       	brge	.+88     	; 0x2ec0 <__pack_f+0x172>
    2e68:	fb 01       	movw	r30, r22
    2e6a:	e1 58       	subi	r30, 0x81	; 129
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	d8 01       	movw	r26, r16
    2e70:	c7 01       	movw	r24, r14
    2e72:	8f 77       	andi	r24, 0x7F	; 127
    2e74:	90 70       	andi	r25, 0x00	; 0
    2e76:	a0 70       	andi	r26, 0x00	; 0
    2e78:	b0 70       	andi	r27, 0x00	; 0
    2e7a:	80 34       	cpi	r24, 0x40	; 64
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	a1 05       	cpc	r26, r1
    2e80:	b1 05       	cpc	r27, r1
    2e82:	39 f4       	brne	.+14     	; 0x2e92 <__pack_f+0x144>
    2e84:	e7 fe       	sbrs	r14, 7
    2e86:	0d c0       	rjmp	.+26     	; 0x2ea2 <__pack_f+0x154>
    2e88:	80 e4       	ldi	r24, 0x40	; 64
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	04 c0       	rjmp	.+8      	; 0x2e9a <__pack_f+0x14c>
    2e92:	8f e3       	ldi	r24, 0x3F	; 63
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	a0 e0       	ldi	r26, 0x00	; 0
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e8 0e       	add	r14, r24
    2e9c:	f9 1e       	adc	r15, r25
    2e9e:	0a 1f       	adc	r16, r26
    2ea0:	1b 1f       	adc	r17, r27
    2ea2:	17 ff       	sbrs	r17, 7
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <__pack_f+0x162>
    2ea6:	16 95       	lsr	r17
    2ea8:	07 95       	ror	r16
    2eaa:	f7 94       	ror	r15
    2eac:	e7 94       	ror	r14
    2eae:	31 96       	adiw	r30, 0x01	; 1
    2eb0:	87 e0       	ldi	r24, 0x07	; 7
    2eb2:	16 95       	lsr	r17
    2eb4:	07 95       	ror	r16
    2eb6:	f7 94       	ror	r15
    2eb8:	e7 94       	ror	r14
    2eba:	8a 95       	dec	r24
    2ebc:	d1 f7       	brne	.-12     	; 0x2eb2 <__pack_f+0x164>
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <__pack_f+0x17c>
    2ec0:	ee 24       	eor	r14, r14
    2ec2:	ff 24       	eor	r15, r15
    2ec4:	87 01       	movw	r16, r14
    2ec6:	ef ef       	ldi	r30, 0xFF	; 255
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	6e 2f       	mov	r22, r30
    2ecc:	67 95       	ror	r22
    2ece:	66 27       	eor	r22, r22
    2ed0:	67 95       	ror	r22
    2ed2:	90 2f       	mov	r25, r16
    2ed4:	9f 77       	andi	r25, 0x7F	; 127
    2ed6:	d7 94       	ror	r13
    2ed8:	dd 24       	eor	r13, r13
    2eda:	d7 94       	ror	r13
    2edc:	8e 2f       	mov	r24, r30
    2ede:	86 95       	lsr	r24
    2ee0:	49 2f       	mov	r20, r25
    2ee2:	46 2b       	or	r20, r22
    2ee4:	58 2f       	mov	r21, r24
    2ee6:	5d 29       	or	r21, r13
    2ee8:	b7 01       	movw	r22, r14
    2eea:	ca 01       	movw	r24, r20
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	08 95       	ret

00002ef8 <__unpack_f>:
    2ef8:	fc 01       	movw	r30, r24
    2efa:	db 01       	movw	r26, r22
    2efc:	40 81       	ld	r20, Z
    2efe:	51 81       	ldd	r21, Z+1	; 0x01
    2f00:	22 81       	ldd	r18, Z+2	; 0x02
    2f02:	62 2f       	mov	r22, r18
    2f04:	6f 77       	andi	r22, 0x7F	; 127
    2f06:	70 e0       	ldi	r23, 0x00	; 0
    2f08:	22 1f       	adc	r18, r18
    2f0a:	22 27       	eor	r18, r18
    2f0c:	22 1f       	adc	r18, r18
    2f0e:	93 81       	ldd	r25, Z+3	; 0x03
    2f10:	89 2f       	mov	r24, r25
    2f12:	88 0f       	add	r24, r24
    2f14:	82 2b       	or	r24, r18
    2f16:	28 2f       	mov	r18, r24
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	99 27       	eor	r25, r25
    2f1e:	99 1f       	adc	r25, r25
    2f20:	11 96       	adiw	r26, 0x01	; 1
    2f22:	9c 93       	st	X, r25
    2f24:	11 97       	sbiw	r26, 0x01	; 1
    2f26:	21 15       	cp	r18, r1
    2f28:	31 05       	cpc	r19, r1
    2f2a:	a9 f5       	brne	.+106    	; 0x2f96 <__unpack_f+0x9e>
    2f2c:	41 15       	cp	r20, r1
    2f2e:	51 05       	cpc	r21, r1
    2f30:	61 05       	cpc	r22, r1
    2f32:	71 05       	cpc	r23, r1
    2f34:	11 f4       	brne	.+4      	; 0x2f3a <__unpack_f+0x42>
    2f36:	82 e0       	ldi	r24, 0x02	; 2
    2f38:	37 c0       	rjmp	.+110    	; 0x2fa8 <__unpack_f+0xb0>
    2f3a:	82 e8       	ldi	r24, 0x82	; 130
    2f3c:	9f ef       	ldi	r25, 0xFF	; 255
    2f3e:	13 96       	adiw	r26, 0x03	; 3
    2f40:	9c 93       	st	X, r25
    2f42:	8e 93       	st	-X, r24
    2f44:	12 97       	sbiw	r26, 0x02	; 2
    2f46:	9a 01       	movw	r18, r20
    2f48:	ab 01       	movw	r20, r22
    2f4a:	67 e0       	ldi	r22, 0x07	; 7
    2f4c:	22 0f       	add	r18, r18
    2f4e:	33 1f       	adc	r19, r19
    2f50:	44 1f       	adc	r20, r20
    2f52:	55 1f       	adc	r21, r21
    2f54:	6a 95       	dec	r22
    2f56:	d1 f7       	brne	.-12     	; 0x2f4c <__unpack_f+0x54>
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	8c 93       	st	X, r24
    2f5c:	0d c0       	rjmp	.+26     	; 0x2f78 <__unpack_f+0x80>
    2f5e:	22 0f       	add	r18, r18
    2f60:	33 1f       	adc	r19, r19
    2f62:	44 1f       	adc	r20, r20
    2f64:	55 1f       	adc	r21, r21
    2f66:	12 96       	adiw	r26, 0x02	; 2
    2f68:	8d 91       	ld	r24, X+
    2f6a:	9c 91       	ld	r25, X
    2f6c:	13 97       	sbiw	r26, 0x03	; 3
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	13 96       	adiw	r26, 0x03	; 3
    2f72:	9c 93       	st	X, r25
    2f74:	8e 93       	st	-X, r24
    2f76:	12 97       	sbiw	r26, 0x02	; 2
    2f78:	20 30       	cpi	r18, 0x00	; 0
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	38 07       	cpc	r19, r24
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	48 07       	cpc	r20, r24
    2f82:	80 e4       	ldi	r24, 0x40	; 64
    2f84:	58 07       	cpc	r21, r24
    2f86:	58 f3       	brcs	.-42     	; 0x2f5e <__unpack_f+0x66>
    2f88:	14 96       	adiw	r26, 0x04	; 4
    2f8a:	2d 93       	st	X+, r18
    2f8c:	3d 93       	st	X+, r19
    2f8e:	4d 93       	st	X+, r20
    2f90:	5c 93       	st	X, r21
    2f92:	17 97       	sbiw	r26, 0x07	; 7
    2f94:	08 95       	ret
    2f96:	2f 3f       	cpi	r18, 0xFF	; 255
    2f98:	31 05       	cpc	r19, r1
    2f9a:	79 f4       	brne	.+30     	; 0x2fba <__unpack_f+0xc2>
    2f9c:	41 15       	cp	r20, r1
    2f9e:	51 05       	cpc	r21, r1
    2fa0:	61 05       	cpc	r22, r1
    2fa2:	71 05       	cpc	r23, r1
    2fa4:	19 f4       	brne	.+6      	; 0x2fac <__unpack_f+0xb4>
    2fa6:	84 e0       	ldi	r24, 0x04	; 4
    2fa8:	8c 93       	st	X, r24
    2faa:	08 95       	ret
    2fac:	64 ff       	sbrs	r22, 4
    2fae:	03 c0       	rjmp	.+6      	; 0x2fb6 <__unpack_f+0xbe>
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	8c 93       	st	X, r24
    2fb4:	12 c0       	rjmp	.+36     	; 0x2fda <__unpack_f+0xe2>
    2fb6:	1c 92       	st	X, r1
    2fb8:	10 c0       	rjmp	.+32     	; 0x2fda <__unpack_f+0xe2>
    2fba:	2f 57       	subi	r18, 0x7F	; 127
    2fbc:	30 40       	sbci	r19, 0x00	; 0
    2fbe:	13 96       	adiw	r26, 0x03	; 3
    2fc0:	3c 93       	st	X, r19
    2fc2:	2e 93       	st	-X, r18
    2fc4:	12 97       	sbiw	r26, 0x02	; 2
    2fc6:	83 e0       	ldi	r24, 0x03	; 3
    2fc8:	8c 93       	st	X, r24
    2fca:	87 e0       	ldi	r24, 0x07	; 7
    2fcc:	44 0f       	add	r20, r20
    2fce:	55 1f       	adc	r21, r21
    2fd0:	66 1f       	adc	r22, r22
    2fd2:	77 1f       	adc	r23, r23
    2fd4:	8a 95       	dec	r24
    2fd6:	d1 f7       	brne	.-12     	; 0x2fcc <__unpack_f+0xd4>
    2fd8:	70 64       	ori	r23, 0x40	; 64
    2fda:	14 96       	adiw	r26, 0x04	; 4
    2fdc:	4d 93       	st	X+, r20
    2fde:	5d 93       	st	X+, r21
    2fe0:	6d 93       	st	X+, r22
    2fe2:	7c 93       	st	X, r23
    2fe4:	17 97       	sbiw	r26, 0x07	; 7
    2fe6:	08 95       	ret

00002fe8 <__fpcmp_parts_f>:
    2fe8:	1f 93       	push	r17
    2fea:	dc 01       	movw	r26, r24
    2fec:	fb 01       	movw	r30, r22
    2fee:	9c 91       	ld	r25, X
    2ff0:	92 30       	cpi	r25, 0x02	; 2
    2ff2:	08 f4       	brcc	.+2      	; 0x2ff6 <__fpcmp_parts_f+0xe>
    2ff4:	47 c0       	rjmp	.+142    	; 0x3084 <__fpcmp_parts_f+0x9c>
    2ff6:	80 81       	ld	r24, Z
    2ff8:	82 30       	cpi	r24, 0x02	; 2
    2ffa:	08 f4       	brcc	.+2      	; 0x2ffe <__fpcmp_parts_f+0x16>
    2ffc:	43 c0       	rjmp	.+134    	; 0x3084 <__fpcmp_parts_f+0x9c>
    2ffe:	94 30       	cpi	r25, 0x04	; 4
    3000:	51 f4       	brne	.+20     	; 0x3016 <__fpcmp_parts_f+0x2e>
    3002:	11 96       	adiw	r26, 0x01	; 1
    3004:	1c 91       	ld	r17, X
    3006:	84 30       	cpi	r24, 0x04	; 4
    3008:	99 f5       	brne	.+102    	; 0x3070 <__fpcmp_parts_f+0x88>
    300a:	81 81       	ldd	r24, Z+1	; 0x01
    300c:	68 2f       	mov	r22, r24
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	61 1b       	sub	r22, r17
    3012:	71 09       	sbc	r23, r1
    3014:	3f c0       	rjmp	.+126    	; 0x3094 <__fpcmp_parts_f+0xac>
    3016:	84 30       	cpi	r24, 0x04	; 4
    3018:	21 f0       	breq	.+8      	; 0x3022 <__fpcmp_parts_f+0x3a>
    301a:	92 30       	cpi	r25, 0x02	; 2
    301c:	31 f4       	brne	.+12     	; 0x302a <__fpcmp_parts_f+0x42>
    301e:	82 30       	cpi	r24, 0x02	; 2
    3020:	b9 f1       	breq	.+110    	; 0x3090 <__fpcmp_parts_f+0xa8>
    3022:	81 81       	ldd	r24, Z+1	; 0x01
    3024:	88 23       	and	r24, r24
    3026:	89 f1       	breq	.+98     	; 0x308a <__fpcmp_parts_f+0xa2>
    3028:	2d c0       	rjmp	.+90     	; 0x3084 <__fpcmp_parts_f+0x9c>
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	1c 91       	ld	r17, X
    302e:	11 97       	sbiw	r26, 0x01	; 1
    3030:	82 30       	cpi	r24, 0x02	; 2
    3032:	f1 f0       	breq	.+60     	; 0x3070 <__fpcmp_parts_f+0x88>
    3034:	81 81       	ldd	r24, Z+1	; 0x01
    3036:	18 17       	cp	r17, r24
    3038:	d9 f4       	brne	.+54     	; 0x3070 <__fpcmp_parts_f+0x88>
    303a:	12 96       	adiw	r26, 0x02	; 2
    303c:	2d 91       	ld	r18, X+
    303e:	3c 91       	ld	r19, X
    3040:	13 97       	sbiw	r26, 0x03	; 3
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	82 17       	cp	r24, r18
    3048:	93 07       	cpc	r25, r19
    304a:	94 f0       	brlt	.+36     	; 0x3070 <__fpcmp_parts_f+0x88>
    304c:	28 17       	cp	r18, r24
    304e:	39 07       	cpc	r19, r25
    3050:	bc f0       	brlt	.+46     	; 0x3080 <__fpcmp_parts_f+0x98>
    3052:	14 96       	adiw	r26, 0x04	; 4
    3054:	8d 91       	ld	r24, X+
    3056:	9d 91       	ld	r25, X+
    3058:	0d 90       	ld	r0, X+
    305a:	bc 91       	ld	r27, X
    305c:	a0 2d       	mov	r26, r0
    305e:	24 81       	ldd	r18, Z+4	; 0x04
    3060:	35 81       	ldd	r19, Z+5	; 0x05
    3062:	46 81       	ldd	r20, Z+6	; 0x06
    3064:	57 81       	ldd	r21, Z+7	; 0x07
    3066:	28 17       	cp	r18, r24
    3068:	39 07       	cpc	r19, r25
    306a:	4a 07       	cpc	r20, r26
    306c:	5b 07       	cpc	r21, r27
    306e:	18 f4       	brcc	.+6      	; 0x3076 <__fpcmp_parts_f+0x8e>
    3070:	11 23       	and	r17, r17
    3072:	41 f0       	breq	.+16     	; 0x3084 <__fpcmp_parts_f+0x9c>
    3074:	0a c0       	rjmp	.+20     	; 0x308a <__fpcmp_parts_f+0xa2>
    3076:	82 17       	cp	r24, r18
    3078:	93 07       	cpc	r25, r19
    307a:	a4 07       	cpc	r26, r20
    307c:	b5 07       	cpc	r27, r21
    307e:	40 f4       	brcc	.+16     	; 0x3090 <__fpcmp_parts_f+0xa8>
    3080:	11 23       	and	r17, r17
    3082:	19 f0       	breq	.+6      	; 0x308a <__fpcmp_parts_f+0xa2>
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <__fpcmp_parts_f+0xac>
    308a:	6f ef       	ldi	r22, 0xFF	; 255
    308c:	7f ef       	ldi	r23, 0xFF	; 255
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <__fpcmp_parts_f+0xac>
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	70 e0       	ldi	r23, 0x00	; 0
    3094:	cb 01       	movw	r24, r22
    3096:	1f 91       	pop	r17
    3098:	08 95       	ret

0000309a <strlen>:
    309a:	fc 01       	movw	r30, r24
    309c:	01 90       	ld	r0, Z+
    309e:	00 20       	and	r0, r0
    30a0:	e9 f7       	brne	.-6      	; 0x309c <strlen+0x2>
    30a2:	80 95       	com	r24
    30a4:	90 95       	com	r25
    30a6:	8e 0f       	add	r24, r30
    30a8:	9f 1f       	adc	r25, r31
    30aa:	08 95       	ret

000030ac <__udivmodhi4>:
    30ac:	aa 1b       	sub	r26, r26
    30ae:	bb 1b       	sub	r27, r27
    30b0:	51 e1       	ldi	r21, 0x11	; 17
    30b2:	07 c0       	rjmp	.+14     	; 0x30c2 <__udivmodhi4_ep>

000030b4 <__udivmodhi4_loop>:
    30b4:	aa 1f       	adc	r26, r26
    30b6:	bb 1f       	adc	r27, r27
    30b8:	a6 17       	cp	r26, r22
    30ba:	b7 07       	cpc	r27, r23
    30bc:	10 f0       	brcs	.+4      	; 0x30c2 <__udivmodhi4_ep>
    30be:	a6 1b       	sub	r26, r22
    30c0:	b7 0b       	sbc	r27, r23

000030c2 <__udivmodhi4_ep>:
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	5a 95       	dec	r21
    30c8:	a9 f7       	brne	.-22     	; 0x30b4 <__udivmodhi4_loop>
    30ca:	80 95       	com	r24
    30cc:	90 95       	com	r25
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	08 95       	ret

000030d4 <__divmodhi4>:
    30d4:	97 fb       	bst	r25, 7
    30d6:	09 2e       	mov	r0, r25
    30d8:	07 26       	eor	r0, r23
    30da:	0a d0       	rcall	.+20     	; 0x30f0 <__divmodhi4_neg1>
    30dc:	77 fd       	sbrc	r23, 7
    30de:	04 d0       	rcall	.+8      	; 0x30e8 <__divmodhi4_neg2>
    30e0:	e5 df       	rcall	.-54     	; 0x30ac <__udivmodhi4>
    30e2:	06 d0       	rcall	.+12     	; 0x30f0 <__divmodhi4_neg1>
    30e4:	00 20       	and	r0, r0
    30e6:	1a f4       	brpl	.+6      	; 0x30ee <__divmodhi4_exit>

000030e8 <__divmodhi4_neg2>:
    30e8:	70 95       	com	r23
    30ea:	61 95       	neg	r22
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255

000030ee <__divmodhi4_exit>:
    30ee:	08 95       	ret

000030f0 <__divmodhi4_neg1>:
    30f0:	f6 f7       	brtc	.-4      	; 0x30ee <__divmodhi4_exit>
    30f2:	90 95       	com	r25
    30f4:	81 95       	neg	r24
    30f6:	9f 4f       	sbci	r25, 0xFF	; 255
    30f8:	08 95       	ret

000030fa <__prologue_saves__>:
    30fa:	2f 92       	push	r2
    30fc:	3f 92       	push	r3
    30fe:	4f 92       	push	r4
    3100:	5f 92       	push	r5
    3102:	6f 92       	push	r6
    3104:	7f 92       	push	r7
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	ca 1b       	sub	r28, r26
    3124:	db 0b       	sbc	r29, r27
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	19 94       	eijmp

00003132 <__epilogue_restores__>:
    3132:	2a 88       	ldd	r2, Y+18	; 0x12
    3134:	39 88       	ldd	r3, Y+17	; 0x11
    3136:	48 88       	ldd	r4, Y+16	; 0x10
    3138:	5f 84       	ldd	r5, Y+15	; 0x0f
    313a:	6e 84       	ldd	r6, Y+14	; 0x0e
    313c:	7d 84       	ldd	r7, Y+13	; 0x0d
    313e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3140:	9b 84       	ldd	r9, Y+11	; 0x0b
    3142:	aa 84       	ldd	r10, Y+10	; 0x0a
    3144:	b9 84       	ldd	r11, Y+9	; 0x09
    3146:	c8 84       	ldd	r12, Y+8	; 0x08
    3148:	df 80       	ldd	r13, Y+7	; 0x07
    314a:	ee 80       	ldd	r14, Y+6	; 0x06
    314c:	fd 80       	ldd	r15, Y+5	; 0x05
    314e:	0c 81       	ldd	r16, Y+4	; 0x04
    3150:	1b 81       	ldd	r17, Y+3	; 0x03
    3152:	aa 81       	ldd	r26, Y+2	; 0x02
    3154:	b9 81       	ldd	r27, Y+1	; 0x01
    3156:	ce 0f       	add	r28, r30
    3158:	d1 1d       	adc	r29, r1
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	ed 01       	movw	r28, r26
    3166:	08 95       	ret

00003168 <pow>:
    3168:	fa 01       	movw	r30, r20
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	30 96       	adiw	r30, 0x00	; 0
    3170:	21 05       	cpc	r18, r1
    3172:	31 05       	cpc	r19, r1
    3174:	99 f1       	breq	.+102    	; 0x31dc <pow+0x74>
    3176:	61 15       	cp	r22, r1
    3178:	71 05       	cpc	r23, r1
    317a:	61 f4       	brne	.+24     	; 0x3194 <pow+0x2c>
    317c:	80 38       	cpi	r24, 0x80	; 128
    317e:	bf e3       	ldi	r27, 0x3F	; 63
    3180:	9b 07       	cpc	r25, r27
    3182:	49 f1       	breq	.+82     	; 0x31d6 <pow+0x6e>
    3184:	68 94       	set
    3186:	90 38       	cpi	r25, 0x80	; 128
    3188:	81 05       	cpc	r24, r1
    318a:	61 f0       	breq	.+24     	; 0x31a4 <pow+0x3c>
    318c:	80 38       	cpi	r24, 0x80	; 128
    318e:	bf ef       	ldi	r27, 0xFF	; 255
    3190:	9b 07       	cpc	r25, r27
    3192:	41 f0       	breq	.+16     	; 0x31a4 <pow+0x3c>
    3194:	99 23       	and	r25, r25
    3196:	42 f5       	brpl	.+80     	; 0x31e8 <pow+0x80>
    3198:	ff 3f       	cpi	r31, 0xFF	; 255
    319a:	e1 05       	cpc	r30, r1
    319c:	31 05       	cpc	r19, r1
    319e:	21 05       	cpc	r18, r1
    31a0:	11 f1       	breq	.+68     	; 0x31e6 <pow+0x7e>
    31a2:	e8 94       	clt
    31a4:	08 94       	sec
    31a6:	e7 95       	ror	r30
    31a8:	d9 01       	movw	r26, r18
    31aa:	aa 23       	and	r26, r26
    31ac:	29 f4       	brne	.+10     	; 0x31b8 <pow+0x50>
    31ae:	ab 2f       	mov	r26, r27
    31b0:	be 2f       	mov	r27, r30
    31b2:	f8 5f       	subi	r31, 0xF8	; 248
    31b4:	d0 f3       	brcs	.-12     	; 0x31aa <pow+0x42>
    31b6:	10 c0       	rjmp	.+32     	; 0x31d8 <pow+0x70>
    31b8:	ff 5f       	subi	r31, 0xFF	; 255
    31ba:	70 f4       	brcc	.+28     	; 0x31d8 <pow+0x70>
    31bc:	a6 95       	lsr	r26
    31be:	e0 f7       	brcc	.-8      	; 0x31b8 <pow+0x50>
    31c0:	f7 39       	cpi	r31, 0x97	; 151
    31c2:	50 f0       	brcs	.+20     	; 0x31d8 <pow+0x70>
    31c4:	19 f0       	breq	.+6      	; 0x31cc <pow+0x64>
    31c6:	ff 3a       	cpi	r31, 0xAF	; 175
    31c8:	38 f4       	brcc	.+14     	; 0x31d8 <pow+0x70>
    31ca:	9f 77       	andi	r25, 0x7F	; 127
    31cc:	9f 93       	push	r25
    31ce:	0c d0       	rcall	.+24     	; 0x31e8 <pow+0x80>
    31d0:	0f 90       	pop	r0
    31d2:	07 fc       	sbrc	r0, 7
    31d4:	90 58       	subi	r25, 0x80	; 128
    31d6:	08 95       	ret
    31d8:	3e f0       	brts	.+14     	; 0x31e8 <pow+0x80>
    31da:	49 c0       	rjmp	.+146    	; 0x326e <__fp_nan>
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	80 e8       	ldi	r24, 0x80	; 128
    31e2:	9f e3       	ldi	r25, 0x3F	; 63
    31e4:	08 95       	ret
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	9f 77       	andi	r25, 0x7F	; 127
    31ea:	5f 93       	push	r21
    31ec:	4f 93       	push	r20
    31ee:	3f 93       	push	r19
    31f0:	2f 93       	push	r18
    31f2:	d0 d0       	rcall	.+416    	; 0x3394 <log>
    31f4:	2f 91       	pop	r18
    31f6:	3f 91       	pop	r19
    31f8:	4f 91       	pop	r20
    31fa:	5f 91       	pop	r21
    31fc:	f8 d9       	rcall	.-3088   	; 0x25ee <__mulsf3>
    31fe:	05 c0       	rjmp	.+10     	; 0x320a <exp>
    3200:	19 f4       	brne	.+6      	; 0x3208 <pow+0xa0>
    3202:	0e f0       	brts	.+2      	; 0x3206 <pow+0x9e>
    3204:	2e c0       	rjmp	.+92     	; 0x3262 <__fp_inf>
    3206:	7d c0       	rjmp	.+250    	; 0x3302 <__fp_zero>
    3208:	32 c0       	rjmp	.+100    	; 0x326e <__fp_nan>

0000320a <exp>:
    320a:	61 d0       	rcall	.+194    	; 0x32ce <__fp_splitA>
    320c:	c8 f3       	brcs	.-14     	; 0x3200 <pow+0x98>
    320e:	96 38       	cpi	r25, 0x86	; 134
    3210:	c0 f7       	brcc	.-16     	; 0x3202 <pow+0x9a>
    3212:	07 f8       	bld	r0, 7
    3214:	0f 92       	push	r0
    3216:	e8 94       	clt
    3218:	2b e3       	ldi	r18, 0x3B	; 59
    321a:	3a ea       	ldi	r19, 0xAA	; 170
    321c:	48 eb       	ldi	r20, 0xB8	; 184
    321e:	5f e7       	ldi	r21, 0x7F	; 127
    3220:	38 d1       	rcall	.+624    	; 0x3492 <__mulsf3_pse>
    3222:	0f 92       	push	r0
    3224:	0f 92       	push	r0
    3226:	0f 92       	push	r0
    3228:	4d b7       	in	r20, 0x3d	; 61
    322a:	5e b7       	in	r21, 0x3e	; 62
    322c:	0f 92       	push	r0
    322e:	f2 d0       	rcall	.+484    	; 0x3414 <modf>
    3230:	e4 ee       	ldi	r30, 0xE4	; 228
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	1f d0       	rcall	.+62     	; 0x3274 <__fp_powser>
    3236:	4f 91       	pop	r20
    3238:	5f 91       	pop	r21
    323a:	ef 91       	pop	r30
    323c:	ff 91       	pop	r31
    323e:	e5 95       	asr	r30
    3240:	ee 1f       	adc	r30, r30
    3242:	ff 1f       	adc	r31, r31
    3244:	49 f0       	breq	.+18     	; 0x3258 <exp+0x4e>
    3246:	fe 57       	subi	r31, 0x7E	; 126
    3248:	e0 68       	ori	r30, 0x80	; 128
    324a:	44 27       	eor	r20, r20
    324c:	ee 0f       	add	r30, r30
    324e:	44 1f       	adc	r20, r20
    3250:	fa 95       	dec	r31
    3252:	e1 f7       	brne	.-8      	; 0x324c <exp+0x42>
    3254:	41 95       	neg	r20
    3256:	55 0b       	sbc	r21, r21
    3258:	64 d0       	rcall	.+200    	; 0x3322 <ldexp>
    325a:	0f 90       	pop	r0
    325c:	07 fe       	sbrs	r0, 7
    325e:	58 c0       	rjmp	.+176    	; 0x3310 <inverse>
    3260:	08 95       	ret

00003262 <__fp_inf>:
    3262:	97 f9       	bld	r25, 7
    3264:	9f 67       	ori	r25, 0x7F	; 127
    3266:	80 e8       	ldi	r24, 0x80	; 128
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	60 e0       	ldi	r22, 0x00	; 0
    326c:	08 95       	ret

0000326e <__fp_nan>:
    326e:	9f ef       	ldi	r25, 0xFF	; 255
    3270:	80 ec       	ldi	r24, 0xC0	; 192
    3272:	08 95       	ret

00003274 <__fp_powser>:
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	1f 93       	push	r17
    327a:	0f 93       	push	r16
    327c:	ff 92       	push	r15
    327e:	ef 92       	push	r14
    3280:	df 92       	push	r13
    3282:	7b 01       	movw	r14, r22
    3284:	8c 01       	movw	r16, r24
    3286:	68 94       	set
    3288:	05 c0       	rjmp	.+10     	; 0x3294 <__fp_powser+0x20>
    328a:	da 2e       	mov	r13, r26
    328c:	ef 01       	movw	r28, r30
    328e:	ff d0       	rcall	.+510    	; 0x348e <__mulsf3x>
    3290:	fe 01       	movw	r30, r28
    3292:	e8 94       	clt
    3294:	a5 91       	lpm	r26, Z+
    3296:	25 91       	lpm	r18, Z+
    3298:	35 91       	lpm	r19, Z+
    329a:	45 91       	lpm	r20, Z+
    329c:	55 91       	lpm	r21, Z+
    329e:	ae f3       	brts	.-22     	; 0x328a <__fp_powser+0x16>
    32a0:	ef 01       	movw	r28, r30
    32a2:	59 d1       	rcall	.+690    	; 0x3556 <__addsf3x>
    32a4:	fe 01       	movw	r30, r28
    32a6:	97 01       	movw	r18, r14
    32a8:	a8 01       	movw	r20, r16
    32aa:	da 94       	dec	r13
    32ac:	79 f7       	brne	.-34     	; 0x328c <__fp_powser+0x18>
    32ae:	df 90       	pop	r13
    32b0:	ef 90       	pop	r14
    32b2:	ff 90       	pop	r15
    32b4:	0f 91       	pop	r16
    32b6:	1f 91       	pop	r17
    32b8:	cf 91       	pop	r28
    32ba:	df 91       	pop	r29
    32bc:	08 95       	ret

000032be <__fp_split3>:
    32be:	57 fd       	sbrc	r21, 7
    32c0:	90 58       	subi	r25, 0x80	; 128
    32c2:	44 0f       	add	r20, r20
    32c4:	55 1f       	adc	r21, r21
    32c6:	59 f0       	breq	.+22     	; 0x32de <__fp_splitA+0x10>
    32c8:	5f 3f       	cpi	r21, 0xFF	; 255
    32ca:	71 f0       	breq	.+28     	; 0x32e8 <__fp_splitA+0x1a>
    32cc:	47 95       	ror	r20

000032ce <__fp_splitA>:
    32ce:	88 0f       	add	r24, r24
    32d0:	97 fb       	bst	r25, 7
    32d2:	99 1f       	adc	r25, r25
    32d4:	61 f0       	breq	.+24     	; 0x32ee <__fp_splitA+0x20>
    32d6:	9f 3f       	cpi	r25, 0xFF	; 255
    32d8:	79 f0       	breq	.+30     	; 0x32f8 <__fp_splitA+0x2a>
    32da:	87 95       	ror	r24
    32dc:	08 95       	ret
    32de:	12 16       	cp	r1, r18
    32e0:	13 06       	cpc	r1, r19
    32e2:	14 06       	cpc	r1, r20
    32e4:	55 1f       	adc	r21, r21
    32e6:	f2 cf       	rjmp	.-28     	; 0x32cc <__fp_split3+0xe>
    32e8:	46 95       	lsr	r20
    32ea:	f1 df       	rcall	.-30     	; 0x32ce <__fp_splitA>
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <__fp_splitA+0x30>
    32ee:	16 16       	cp	r1, r22
    32f0:	17 06       	cpc	r1, r23
    32f2:	18 06       	cpc	r1, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	f1 cf       	rjmp	.-30     	; 0x32da <__fp_splitA+0xc>
    32f8:	86 95       	lsr	r24
    32fa:	71 05       	cpc	r23, r1
    32fc:	61 05       	cpc	r22, r1
    32fe:	08 94       	sec
    3300:	08 95       	ret

00003302 <__fp_zero>:
    3302:	e8 94       	clt

00003304 <__fp_szero>:
    3304:	bb 27       	eor	r27, r27
    3306:	66 27       	eor	r22, r22
    3308:	77 27       	eor	r23, r23
    330a:	cb 01       	movw	r24, r22
    330c:	97 f9       	bld	r25, 7
    330e:	08 95       	ret

00003310 <inverse>:
    3310:	9b 01       	movw	r18, r22
    3312:	ac 01       	movw	r20, r24
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	80 e8       	ldi	r24, 0x80	; 128
    331a:	9f e3       	ldi	r25, 0x3F	; 63
    331c:	62 ca       	rjmp	.-2876   	; 0x27e2 <__divsf3>
    331e:	a1 cf       	rjmp	.-190    	; 0x3262 <__fp_inf>
    3320:	6d c1       	rjmp	.+730    	; 0x35fc <__fp_mpack>

00003322 <ldexp>:
    3322:	d5 df       	rcall	.-86     	; 0x32ce <__fp_splitA>
    3324:	e8 f3       	brcs	.-6      	; 0x3320 <inverse+0x10>
    3326:	99 23       	and	r25, r25
    3328:	d9 f3       	breq	.-10     	; 0x3320 <inverse+0x10>
    332a:	94 0f       	add	r25, r20
    332c:	51 1d       	adc	r21, r1
    332e:	bb f3       	brvs	.-18     	; 0x331e <inverse+0xe>
    3330:	91 50       	subi	r25, 0x01	; 1
    3332:	50 40       	sbci	r21, 0x00	; 0
    3334:	94 f0       	brlt	.+36     	; 0x335a <ldexp+0x38>
    3336:	59 f0       	breq	.+22     	; 0x334e <ldexp+0x2c>
    3338:	88 23       	and	r24, r24
    333a:	32 f0       	brmi	.+12     	; 0x3348 <ldexp+0x26>
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	88 1f       	adc	r24, r24
    3342:	91 50       	subi	r25, 0x01	; 1
    3344:	50 40       	sbci	r21, 0x00	; 0
    3346:	c1 f7       	brne	.-16     	; 0x3338 <ldexp+0x16>
    3348:	9e 3f       	cpi	r25, 0xFE	; 254
    334a:	51 05       	cpc	r21, r1
    334c:	44 f7       	brge	.-48     	; 0x331e <inverse+0xe>
    334e:	88 0f       	add	r24, r24
    3350:	91 1d       	adc	r25, r1
    3352:	96 95       	lsr	r25
    3354:	87 95       	ror	r24
    3356:	97 f9       	bld	r25, 7
    3358:	08 95       	ret
    335a:	5f 3f       	cpi	r21, 0xFF	; 255
    335c:	ac f0       	brlt	.+42     	; 0x3388 <ldexp+0x66>
    335e:	98 3e       	cpi	r25, 0xE8	; 232
    3360:	9c f0       	brlt	.+38     	; 0x3388 <ldexp+0x66>
    3362:	bb 27       	eor	r27, r27
    3364:	86 95       	lsr	r24
    3366:	77 95       	ror	r23
    3368:	67 95       	ror	r22
    336a:	b7 95       	ror	r27
    336c:	08 f4       	brcc	.+2      	; 0x3370 <ldexp+0x4e>
    336e:	b1 60       	ori	r27, 0x01	; 1
    3370:	93 95       	inc	r25
    3372:	c1 f7       	brne	.-16     	; 0x3364 <ldexp+0x42>
    3374:	bb 0f       	add	r27, r27
    3376:	58 f7       	brcc	.-42     	; 0x334e <ldexp+0x2c>
    3378:	11 f4       	brne	.+4      	; 0x337e <ldexp+0x5c>
    337a:	60 ff       	sbrs	r22, 0
    337c:	e8 cf       	rjmp	.-48     	; 0x334e <ldexp+0x2c>
    337e:	6f 5f       	subi	r22, 0xFF	; 255
    3380:	7f 4f       	sbci	r23, 0xFF	; 255
    3382:	8f 4f       	sbci	r24, 0xFF	; 255
    3384:	9f 4f       	sbci	r25, 0xFF	; 255
    3386:	e3 cf       	rjmp	.-58     	; 0x334e <ldexp+0x2c>
    3388:	bd cf       	rjmp	.-134    	; 0x3304 <__fp_szero>
    338a:	0e f0       	brts	.+2      	; 0x338e <ldexp+0x6c>
    338c:	37 c1       	rjmp	.+622    	; 0x35fc <__fp_mpack>
    338e:	6f cf       	rjmp	.-290    	; 0x326e <__fp_nan>
    3390:	68 94       	set
    3392:	67 cf       	rjmp	.-306    	; 0x3262 <__fp_inf>

00003394 <log>:
    3394:	9c df       	rcall	.-200    	; 0x32ce <__fp_splitA>
    3396:	c8 f3       	brcs	.-14     	; 0x338a <ldexp+0x68>
    3398:	99 23       	and	r25, r25
    339a:	d1 f3       	breq	.-12     	; 0x3390 <ldexp+0x6e>
    339c:	c6 f3       	brts	.-16     	; 0x338e <ldexp+0x6c>
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	1f 93       	push	r17
    33a4:	0f 93       	push	r16
    33a6:	ff 92       	push	r15
    33a8:	c9 2f       	mov	r28, r25
    33aa:	dd 27       	eor	r29, r29
    33ac:	88 23       	and	r24, r24
    33ae:	2a f0       	brmi	.+10     	; 0x33ba <log+0x26>
    33b0:	21 97       	sbiw	r28, 0x01	; 1
    33b2:	66 0f       	add	r22, r22
    33b4:	77 1f       	adc	r23, r23
    33b6:	88 1f       	adc	r24, r24
    33b8:	da f7       	brpl	.-10     	; 0x33b0 <log+0x1c>
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e8       	ldi	r20, 0x80	; 128
    33c0:	5f eb       	ldi	r21, 0xBF	; 191
    33c2:	9f e3       	ldi	r25, 0x3F	; 63
    33c4:	88 39       	cpi	r24, 0x98	; 152
    33c6:	20 f0       	brcs	.+8      	; 0x33d0 <log+0x3c>
    33c8:	80 3e       	cpi	r24, 0xE0	; 224
    33ca:	30 f0       	brcs	.+12     	; 0x33d8 <log+0x44>
    33cc:	21 96       	adiw	r28, 0x01	; 1
    33ce:	8f 77       	andi	r24, 0x7F	; 127
    33d0:	e1 d8       	rcall	.-3646   	; 0x2594 <__addsf3>
    33d2:	ec e0       	ldi	r30, 0x0C	; 12
    33d4:	f1 e0       	ldi	r31, 0x01	; 1
    33d6:	03 c0       	rjmp	.+6      	; 0x33de <log+0x4a>
    33d8:	dd d8       	rcall	.-3654   	; 0x2594 <__addsf3>
    33da:	e9 e3       	ldi	r30, 0x39	; 57
    33dc:	f1 e0       	ldi	r31, 0x01	; 1
    33de:	4a df       	rcall	.-364    	; 0x3274 <__fp_powser>
    33e0:	8b 01       	movw	r16, r22
    33e2:	be 01       	movw	r22, r28
    33e4:	ec 01       	movw	r28, r24
    33e6:	fb 2e       	mov	r15, r27
    33e8:	6f 57       	subi	r22, 0x7F	; 127
    33ea:	71 09       	sbc	r23, r1
    33ec:	75 95       	asr	r23
    33ee:	77 1f       	adc	r23, r23
    33f0:	88 0b       	sbc	r24, r24
    33f2:	99 0b       	sbc	r25, r25
    33f4:	32 db       	rcall	.-2460   	; 0x2a5a <__floatsisf>
    33f6:	28 e1       	ldi	r18, 0x18	; 24
    33f8:	32 e7       	ldi	r19, 0x72	; 114
    33fa:	41 e3       	ldi	r20, 0x31	; 49
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	47 d0       	rcall	.+142    	; 0x348e <__mulsf3x>
    3400:	af 2d       	mov	r26, r15
    3402:	98 01       	movw	r18, r16
    3404:	ae 01       	movw	r20, r28
    3406:	ff 90       	pop	r15
    3408:	0f 91       	pop	r16
    340a:	1f 91       	pop	r17
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	a2 d0       	rcall	.+324    	; 0x3556 <__addsf3x>
    3412:	10 c1       	rjmp	.+544    	; 0x3634 <__fp_round>

00003414 <modf>:
    3414:	fa 01       	movw	r30, r20
    3416:	dc 01       	movw	r26, r24
    3418:	aa 0f       	add	r26, r26
    341a:	bb 1f       	adc	r27, r27
    341c:	9b 01       	movw	r18, r22
    341e:	ac 01       	movw	r20, r24
    3420:	bf 57       	subi	r27, 0x7F	; 127
    3422:	28 f4       	brcc	.+10     	; 0x342e <modf+0x1a>
    3424:	22 27       	eor	r18, r18
    3426:	33 27       	eor	r19, r19
    3428:	44 27       	eor	r20, r20
    342a:	50 78       	andi	r21, 0x80	; 128
    342c:	1f c0       	rjmp	.+62     	; 0x346c <modf+0x58>
    342e:	b7 51       	subi	r27, 0x17	; 23
    3430:	88 f4       	brcc	.+34     	; 0x3454 <modf+0x40>
    3432:	ab 2f       	mov	r26, r27
    3434:	00 24       	eor	r0, r0
    3436:	46 95       	lsr	r20
    3438:	37 95       	ror	r19
    343a:	27 95       	ror	r18
    343c:	01 1c       	adc	r0, r1
    343e:	a3 95       	inc	r26
    3440:	d2 f3       	brmi	.-12     	; 0x3436 <modf+0x22>
    3442:	00 20       	and	r0, r0
    3444:	69 f0       	breq	.+26     	; 0x3460 <modf+0x4c>
    3446:	22 0f       	add	r18, r18
    3448:	33 1f       	adc	r19, r19
    344a:	44 1f       	adc	r20, r20
    344c:	b3 95       	inc	r27
    344e:	da f3       	brmi	.-10     	; 0x3446 <modf+0x32>
    3450:	0d d0       	rcall	.+26     	; 0x346c <modf+0x58>
    3452:	6f c8       	rjmp	.-3874   	; 0x2532 <__subsf3>
    3454:	61 30       	cpi	r22, 0x01	; 1
    3456:	71 05       	cpc	r23, r1
    3458:	a0 e8       	ldi	r26, 0x80	; 128
    345a:	8a 07       	cpc	r24, r26
    345c:	b9 46       	sbci	r27, 0x69	; 105
    345e:	30 f4       	brcc	.+12     	; 0x346c <modf+0x58>
    3460:	9b 01       	movw	r18, r22
    3462:	ac 01       	movw	r20, r24
    3464:	66 27       	eor	r22, r22
    3466:	77 27       	eor	r23, r23
    3468:	88 27       	eor	r24, r24
    346a:	90 78       	andi	r25, 0x80	; 128
    346c:	30 96       	adiw	r30, 0x00	; 0
    346e:	21 f0       	breq	.+8      	; 0x3478 <modf+0x64>
    3470:	20 83       	st	Z, r18
    3472:	31 83       	std	Z+1, r19	; 0x01
    3474:	42 83       	std	Z+2, r20	; 0x02
    3476:	53 83       	std	Z+3, r21	; 0x03
    3478:	08 95       	ret
    347a:	ce d0       	rcall	.+412    	; 0x3618 <__fp_pscA>
    347c:	28 f0       	brcs	.+10     	; 0x3488 <modf+0x74>
    347e:	d3 d0       	rcall	.+422    	; 0x3626 <__fp_pscB>
    3480:	18 f0       	brcs	.+6      	; 0x3488 <modf+0x74>
    3482:	95 23       	and	r25, r21
    3484:	09 f0       	breq	.+2      	; 0x3488 <modf+0x74>
    3486:	ed ce       	rjmp	.-550    	; 0x3262 <__fp_inf>
    3488:	f2 ce       	rjmp	.-540    	; 0x326e <__fp_nan>
    348a:	11 24       	eor	r1, r1
    348c:	3b cf       	rjmp	.-394    	; 0x3304 <__fp_szero>

0000348e <__mulsf3x>:
    348e:	17 df       	rcall	.-466    	; 0x32be <__fp_split3>
    3490:	a0 f3       	brcs	.-24     	; 0x347a <modf+0x66>

00003492 <__mulsf3_pse>:
    3492:	95 9f       	mul	r25, r21
    3494:	d1 f3       	breq	.-12     	; 0x348a <modf+0x76>
    3496:	95 0f       	add	r25, r21
    3498:	50 e0       	ldi	r21, 0x00	; 0
    349a:	55 1f       	adc	r21, r21
    349c:	62 9f       	mul	r22, r18
    349e:	f0 01       	movw	r30, r0
    34a0:	72 9f       	mul	r23, r18
    34a2:	bb 27       	eor	r27, r27
    34a4:	f0 0d       	add	r31, r0
    34a6:	b1 1d       	adc	r27, r1
    34a8:	63 9f       	mul	r22, r19
    34aa:	aa 27       	eor	r26, r26
    34ac:	f0 0d       	add	r31, r0
    34ae:	b1 1d       	adc	r27, r1
    34b0:	aa 1f       	adc	r26, r26
    34b2:	64 9f       	mul	r22, r20
    34b4:	66 27       	eor	r22, r22
    34b6:	b0 0d       	add	r27, r0
    34b8:	a1 1d       	adc	r26, r1
    34ba:	66 1f       	adc	r22, r22
    34bc:	82 9f       	mul	r24, r18
    34be:	22 27       	eor	r18, r18
    34c0:	b0 0d       	add	r27, r0
    34c2:	a1 1d       	adc	r26, r1
    34c4:	62 1f       	adc	r22, r18
    34c6:	73 9f       	mul	r23, r19
    34c8:	b0 0d       	add	r27, r0
    34ca:	a1 1d       	adc	r26, r1
    34cc:	62 1f       	adc	r22, r18
    34ce:	83 9f       	mul	r24, r19
    34d0:	a0 0d       	add	r26, r0
    34d2:	61 1d       	adc	r22, r1
    34d4:	22 1f       	adc	r18, r18
    34d6:	74 9f       	mul	r23, r20
    34d8:	33 27       	eor	r19, r19
    34da:	a0 0d       	add	r26, r0
    34dc:	61 1d       	adc	r22, r1
    34de:	23 1f       	adc	r18, r19
    34e0:	84 9f       	mul	r24, r20
    34e2:	60 0d       	add	r22, r0
    34e4:	21 1d       	adc	r18, r1
    34e6:	82 2f       	mov	r24, r18
    34e8:	76 2f       	mov	r23, r22
    34ea:	6a 2f       	mov	r22, r26
    34ec:	11 24       	eor	r1, r1
    34ee:	9f 57       	subi	r25, 0x7F	; 127
    34f0:	50 40       	sbci	r21, 0x00	; 0
    34f2:	8a f0       	brmi	.+34     	; 0x3516 <__mulsf3_pse+0x84>
    34f4:	e1 f0       	breq	.+56     	; 0x352e <__mulsf3_pse+0x9c>
    34f6:	88 23       	and	r24, r24
    34f8:	4a f0       	brmi	.+18     	; 0x350c <__mulsf3_pse+0x7a>
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	bb 1f       	adc	r27, r27
    3500:	66 1f       	adc	r22, r22
    3502:	77 1f       	adc	r23, r23
    3504:	88 1f       	adc	r24, r24
    3506:	91 50       	subi	r25, 0x01	; 1
    3508:	50 40       	sbci	r21, 0x00	; 0
    350a:	a9 f7       	brne	.-22     	; 0x34f6 <__mulsf3_pse+0x64>
    350c:	9e 3f       	cpi	r25, 0xFE	; 254
    350e:	51 05       	cpc	r21, r1
    3510:	70 f0       	brcs	.+28     	; 0x352e <__mulsf3_pse+0x9c>
    3512:	a7 ce       	rjmp	.-690    	; 0x3262 <__fp_inf>
    3514:	f7 ce       	rjmp	.-530    	; 0x3304 <__fp_szero>
    3516:	5f 3f       	cpi	r21, 0xFF	; 255
    3518:	ec f3       	brlt	.-6      	; 0x3514 <__mulsf3_pse+0x82>
    351a:	98 3e       	cpi	r25, 0xE8	; 232
    351c:	dc f3       	brlt	.-10     	; 0x3514 <__mulsf3_pse+0x82>
    351e:	86 95       	lsr	r24
    3520:	77 95       	ror	r23
    3522:	67 95       	ror	r22
    3524:	b7 95       	ror	r27
    3526:	f7 95       	ror	r31
    3528:	e7 95       	ror	r30
    352a:	9f 5f       	subi	r25, 0xFF	; 255
    352c:	c1 f7       	brne	.-16     	; 0x351e <__mulsf3_pse+0x8c>
    352e:	fe 2b       	or	r31, r30
    3530:	88 0f       	add	r24, r24
    3532:	91 1d       	adc	r25, r1
    3534:	96 95       	lsr	r25
    3536:	87 95       	ror	r24
    3538:	97 f9       	bld	r25, 7
    353a:	08 95       	ret
    353c:	6d d0       	rcall	.+218    	; 0x3618 <__fp_pscA>
    353e:	30 f0       	brcs	.+12     	; 0x354c <__mulsf3_pse+0xba>
    3540:	72 d0       	rcall	.+228    	; 0x3626 <__fp_pscB>
    3542:	20 f0       	brcs	.+8      	; 0x354c <__mulsf3_pse+0xba>
    3544:	31 f4       	brne	.+12     	; 0x3552 <__mulsf3_pse+0xc0>
    3546:	9f 3f       	cpi	r25, 0xFF	; 255
    3548:	11 f4       	brne	.+4      	; 0x354e <__mulsf3_pse+0xbc>
    354a:	1e f4       	brtc	.+6      	; 0x3552 <__mulsf3_pse+0xc0>
    354c:	90 ce       	rjmp	.-736    	; 0x326e <__fp_nan>
    354e:	0e f4       	brtc	.+2      	; 0x3552 <__mulsf3_pse+0xc0>
    3550:	e0 95       	com	r30
    3552:	e7 fb       	bst	r30, 7
    3554:	86 ce       	rjmp	.-756    	; 0x3262 <__fp_inf>

00003556 <__addsf3x>:
    3556:	e9 2f       	mov	r30, r25
    3558:	b2 de       	rcall	.-668    	; 0x32be <__fp_split3>
    355a:	80 f3       	brcs	.-32     	; 0x353c <__mulsf3_pse+0xaa>
    355c:	ba 17       	cp	r27, r26
    355e:	62 07       	cpc	r22, r18
    3560:	73 07       	cpc	r23, r19
    3562:	84 07       	cpc	r24, r20
    3564:	95 07       	cpc	r25, r21
    3566:	18 f0       	brcs	.+6      	; 0x356e <__addsf3x+0x18>
    3568:	71 f4       	brne	.+28     	; 0x3586 <__addsf3x+0x30>
    356a:	9e f5       	brtc	.+102    	; 0x35d2 <__addsf3x+0x7c>
    356c:	ca ce       	rjmp	.-620    	; 0x3302 <__fp_zero>
    356e:	0e f4       	brtc	.+2      	; 0x3572 <__addsf3x+0x1c>
    3570:	e0 95       	com	r30
    3572:	0b 2e       	mov	r0, r27
    3574:	ba 2f       	mov	r27, r26
    3576:	a0 2d       	mov	r26, r0
    3578:	0b 01       	movw	r0, r22
    357a:	b9 01       	movw	r22, r18
    357c:	90 01       	movw	r18, r0
    357e:	0c 01       	movw	r0, r24
    3580:	ca 01       	movw	r24, r20
    3582:	a0 01       	movw	r20, r0
    3584:	11 24       	eor	r1, r1
    3586:	ff 27       	eor	r31, r31
    3588:	59 1b       	sub	r21, r25
    358a:	99 f0       	breq	.+38     	; 0x35b2 <__addsf3x+0x5c>
    358c:	59 3f       	cpi	r21, 0xF9	; 249
    358e:	50 f4       	brcc	.+20     	; 0x35a4 <__addsf3x+0x4e>
    3590:	50 3e       	cpi	r21, 0xE0	; 224
    3592:	68 f1       	brcs	.+90     	; 0x35ee <__addsf3x+0x98>
    3594:	1a 16       	cp	r1, r26
    3596:	f0 40       	sbci	r31, 0x00	; 0
    3598:	a2 2f       	mov	r26, r18
    359a:	23 2f       	mov	r18, r19
    359c:	34 2f       	mov	r19, r20
    359e:	44 27       	eor	r20, r20
    35a0:	58 5f       	subi	r21, 0xF8	; 248
    35a2:	f3 cf       	rjmp	.-26     	; 0x358a <__addsf3x+0x34>
    35a4:	46 95       	lsr	r20
    35a6:	37 95       	ror	r19
    35a8:	27 95       	ror	r18
    35aa:	a7 95       	ror	r26
    35ac:	f0 40       	sbci	r31, 0x00	; 0
    35ae:	53 95       	inc	r21
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__addsf3x+0x4e>
    35b2:	7e f4       	brtc	.+30     	; 0x35d2 <__addsf3x+0x7c>
    35b4:	1f 16       	cp	r1, r31
    35b6:	ba 0b       	sbc	r27, r26
    35b8:	62 0b       	sbc	r22, r18
    35ba:	73 0b       	sbc	r23, r19
    35bc:	84 0b       	sbc	r24, r20
    35be:	ba f0       	brmi	.+46     	; 0x35ee <__addsf3x+0x98>
    35c0:	91 50       	subi	r25, 0x01	; 1
    35c2:	a1 f0       	breq	.+40     	; 0x35ec <__addsf3x+0x96>
    35c4:	ff 0f       	add	r31, r31
    35c6:	bb 1f       	adc	r27, r27
    35c8:	66 1f       	adc	r22, r22
    35ca:	77 1f       	adc	r23, r23
    35cc:	88 1f       	adc	r24, r24
    35ce:	c2 f7       	brpl	.-16     	; 0x35c0 <__addsf3x+0x6a>
    35d0:	0e c0       	rjmp	.+28     	; 0x35ee <__addsf3x+0x98>
    35d2:	ba 0f       	add	r27, r26
    35d4:	62 1f       	adc	r22, r18
    35d6:	73 1f       	adc	r23, r19
    35d8:	84 1f       	adc	r24, r20
    35da:	48 f4       	brcc	.+18     	; 0x35ee <__addsf3x+0x98>
    35dc:	87 95       	ror	r24
    35de:	77 95       	ror	r23
    35e0:	67 95       	ror	r22
    35e2:	b7 95       	ror	r27
    35e4:	f7 95       	ror	r31
    35e6:	9e 3f       	cpi	r25, 0xFE	; 254
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <__addsf3x+0x96>
    35ea:	b3 cf       	rjmp	.-154    	; 0x3552 <__mulsf3_pse+0xc0>
    35ec:	93 95       	inc	r25
    35ee:	88 0f       	add	r24, r24
    35f0:	08 f0       	brcs	.+2      	; 0x35f4 <__addsf3x+0x9e>
    35f2:	99 27       	eor	r25, r25
    35f4:	ee 0f       	add	r30, r30
    35f6:	97 95       	ror	r25
    35f8:	87 95       	ror	r24
    35fa:	08 95       	ret

000035fc <__fp_mpack>:
    35fc:	9f 3f       	cpi	r25, 0xFF	; 255
    35fe:	31 f0       	breq	.+12     	; 0x360c <__fp_mpack_finite+0xc>

00003600 <__fp_mpack_finite>:
    3600:	91 50       	subi	r25, 0x01	; 1
    3602:	20 f4       	brcc	.+8      	; 0x360c <__fp_mpack_finite+0xc>
    3604:	87 95       	ror	r24
    3606:	77 95       	ror	r23
    3608:	67 95       	ror	r22
    360a:	b7 95       	ror	r27
    360c:	88 0f       	add	r24, r24
    360e:	91 1d       	adc	r25, r1
    3610:	96 95       	lsr	r25
    3612:	87 95       	ror	r24
    3614:	97 f9       	bld	r25, 7
    3616:	08 95       	ret

00003618 <__fp_pscA>:
    3618:	00 24       	eor	r0, r0
    361a:	0a 94       	dec	r0
    361c:	16 16       	cp	r1, r22
    361e:	17 06       	cpc	r1, r23
    3620:	18 06       	cpc	r1, r24
    3622:	09 06       	cpc	r0, r25
    3624:	08 95       	ret

00003626 <__fp_pscB>:
    3626:	00 24       	eor	r0, r0
    3628:	0a 94       	dec	r0
    362a:	12 16       	cp	r1, r18
    362c:	13 06       	cpc	r1, r19
    362e:	14 06       	cpc	r1, r20
    3630:	05 06       	cpc	r0, r21
    3632:	08 95       	ret

00003634 <__fp_round>:
    3634:	09 2e       	mov	r0, r25
    3636:	03 94       	inc	r0
    3638:	00 0c       	add	r0, r0
    363a:	11 f4       	brne	.+4      	; 0x3640 <__fp_round+0xc>
    363c:	88 23       	and	r24, r24
    363e:	52 f0       	brmi	.+20     	; 0x3654 <__fp_round+0x20>
    3640:	bb 0f       	add	r27, r27
    3642:	40 f4       	brcc	.+16     	; 0x3654 <__fp_round+0x20>
    3644:	bf 2b       	or	r27, r31
    3646:	11 f4       	brne	.+4      	; 0x364c <__fp_round+0x18>
    3648:	60 ff       	sbrs	r22, 0
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <__fp_round+0x20>
    364c:	6f 5f       	subi	r22, 0xFF	; 255
    364e:	7f 4f       	sbci	r23, 0xFF	; 255
    3650:	8f 4f       	sbci	r24, 0xFF	; 255
    3652:	9f 4f       	sbci	r25, 0xFF	; 255
    3654:	08 95       	ret

00003656 <_exit>:
    3656:	f8 94       	cli

00003658 <__stop_program>:
    3658:	ff cf       	rjmp	.-2      	; 0x3658 <__stop_program>
